{
  "mcqs": [
    {
      "id": 1,
      "title": "JavaScript",
      "logo": "javascript.png",
      "description": "JavaScript is a versatile language for building interactive web applications. It runs in the browser and enables real-time updates and user interactivity.",
      "lastUpdated": "3rd June 2023",
      "body": [
        {
          "id": 1,
          "question": "JavaScript is an _____________ language.",
          "optA": "Object-oriented",
          "optB": "Object-based",
          "optC": "Object-referred",
          "optD": "Assembly",
          "answer": "Object-based",
          "reason": "For any programming language to be classified as object-oriented, it must have proper characteristics of an object-oriented programming language, such as polymorphism, encapsulation, inheritance, etc. And JavaScript does not have that. However, JavaScript does treat objects like data structures, hence it classifies as object-based."
        },
        {
          "id": 2,
          "question": "Which of the following is the main entry point to all client-side JavaScript features and APIs ?",
          "optA": "Window",
          "optB": "Location",
          "optC": "Standard",
          "optD": "Position",
          "answer": "Window",
          "reason": "All client-side JavaScript features and APIs are accessed through the Window object. It represents a web browser's window or frame, and the identifier Window can be used to refer to it."
        },
        {
          "id": 3,
          "question": "What is hoisting in JavaScript ?",
          "optA": "A way to move variables and functions to the top of their respective scopes",
          "optB": "A way to remove variables and functions from their respective scopes",
          "optC": "A way to convert variables and functions to a different data type",
          "optD": "A way to prevent variables and functions from being used",
          "answer": "A way to move variables and functions to the top of their respective scopes",
          "reason": "Hoisting in JavaScript is the behavior of moving variables and function declarations to the top of their respective scopes (either the global scope or the local scope of a function). JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables ( let and const excluded ) or classes to the top of their scope, prior to execution of the code."
        },
        {
          "id": 4,
          "question": "What are closures in JavaScript ?",
          "optA": "A function that is enclosed with references to its inner function scope",
          "optB": "A function that is enclosed with references to its lexical environment",
          "optC": "A function that is enclosed with the object to its inner function scope",
          "optD": "None of the mentioned",
          "answer": "A function that is enclosed with references to its lexical environment",
          "reason": "A closure is a function that is enclosed with references to its lexical environment. A closure allows an inner function to access the scope of an outside function. Closures are formed every time a function is created in JavaScript, during function creation time."
        },
        {
          "id": 5,
          "question": "What does the interpreter do when it encounters an empty statement ?",
          "optA": "Shows a warning",
          "optB": "Prompts to complete the statement",
          "optC": "Ignores the statement",
          "optD": "Throws an error",
          "answer": "Ignores the statement",
          "reason": "In JavaScript, when the interpreter encounters an empty statement, it normally ignores or does not respond to that empty statement. The empty statement is sometimes useful, such as for creating loops for nothing."
        },
        {
          "id": 6,
          "question": "Arrays in JavaScript are defined by which of the following statements ?",
          "optA": "It is an ordered list of values",
          "optB": "It is an ordered list of functions",
          "optC": "It is an ordered list of strings",
          "optD": "It is an ordered list of objects",
          "answer": "It is an ordered list of values",
          "reason": "An array in JavaScript is an ordered list of values, each value is referred to as an element, and it is identified by an index. An array can include values of many sorts, and the length of an array is dynamically sized."
        },
        {
          "id": 7,
          "question": "Which of the following scoping type does JavaScript use ?",
          "optA": "Sequential",
          "optB": "Lexical",
          "optC": "Segmental",
          "optD": "Literal",
          "answer": "Lexical",
          "reason": "JavaScript, like most current programming languages, uses lexical scoping. This means that functions are performed with the variable scope in effect when they were defined, rather than the variable scope in effect when they are invoked."
        },
        {
          "id": 8,
          "question": "What is the basic factor that differentiates JavaScript from Java ?",
          "optA": "There is no difference",
          "optB": "Variables are specific",
          "optC": "Functions are considered as fields",
          "optD": "Functions are values, and there is no hard distinction between methods and fields",
          "answer": "Functions are values, and there is no hard distinction between methods and fields",
          "reason": "Functions in JavaScript are values, while methods and fields are not clearly defined."
        },
        {
          "id": 9,
          "question": "Which of the following variables takes precedence over the others if the names are the same ?",
          "optA": "The local element",
          "optB": "Global variable",
          "optC": "Both of the above",
          "optD": "None of the above",
          "answer": "The local element",
          "reason": "In JavaScript, the local variable takes precedence over the global variable if nameS of both the local and global variables are same."
        },
        {
          "id": 10,
          "question": "Why is a JavaScript engine needed ?",
          "optA": "Interpreting the JavaScript",
          "optB": "Compiling the JavaScript",
          "optC": "Both compiling and interpreting JavaScript",
          "optD": "Parsing the JavaScript",
          "answer": "Interpreting the JavaScript",
          "reason": "The JavaScript engine is used to interpret JavaScript and run it on a web page."
        },
        {
          "id": 11,
          "question": "Which of the following methods can be used to add new elements to an array ?",
          "optA": "push()",
          "optB": "unshift()",
          "optC": "splice()",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "All of the mentioned methods: push(), unshift(), and splice() can be used to add new elements to an array in JavaScript."
        },
        {
          "id": 12,
          "question": "Which of the following methods is used to remove the first element from an array ?",
          "optA": "splice()",
          "optB": "pop()",
          "optC": "shift()",
          "optD": "slice()",
          "answer": "shift()",
          "reason": "The shift() method is used to remove the first element from an array and shift all other elements down by one position."
        },
        {
          "id": 13,
          "question": "In JavaScript, which one of the following is not considered as an error ?",
          "optA": "Division by zero",
          "optB": "Syntax error",
          "optC": "Missing of semicolons",
          "optD": "Missing of Bracket",
          "answer": "Division by zero",
          "reason": "Division by zero in JavaScript does not throw an error. It returns a special value: 'Infinity', when dividing a number by zero. However, dividing zero by zero will result in 'NaN' ( Not a Number )."
        },
        {
          "id": 14,
          "question": "Which of the following method returns the value of the number ?",
          "optA": "toString()",
          "optB": "toLocaleString()",
          "optC": "toPrecision()",
          "optD": "valueOf()",
          "answer": "valueOf()",
          "reason": "The valueOf() method is used to return the primitive value of a Number object."
        },
        {
          "id": 15,
          "question": "Which of the following methods returns the character in the string starting at the specified position via the specified number of characters ?",
          "optA": "slice()",
          "optB": "search()",
          "optC": "split()",
          "optD": "substr()",
          "answer": "substr()",
          "reason": "The substr() method is used to extract a substring from a string, starting at a specified position and with a specified number of characters."
        },
        {
          "id": 16,
          "question": "In JavaScript, the x===y statement implies that:",
          "optA": "Both are equal in value, type and reference address as well",
          "optB": "Both are equal in value only",
          "optC": "Both are equal in value and data type",
          "optD": "Both are not the same at all",
          "answer": "Both are equal in value and data type",
          "reason": "The '===' (strict equality ) operator in JavaScript checks if both the value and data type of the operands are equal."
        },
        {
          "id": 17,
          "question": "What task is performed by the pop() method of an array ?",
          "optA": "It updates the elements of array",
          "optB": "It increments the total length of array by 1",
          "optC": "It prints the first element and has no impact on the length of array",
          "optD": "It removes one element from the end of array",
          "answer": "It removes one element from the end of array",
          "reason": "The pop() method of an array removes the last element from the array and returns that element."
        },
        {
          "id": 18,
          "question": "Which one of the following is used for calling a function or a method in JavaScript ?",
          "optA": "Property Access Expression",
          "optB": "Functional expression",
          "optC": "Invocation expression",
          "optD": "Primary expression",
          "answer": "Invocation expression",
          "reason": "The invocation expression is used to call a function or a method in JavaScript."
        },
        {
          "id": 19,
          "question": "Which one of the following operators is used to check whether a specific property exists or not ?",
          "optA": "Exists",
          "optB": "Exist",
          "optC": "Within",
          "optD": "In",
          "answer": "In",
          "reason": "The 'in' operator is used to check if a specific property exists."
        },
        {
          "id": 20,
          "question": "Which one of the following is a ternary operator?",
          "optA": "?",
          "optB": ":",
          "optC": "-",
          "optD": "+",
          "answer": "?",
          "reason": "The '?' symbol is the conditional (ternary) operator in JavaScript. It combines three expressions into one."
        },
        {
          "id": 21,
          "question": "What will be the result of: 'one' < 8 ?",
          "optA": "True",
          "optB": "False",
          "optC": "NaN",
          "optD": "Undefined",
          "answer": "False",
          "reason": "When comparing a string with a number using the less than operator ('<'), JavaScript converts the string to a numeric value. Since 'one' cannot be converted to a number, it is treated as NaN, which is not less than 8, resulting in 'false'."
        },
        {
          "id": 22,
          "question": "Which one of the following is known as the Equality operator, and is used to check whether the two values are equal or not ?",
          "optA": "=",
          "optB": "===",
          "optC": "==",
          "optD": "&&",
          "answer": "==",
          "reason": "The '==' operator in JavaScript is known as the Equality operator. It checks whether the values of two operands are equal or not, performing type coercion if necessary."
        },
        {
          "id": 23,
          "question": "Which one of the following operators returns false if both values are equal ?",
          "optA": "!",
          "optB": "!==",
          "optC": "!=",
          "optD": "All of the above",
          "answer": "!=",
          "reason": "The '!=' operator in JavaScript returns 'false' if the two values are equal. If you're asked to also compare data types, then the answer would be '!=='. "
        },
        {
          "id": 24,
          "question": "In a case where the value of the operand is NULL, the typeof returned by the unary operator is _________.",
          "optA": "undefined",
          "optB": "string",
          "optC": "boolean",
          "optD": "object",
          "answer": "object",
          "reason": "When the value of an operand is null, the 'typeof' of the unary operator returns 'object'."
        },
        {
          "id": 25,
          "question": "Which one of the following is not a keyword ?",
          "optA": "if",
          "optB": "with",
          "optC": "use strict",
          "optD": "debugger",
          "answer": "use strict",
          "reason": "The 'use strict' is not a keyword but a directive introduced in ECMAScript 5."
        },
        {
          "id": 26,
          "question": "What are the three important manipulations for a loop on a loop variable ?",
          "optA": "Updation, Incrementation, Initialization",
          "optB": "Initialization, Testing, Incrementation",
          "optC": "Testing, Updation, Testing",
          "optD": "Initialization, Testing, Updation",
          "answer": "Initialization, Testing, Updation",
          "reason": "The three important manipulations for a loop on a loop variable are Initialization, Testing, and Updation."
        },
        {
          "id": 27,
          "question": "Which one of the following is not considered as a 'statement' in JavaScript ?",
          "optA": "use strict",
          "optB": "debugger",
          "optC": "if",
          "optD": "with",
          "answer": "use strict",
          "reason": "The 'use strict' directive is not considered as a statement because it does not include any language keywords."
        },
        {
          "id": 28,
          "question": "What happens if we define a 'for' loop and it removes one of the properties that have not yet been enumerated ?",
          "optA": "The removed property will be stored in a cache",
          "optB": "The loop will not run at all",
          "optC": "That property will be enumerated",
          "optD": "That specific property will not be enumerated",
          "answer": "That specific property will not be enumerated",
          "reason": "If a property is removed during the execution of a 'for' loop and that property has not yet been enumerated, it will not be enumerated."
        },
        {
          "id": 29,
          "question": "What is the correct response by the interpreter in a jump statement when an exception is thrown ?",
          "optA": "The interpreter will jump to the nearest enclosing exception handler",
          "optB": "The interpreter will throw another exception",
          "optC": "The interpreter will stop working",
          "optD": "The interpreter throws an error",
          "answer": "The interpreter will jump to the nearest enclosing exception handler",
          "reason": "When an exception is thrown, the interpreter jumps to the nearest enclosing exception handler, if one exists."
        },
        {
          "id": 30,
          "question": "A set of unordered properties that has a name and value is called ________",
          "optA": "String",
          "optB": "Array",
          "optC": "Serialized Object",
          "optD": "Object",
          "answer": "Object",
          "reason": "An object in JavaScript is a set of unordered properties, each having a name and value."
        }
      ]
    },
    {
      "id": 2,
      "title": "React JS",
      "logo": "react.png",
      "description": "React is a JavaScript library for building user interfaces. It's widely used in web development, particularly for creating reusable components and optimizing rendering performance. Companies like Facebook, Instagram, Airbnb, and Netflix rely on React for their applications.",
      "lastUpdated": "1st June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is the virtual DOM in React JS ?",
          "optA": "A lightweight version of the actual DOM",
          "optB": "A separate DOM that runs on the server",
          "optC": "A concept that allows React to efficiently update and render components",
          "optD": "A tool for debugging React applications",
          "answer": "A concept that allows React to efficiently update and render components",
          "reason": "The virtual DOM is a concept in React JS that provides a lightweight representation of the actual DOM. It allows React to efficiently update and render components by performing a differential update, minimizing actual DOM manipulations."
        },
        {
          "id": 2,
          "question": "What is state in React JS ?",
          "optA": "A built-in React JS component",
          "optB": "A static data store for global variables",
          "optC": "A JavaScript object used to store and manage component data",
          "optD": "A lifecycle method in React JS",
          "answer": "A JavaScript object used to store and manage component data",
          "reason": "State in React JS refers to a JavaScript object that holds component-specific data. It allows components to manage and update their own data independently, enabling dynamic rendering and interactivity."
        },
        {
          "id": 3,
          "question": "What is the purpose of React Router in React JS ?",
          "optA": "To handle HTTP requests and server-side routing",
          "optB": "To manage state and data flow in React components",
          "optC": "To facilitate client-side routing in a single-page application",
          "optD": "To provide a testing framework for React JS applications",
          "answer": "To facilitate client-side routing in a single-page application",
          "reason": "React Router is a library in React JS that enables client-side routing in a single-page application. It allows for dynamic rendering of components based on the URL, providing a seamless navigation experience."
        },
        {
          "id": 4,
          "question": "Which keyword is used to define a class component in React JS?",
          "optA": "function",
          "optB": "component",
          "optC": "class",
          "optD": "render",
          "answer": "class",
          "reason": "In React JS, a class component is defined using the `class` keyword, followed by the component name and the `extends` keyword to inherit from the `React.Component` class."
        },
        {
          "id": 5,
          "question": "What is the purpose of React Hooks in React JS ?",
          "optA": "To style React components using CSS-in-JS",
          "optB": "To manage asynchronous operations and API calls",
          "optC": "To create reusable component logic and manage component state",
          "optD": "To provide a mechanism for internationalization in React JS",
          "answer": "To create reusable component logic and manage component state",
          "reason": "React Hooks in React JS provide a way to create reusable component logic and manage component state without writing class components. Hooks such as useState and useEffect enable functional components to have state and lifecycle functionality."
        },
        {
          "id": 6,
          "question": "What is the file extension for React JS components?",
          "optA": ".rct",
          "optB": ".jsx",
          "optC": ".react",
          "optD": ".html",
          "answer": ".jsx",
          "reason": "React JS components typically use the file extension `.jsx` to differentiate them from regular JavaScript files. This extension is used to indicate that the file contains JSX code."
        },
        {
          "id": 7,
          "question": "What is the purpose of React DevTools ?",
          "optA": "To profile and optimize React JS applications",
          "optB": "To provide a visual editor for designing React components",
          "optC": "To enable real-time collaboration among React JS developers",
          "optD": "To generate documentation for React JS code",
          "answer": "To profile and optimize React JS applications",
          "reason": "React DevTools is a browser extension and development tool that allows developers to inspect, profile, and debug React JS applications. It helps identify performance."
        },

        {
          "id": 8,
          "question": "What is a functional component in React JS ?",
          "optA": "A component written using the functional programming paradigm",
          "optB": "A component that can be reused across multiple projects",
          "optC": "A component that does not have a state or lifecycle methods",
          "optD": "A component that renders a single HTML element",
          "answer": "A component that does not have a state or lifecycle methods",
          "reason": "A functional component in React JS is a JavaScript function that returns JSX to describe the UI. It does not have its own state or lifecycle methods, making it simpler and lightweight."
        },
        {
          "id": 9,
          "question": "Which method is used to render a React component into the DOM ?",
          "optA": "renderComponent",
          "optB": "mount",
          "optC": "append",
          "optD": "render",
          "answer": "render",
          "reason": "The `render` method is used to render a React component into the DOM. It is called on the ReactDOM object and takes two arguments: the component to render and the target DOM element where the component should be rendered."
        },
        {
          "id": 10,
          "question": "What is the purpose of React Fragments ?",
          "optA": "To group multiple React components together",
          "optB": "To enable server-side rendering in React applications",
          "optC": "To improve performance by reducing unnecessary re-rendering",
          "optD": "To provide a mechanism for styling React components",
          "answer": "To group multiple React components together",
          "reason": "React Fragments allow grouping multiple React components together without introducing additional DOM elements. They are useful when multiple components need to be rendered together, especially in cases where a wrapping element is not desirable."
        },
        {
          "id": 11,
          "question": "Which package is used for state management in React JS?",
          "optA": "Redux",
          "optB": "Axios",
          "optC": "React Router",
          "optD": "Lodash",
          "answer": "Redux",
          "reason": "Redux is a popular package used for state management in React JS applications. It provides a centralized state store and allows for predictable state updates using actions and reducers."
        },
        {
          "id": 12,
          "question": "What is the purpose of PropTypes in React JS ?",
          "optA": "To define the types of component props",
          "optB": "To handle HTTP requests and API calls",
          "optC": "To manage component state and lifecycle methods",
          "optD": "To create reusable UI components",
          "answer": "To define the types of component props",
          "reason": "PropTypes in React JS is a type-checking mechanism used to define the types and structure of component props. It helps catch bugs and provides documentation for component usage."
        },
        {
          "id": 13,
          "question": "What is the purpose of React Context ?",
          "optA": "To handle form validation in React applications",
          "optB": "To manage global state accessible by all components",
          "optC": "To enable client-side routing in a React application",
          "optD": "To optimize rendering performance in React components",
          "answer": "To manage global state accessible by all components",
          "reason": "React Context provides a way to share data across the component tree without passing props manually at each level. It allows for the creation of a global state that can be accessed by all components within the context."
        },
        {
          "id": 14,
          "question": "Which prop is used to pass data from a parent component to a child component in React JS?",
          "optA": "state",
          "optB": "props",
          "optC": "data",
          "optD": "value",
          "answer": "props",
          "reason": "Data can be passed from a parent component to a child component in React JS using props. Props are read-only and provide a way to pass information down the component tree."
        },
        {
          "id": 15,
          "question": "Which method is used to update the state of a component in React JS?",
          "optA": "setState",
          "optB": "updateState",
          "optC": "changeState",
          "optD": "modifyState",
          "answer": "setState",
          "reason": "The `setState` method is used to update the state of a component in React JS. It takes an object or a function as an argument and merges it with the current state, triggering a re-render of the component."
        },
        {
          "id": 16,
          "question": "What is the purpose of React.memo() in React JS ?",
          "optA": "To memoize expensive computations in React components",
          "optB": "To create higher-order components (HOCs)",
          "optC": "To handle form submissions in React applications",
          "optD": "To create reusable presentational components",
          "answer": "To memoize expensive computations in React components",
          "reason": "React.memo() is a higher-order component in React JS. It is used to memoize the result of a component's render and avoid unnecessary re-rendering. It can improve performance by optimizing component rendering."
        },
        {
          "id": 17,
          "question": "What is JSX in React JS?",
          "optA": "A JavaScript syntax extension for creating React elements",
          "optB": "A separate programming language used in React applications",
          "optC": "A library for managing asynchronous operations in React components",
          "optD": "A testing framework for React JS applications",
          "answer": "A JavaScript syntax extension for creating React elements",
          "reason": "JSX is a syntax extension in React JS that allows you to write HTML-like code in JavaScript. It enables the creation of React elements and components with a familiar HTML-like syntax."
        },

        {
          "id": 18,
          "question": "What is the purpose of the useEffect hook in React JS?",
          "optA": "To handle user input and form submissions",
          "optB": "To perform side effects in functional components",
          "optC": "To manage component state in class components",
          "optD": "To optimize rendering performance in React components",
          "answer": "To perform side effects in functional components",
          "reason": "The useEffect hook in React JS allows you to perform side effects, such as data fetching, subscriptions, or manual DOM manipulation, in functional components. It replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount."
        },
        {
          "id": 19,
          "question": "Which hook is used to perform side effects in functional components in React JS?",
          "optA": "useState",
          "optB": "useEffect",
          "optC": "useReducer",
          "optD": "useContext",
          "answer": "useEffect",
          "reason": "The `useEffect` hook in React JS is used to perform side effects in functional components. It allows you to perform operations such as data fetching, subscriptions, or manually changing the DOM after the component has rendered."
        },
        {
          "id": 20,
          "question": "What is the purpose of the useCallback hook in React JS ?",
          "optA": "To manage global state accessible by all components",
          "optB": "To create reusable component logic and manage component state",
          "optC": "To optimize rendering performance by memoizing functions",
          "optD": "To handle client-server communication in React applications",
          "answer": "To optimize rendering performance by memoizing functions",
          "reason": "The useCallback hook in React JS is used to optimize rendering performance by memoizing functions. It returns a memoized version of the callback function, preventing unnecessary re-creation of the function on each re-render."
        },
        {
          "id": 21,
          "question": "Which method is used to handle user input changes in React JS?",
          "optA": "onChange",
          "optB": "onClick",
          "optC": "onSubmit",
          "optD": "onMouseOver",
          "answer": "onChange",
          "reason": "The `onChange` method is used to handle user input changes in React JS. It is commonly used with input elements, such as text fields or checkboxes, to capture and respond to user input."
        },
        {
          "id": 22,
          "question": "What is the purpose of the useRef hook in React JS ?",
          "optA": "To handle form validation and user input",
          "optB": "To manage component state and lifecycle methods",
          "optC": "To optimize rendering performance by memoizing components",
          "optD": "To access mutable values or DOM elements in functional components",
          "answer": "To access mutable values or DOM elements in functional components",
          "reason": "The useRef hook in React JS is used to access mutable values or DOM elements in functional components. It returns a mutable ref object that persists across component re-renders and can hold any mutable value."
        },
        {
          "id": 23,
          "question": "Which operator is used to render a list of elements in React JS?",
          "optA": "for loop",
          "optB": "if statement",
          "optC": "map",
          "optD": "switch case",
          "answer": "map",
          "reason": "The `map` operator is commonly used in React JS to render a list of elements. It allows you to iterate over an array and return a new array of elements based on the provided logic."
        },
        {
          "id": 24,
          "question": "What is the purpose of the useContext hook in React JS ?",
          "optA": "To handle form validation and user input",
          "optB": "To manage global state accessible by all components",
          "optC": "To optimize rendering performance by memoizing components",
          "optD": "To enable client-side routing in a React application",
          "answer": "To manage global state accessible by all components",
          "reason": ""
        },
        {
          "id": 25,
          "question": "What is the purpose of the useState hook in React JS ?",
          "optA": "To handle asynchronous operations and API calls",
          "optB": "To manage component state in class components",
          "optC": "To optimize rendering performance in React components",
          "optD": "To create reusable component logic and manage component state",
          "answer": "To create reusable component logic and manage component state",
          "reason": "The useState hook in React JS allows functional components to have state. It returns a stateful value and a function to update it, enabling the management of component state within functional components."
        },
        {
          "id": 26,
          "question": "What is the purpose of the useMemo hook in React JS ?",
          "optA": "To handle user input and form submissions",
          "optB": "To optimize rendering performance by memoizing values",
          "optC": "To manage component state and lifecycle methods",
          "optD": "To facilitate client-side routing in a React application",
          "answer": "To optimize rendering performance by memoizing values",
          "reason": "The useMemo hook in React JS is used to memoize the result of a function and cache its return value. It helps optimize rendering performance by preventing unnecessary re-computation of values on each re-render."
        },
        {
          "id": 27,
          "question": "What is the purpose of the useReducer hook in React JS ?",
          "optA": "To manage global state accessible by all components",
          "optB": "To handle client-server communication in React applications",
          "optC": "To create reusable component logic and manage component state",
          "optD": "To optimize rendering performance by memoizing components",
          "answer": "To create reusable component logic and manage component state",
          "reason": "The useReducer hook in React JS is used to manage complex state logic within functional components. It returns a state value and a dispatch function, allowing for the creation of reusable component logic to manage state changes."
        },
        {
          "id": 28,
          "question": "What is the purpose of the componentDidCatch lifecycle method in React JS ?",
          "optA": "To handle HTTP requests and server-side routing",
          "optB": "To manage component state in class components",
          "optC": "To catch and handle errors in React component trees",
          "optD": "To optimize rendering performance in React components",
          "answer": "To catch and handle errors in React component trees",
          "reason": "The componentDidCatch lifecycle method in React JS is used to catch and handle errors that occur in any component within its component tree. It provides a way to gracefully handle errors and display fallback UI when errors occur during rendering."
        },
        {
          "id": 29,
          "question": "What is the purpose of the getDerivedStateFromProps lifecycle method in React JS ?",
          "optA": "To handle user input and form submissions",
          "optB": "To optimize rendering performance in React components",
          "optC": "To manage global state accessible by all components",
          "optD": "To update component state based on changes in props",
          "answer": "To update component state based on changes in props",
          "reason": "The getDerivedStateFromProps lifecycle method in React JS is used to update component state based on changes in props. It provides a way to synchronize component state with prop changes and is invoked before rendering when new props are received."
        },
        {
          "id": 30,
          "question": "Which lifecycle method is invoked immediately after a component is inserted into the DOM?",
          "optA": "componentDidMount",
          "optB": "componentWillUnmount",
          "optC": "componentDidUpdate",
          "optD": "componentWillUpdate",
          "answer": "componentDidMount",
          "reason": "The `componentDidMount` lifecycle method is invoked immediately after a component is inserted into the DOM. It is commonly used to perform initialization tasks, such as data fetching or setting up event listeners."
        }
      ]
    },
    {
      "id": 3,
      "title": "Python - I",
      "logo": "python.png",
      "description": "Python is a popular and versatile programming language known for its simplicity and readability. It's widely used in web development, data analysis, AI, and automation. Python is favored for its clean syntax and extensive library ecosystem. It's employed by companies like Google, Dropbox, Instagram, and NASA",
      "lastUpdated": "5th June 2023",
      "body": [
        {
          "id": 1,
          "question": "Which of the following is not a primitive data type in Python ?",
          "optA": "int",
          "optB": "str",
          "optC": "list",
          "optD": "bool",
          "answer": "list",
          "reason": "In Python, the primitive data types include int, str, and bool. However, list is not a primitive data type."
        },
        {
          "id": 2,
          "question": "Which of the following is the correct way to check if a variable is an instance of a specific class in Python ?",
          "optA": "type(variable) == ClassName",
          "optB": "isinstance(variable, ClassName)",
          "optC": "variable instanceof ClassName",
          "optD": "variable.type() == ClassName",
          "answer": "isinstance(variable, ClassName)",
          "reason": "The 'isinstance()' function in Python is used to check if a variable is an instance of a specific class. It returns 'True' if the variable is an instance of the specified class, and 'False' otherwise."
        },
        {
          "id": 3,
          "question": "Which of the following is used to declare a function in Python ?",
          "optA": "func",
          "optB": "def",
          "optC": "fun",
          "optD": "define",
          "answer": "def",
          "reason": "In Python, the 'def' keyword is used to declare a function."
        },
        {
          "id": 4,
          "question": "What is the correct way to comment multiple lines of code in Python ?",
          "optA": "// This is a comment",
          "optB": "/* This is a comment */",
          "optC": "# This is a comment",
          "optD": "// This is a comment //",
          "answer": "# This is a comment",
          "reason": "In Python, the '#' symbol is used to indicate a comment. It can be placed at the beginning of a line or after code."
        },
        {
          "id": 5,
          "question": "Which of the following operators is used for exponentiation in Python ?",
          "optA": "**",
          "optB": "^",
          "optC": "//",
          "optD": "^^",
          "answer": "**",
          "reason": "The '**' operator is used for exponentiation in Python. For example, 2 ** 3 evaluates to 8."
        },
        {
          "id": 6,
          "question": "What is the output of the following code ?\n\nx = [1, 2, 3]\nprint(x[1])",
          "optA": "1",
          "optB": "2",
          "optC": "3",
          "optD": "Error",
          "answer": "2",
          "reason": "In Python, lists are zero-indexed, so x[1] accesses the element at index 1, which is 2."
        },
        {
          "id": 7,
          "question": "Which of the following is used to check the length of a string in Python ?",
          "optA": "length()",
          "optB": "count()",
          "optC": "size()",
          "optD": "len()",
          "answer": "len()",
          "reason": "The 'len()' function is used to obtain the length of a string or any iterable object in Python."
        },
        {
          "id": 8,
          "question": "What does the 'range()' function return in Python ?",
          "optA": "A list of numbers",
          "optB": "A tuple of numbers",
          "optC": "A generator object",
          "optD": "A dictionary",
          "answer": "A generator object",
          "reason": "The 'range()' function in Python returns a generator object that generates a sequence of numbers."
        },
        {
          "id": 9,
          "question": "What is the correct way to check if a key exists in a dictionary in Python ?",
          "optA": "key in dict",
          "optB": "dict.contains(key)",
          "optC": "dict[key] != None",
          "optD": "key.exists(dict)",
          "answer": "key in dict",
          "reason": "To check if a key exists in a dictionary, you can use the 'in' operator. For example, 'key in dict' returns True if the key exists."
        },
        {
          "id": 10,
          "question": "Which of the following is not a valid way to create a set in Python ?",
          "optA": "{1, 2, 3}",
          "optB": "set([1, 2, 3])",
          "optC": "set(1, 2, 3)",
          "optD": "set()",
          "answer": "set(1, 2, 3)",
          "reason": "To create a set in Python, you can use curly braces ({}) or the 'set()' function. However, 'set(1, 2, 3)' is not a valid way to create a set."
        },

        {
          "id": 11,
          "question": "What is the output of the following code ?\n\nx = [1, 2, 3]\ny = x\ny.append(4)\nprint(x)",
          "optA": "[1, 2, 3]",
          "optB": "[1, 2, 3, 4]",
          "optC": "[4]",
          "optD": "[1, 2, 3, [4]]",
          "answer": "[1, 2, 3, 4]",
          "reason": "In Python, lists are mutable objects. When y is assigned to x, it creates a reference to the same list object. Therefore, when we modify y by appending 4, it also modifies x."
        },
        {
          "id": 12,
          "question": "Which of the following is used to iterate over a dictionary in Python ?",
          "optA": "for key in dict:",
          "optB": "for item in dict.items():",
          "optC": "for value in dict.values():",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "Python provides multiple ways to iterate over a dictionary, including iterating over keys, items (key-value pairs), and values. You can use any of the mentioned options depending on your requirements."
        },
        {
          "id": 13,
          "question": "Which of the following statements is true about Python's pass statement ?",
          "optA": "It does nothing and acts as a placeholder",
          "optB": "It raises an exception",
          "optC": "It terminates the program",
          "optD": "It removes the need for indentation",
          "answer": "It does nothing and acts as a placeholder",
          "reason": "The pass statement in Python is used as a placeholder when a statement is syntactically required but no action is needed. It does nothing and helps in avoiding syntax errors."
        },
        {
          "id": 14,
          "question": "What is the result of the expression '3' + 2 in Python ?",
          "optA": "5",
          "optB": "32",
          "optC": "Error",
          "optD": "None of the above",
          "answer": "Error",
          "reason": "The expression '3' + 2 will raise a TypeError because it's trying to concatenate a string ('3') with an integer (2). To perform this operation, the types of operands must match."
        },
        {
          "id": 15,
          "question": "What is the purpose of the 'break' statement in Python ?",
          "optA": "To exit the current loop completely",
          "optB": "To skip the current iteration and continue to the next",
          "optC": "To define the end of a function",
          "optD": "To raise an exception",
          "answer": "To exit the current loop completely",
          "reason": "The 'break' statement is used to exit the current loop immediately. When encountered, it terminates the loop execution and continues with the next statement after the loop."
        },
        {
          "id": 16,
          "question": "Which of the following is used to read input from the user in Python ?",
          "optA": "read()",
          "optB": "input()",
          "optC": "scan()",
          "optD": "get()",
          "answer": "input()",
          "reason": "The 'input()' function is used to read input from the user in Python. It allows the user to enter data from the keyboard, which can be stored in variables or used for further processing."
        },
        {
          "id": 17,
          "question": "What is the output of the following code?\n\nx = (1, 2, 3)\nx[0] = 4\nprint(x)",
          "optA": "(1, 2, 3)",
          "optB": "(4, 2, 3)",
          "optC": "[1, 2, 3]",
          "optD": "Error",
          "answer": "Error",
          "reason": "Tuples in Python are immutable, meaning their elements cannot be changed once defined. Therefore, assigning a new value to an element in a tuple will raise a TypeError."
        },
        {
          "id": 18,
          "question": "What does the 'join()' method do in Python ?",
          "optA": "Concatenates elements of a list into a single string",
          "optB": "Splits a string into a list of substrings",
          "optC": "Reverses the order of elements in a list",
          "optD": "Removes whitespace characters from the beginning and end of a string",
          "answer": "Concatenates elements of a list into a single string",
          "reason": "The 'join()' method is used to concatenate elements of a list into a single string. It takes a separator string and returns a new string by concatenating all the elements of the list separated by the specified separator."
        },
        {
          "id": 19,
          "question": "Which of the following is a correct way to open a file in Python ?",
          "optA": "open(file_path, 'w')",
          "optB": "open(file_path, 'write')",
          "optC": "open(file_path, 'r+')",
          "optD": "All of the above",
          "answer": "open(file_path, 'r+')",
          "reason": "To open a file in Python, you can use the 'open()' function. The second argument specifies the mode in which the file is opened. 'r+' is a valid mode that allows both reading and writing."
        },
        {
          "id": 20,
          "question": "What is the result of the expression 'Hello' * 3 in Python ?",
          "optA": "HelloHelloHello",
          "optB": "Hello3",
          "optC": "Error",
          "optD": "None of the above",
          "answer": "HelloHelloHello",
          "reason": "The expression 'Hello' * 3 repeats the string 'Hello' three times, resulting in 'HelloHelloHello'. The '*' operator performs string repetition in Python."
        },
        {
          "id": 21,
          "question": "What is the output of the following code ?\n\nx = 5\ny = 2\nprint(x / y)",
          "optA": "2.5",
          "optB": "2",
          "optC": "2.0",
          "optD": "Error",
          "answer": "2.5",
          "reason": "In Python, division of two integers returns a float value. Therefore, the output of 5 / 2 is 2.5."
        },
        {
          "id": 22,
          "question": "What does the 'os' module provide in Python ?",
          "optA": "File input/output operations",
          "optB": "Operating system-related functionality",
          "optC": "String manipulation functions",
          "optD": "Mathematical operations",
          "answer": "Operating system-related functionality",
          "reason": "The 'os' module in Python provides a way to use operating system-dependent functionality. It includes functions for interacting with the file system, managing processes, and more."
        },
        {
          "id": 23,
          "question": "Which of the following is not a standard Python library ?",
          "optA": "math",
          "optB": "numpy",
          "optC": "random",
          "optD": "stringutil",
          "answer": "stringutil",
          "reason": "The 'stringutil' library is not a standard Python library. However, the 'math', 'numpy', and 'random' libraries are part of the standard library and provide various functionalities."
        },
        {
          "id": 24,
          "question": "What is the purpose of the 'super()' function in Python ?",
          "optA": "To invoke the parent class's methods",
          "optB": "To create a new instance of a class",
          "optC": "To define a subclass",
          "optD": "To access private variables",
          "answer": "To invoke the parent class's methods",
          "reason": "The 'super()' function is used to invoke the methods of a parent class from a subclass. It allows the subclass to extend or override the behavior of the parent class while still retaining its functionality."
        },
        {
          "id": 25,
          "question": "Which of the following is a correct way to handle exceptions in Python ?",
          "optA": "try/finally",
          "optB": "try/else",
          "optC": "try/except",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "Python provides multiple ways to handle exceptions. The 'try/except' block is used to catch and handle exceptions, the 'try/finally' block ensures that certain actions are always performed, and the 'try/else' block is executed if no exception occurs."
        },
        {
          "id": 26,
          "question": "What is the output of the following code?\n\nx = [1, 2, 3]\nprint(x[10:])",
          "optA": "[1, 2, 3]",
          "optB": "[]",
          "optC": "Error",
          "optD": "None",
          "answer": "[]",
          "reason": "When accessing a list with an index that is out of range, Python doesn't raise an error but returns an empty list ([]). Therefore, x[10:] will result in an empty list."
        },
        {
          "id": 27,
          "question": "What is the purpose of the 'lambda' keyword in Python ?",
          "optA": "To define anonymous functions",
          "optB": "To import modules",
          "optC": "To perform type casting",
          "optD": "To raise an exception",
          "answer": "To define anonymous functions",
          "reason": "The 'lambda' keyword in Python is used to create anonymous functions, also known as lambda functions. These functions are defined without a name and are typically used when a small function is required for a short period."
        },
        {
          "id": 28,
          "question": "What is the result of the expression 'Hello, {}!'.format('John') in Python ?",
          "optA": "'Hello, {}!'",
          "optB": "'Hello, {John}!'",
          "optC": "'Hello, John!'",
          "optD": "'Hello, {John}!'",
          "answer": "'Hello, John!'",
          "reason": "The 'format()' method is used to format strings in Python. When the '{}' placeholder is used, it can be replaced by the corresponding argument passed to the 'format()' method. Therefore, 'Hello, {}!'.format('John') results in 'Hello, John!'"
        },
        {
          "id": 29,
          "question": "Which of the following is true about Python's global variables ?",
          "optA": "They can be accessed from any function or module",
          "optB": "They can only be accessed within the module they are defined",
          "optC": "They can only be accessed within the function they are defined",
          "optD": "They can only be accessed within a class",
          "answer": "They can be accessed from any function or module",
          "reason": "Global variables in Python can be accessed from any part of the program, including functions or modules. However, it is considered a good practice to limit their usage and prefer passing variables as arguments."
        },
        {
          "id": 30,
          "question": "What is the result of the expression '10 // 3' in Python?",
          "optA": "3.3333",
          "optB": "3.0",
          "optC": "3",
          "optD": "Error",
          "answer": "3",
          "reason": "The '//' operator in Python performs floor division, which returns the quotient as an integer. Therefore, 10 // 3 evaluates to 3."
        }
      ]
    },
    {
      "id": 4,
      "title": "Python - II",
      "logo": "python.png",
      "description": "Python is a popular and versatile programming language known for its simplicity and readability. It's widely used in web development, data analysis, AI, and automation. Python is favored for its clean syntax and extensive library ecosystem. It's employed by companies like Google, Dropbox, Instagram, and NASA",
      "lastUpdated": "6th June 2023",
      "body": [
        {
          "id": 1,
          "question": "Which of the following is a valid way to comment out multiple lines of code in Python?",
          "optA": "/* */",
          "optB": "#",
          "optC": "//",
          "optD": "''' '''",
          "answer": "''' '''",
          "reason": "In Python, the triple quotes (''' ''') can be used to comment out multiple lines of code. Anything written within the triple quotes is considered a comment and will not be executed."
        },
        {
          "id": 2,
          "question": "What is the purpose of the 'pass' statement in Python ?",
          "optA": "To define an empty function",
          "optB": "To skip a loop iteration",
          "optC": "To raise an exception",
          "optD": "To import modules",
          "answer": "To define an empty function",
          "reason": "The 'pass' statement in Python is used as a placeholder when a statement is syntactically required but doesn't need to perform any action. It is commonly used to define empty functions or classes."
        },
        {
          "id": 3,
          "question": "What is the output of the following code ?\n\nprint(2 ** 3 ** 2)",
          "optA": "512",
          "optB": "64",
          "optC": "576",
          "optD": "72",
          "answer": "512",
          "reason": "In Python, exponentiation has right-to-left associativity. Therefore, 2 ** 3 ** 2 is equivalent to 2 ** (3 ** 2) => 2 ** 9 = 512."
        },
        {
          "id": 4,
          "question": "What does the 'yield' keyword do in Python ?",
          "optA": "It defines a generator function",
          "optB": "It returns a value from a function",
          "optC": "It stops the execution of a function temporarily",
          "optD": "It raises an exception",
          "answer": "It defines a generator function",
          "reason": "The 'yield' keyword in Python is used to define a generator function. It allows the function to return a generator object that can be iterated over using a 'for' loop or other iteration constructs."
        },
        {
          "id": 5,
          "question": "Which module in Python is commonly used for working with date and time ?",
          "optA": "datetime",
          "optB": "time",
          "optC": "calendar",
          "optD": "sys",
          "answer": "datetime",
          "reason": "The 'datetime' module in Python provides classes and functions for working with dates and times. It includes features for creating, manipulating, and formatting dates and times."
        },
        {
          "id": 6,
          "question": "What is the purpose of the 'else' clause in a 'try/except' block ?",
          "optA": "To handle exceptions",
          "optB": "To specify the code that should be executed if an exception occurs",
          "optC": "To specify the code that should be executed if no exception occurs",
          "optD": "To raise an exception",
          "answer": "To specify the code that should be executed if no exception occurs",
          "reason": "In a 'try/except' block, the 'else' clause is optional. It is used to specify the code that should be executed if no exception occurs within the 'try' block. If an exception is raised, the code in the 'else' block is skipped."
        },
        {
          "id": 7,
          "question": "Which of the following is true about Python decorators ?",
          "optA": "Decorators are used to add functionality to a function or class",
          "optB": "Decorators are used to modify the behavior of built-in Python functions",
          "optC": "Decorators are used to hide sensitive information",
          "optD": "Decorators are used to create aliases for functions or classes",
          "answer": "Decorators are used to add functionality to a function or class",
          "reason": "Python decorators are used to add or modify the behavior of functions or classes. They allow additional functionality to be applied to a target function or class without modifying its source code."
        },
        {
          "id": 8,
          "question": "What is the purpose of the 'global' keyword in Python ?",
          "optA": "To declare a variable with global scope",
          "optB": "To import modules",
          "optC": "To define a class",
          "optD": "To skip a loop iteration",
          "answer": "To declare a variable with global scope",
          "reason": "The 'global' keyword in Python is used to declare a variable inside a function with global scope. It allows the variable to be accessed and modified from both inside and outside the function."
        },
        {
          "id": 9,
          "question": "What is the output of the following code?\n\nprint(isinstance(1, (int, float)))",
          "optA": "True",
          "optB": "False",
          "optC": "Error",
          "optD": "None",
          "answer": "True",
          "reason": "The 'isinstance()' function in Python is used to check if an object is an instance of a class or a subclass thereof. In this case, 1 is an instance of the 'int' class, which is one of the given options, so the output is 'True'."
        },
        {
          "id": 10,
          "question": "What is the output of the following code?\n\ndef foo(x=[]):\n    x.append(1)\n    return x\n\nprint(foo())\nprint(foo())",
          "optA": "[1]\n[1, 1]",
          "optB": "[1]\n[2]",
          "optC": "[1, 1]\n[2]",
          "optD": "[2]\n[2]",
          "answer": "[1]\n[1, 1]",
          "reason": "The function 'foo' has a default argument 'x' that refers to a mutable object (list []). When the function is called without providing an argument, the default list is used. However, the default list is shared across multiple function calls. As a result, the append operation modifies the default list, leading to unexpected behavior. The output will be [1] and [1, 1] as the list grows with each function call."
        },
        {
          "id": 11,
          "question": "What is the purpose of the 'functools' module in Python?",
          "optA": "To perform mathematical operations",
          "optB": "To manipulate strings",
          "optC": "To handle exceptions",
          "optD": "To work with higher-order functions",
          "answer": "To work with higher-order functions",
          "reason": "The 'functools' module in Python provides tools for working with higher-order functions, which are functions that take one or more functions as arguments or return functions as results. It includes functions like 'partial', 'reduce', 'wraps', and 'lru_cache' that are useful for functional programming and improving the functionality of existing functions."
        },
        {
          "id": 12,
          "question": "What is the purpose of the '__init__' method in Python classes ?",
          "optA": "To initialize the object's state",
          "optB": "To define the class's attributes",
          "optC": "To define the class's methods",
          "optD": "To inherit from a parent class",
          "answer": "To initialize the object's state",
          "reason": "The '__init__' method is a special method in Python classes and is automatically called when a new object is created. It is used to initialize the object's state and perform any necessary setup operations."
        },
        {
          "id": 13,
          "question": "Which of the following statements about Python descriptors is true?",
          "optA": "Descriptors are used to define class attributes",
          "optB": "Descriptors provide a way to override attribute access behavior",
          "optC": "Descriptors can only be defined for built-in data types",
          "optD": "Descriptors are created using the 'super' keyword",
          "answer": "Descriptors provide a way to override attribute access behavior",
          "reason": "Python descriptors are a powerful mechanism that provides a way to override the default attribute access behavior of an object. They allow you to define how attribute access, such as getting, setting, or deleting, is handled. Descriptors can be used to implement computed properties, enforce constraints, or add additional behavior to attribute access."
        },
        {
          "id": 14,
          "question": "What is the output of the following code ?\n\nx = 10\ny = 5\nz = x if x > y else y\nprint(z)",
          "optA": "10",
          "optB": "5",
          "optC": "15",
          "optD": "Error",
          "answer": "10",
          "reason": "The code uses a conditional expression (also known as a ternary operator) to assign the larger value between 'x' and 'y' to 'z'. In this case, 'x' is greater than 'y', so 'z' is assigned the value of 'x', which is 10."
        },
        {
          "id": 15,
          "question": "Which of the following statements about Python generators is not true ?",
          "optA": "Generators are functions that return an iterator",
          "optB": "Generators use the 'yield' keyword",
          "optC": "Generators can only be iterated once",
          "optD": "Generators consume less memory compared to lists",
          "answer": "Generators can only be iterated once",
          "reason": "Generators in Python are functions that use the 'yield' keyword to return values one at a time, creating an iterator. Unlike lists, generators do not store all the values in memory at once, resulting in lower memory consumption. However, generators can be iterated multiple times."
        },
        {
          "id": 16,
          "question": "What is the purpose of the 'with' statement in Python ?",
          "optA": "To define a context manager",
          "optB": "To import modules",
          "optC": "To raise an exception",
          "optD": "To skip a loop iteration",
          "answer": "To define a context manager",
          "reason": "The 'with' statement in Python is used to define a context manager. It ensures that a block of code is executed within a specific context, and any necessary setup or cleanup actions are performed automatically, even in the presence of exceptions."
        },
        {
          "id": 17,
          "question": "What is the purpose of the '__name__' variable in Python ?",
          "optA": "To store the name of the module",
          "optB": "To store the name of the class",
          "optC": "To store the name of the function",
          "optD": "To store the name of the current script",
          "answer": "To store the name of the current script",
          "reason": "The '__name__' variable in Python is a special variable that stores the name of the current script or module. It is typically used to determine whether a module is being run as a standalone script or imported as a module."
        },
        {
          "id": 18,
          "question": "What is the output of the following code ?\n\nx = [1, 2, 3]\ny = x\nx = x + [4]\nprint(y)",
          "optA": "[1, 2, 3]",
          "optB": "[1, 2, 3, 4]",
          "optC": "[4, 3, 2, 1]",
          "optD": "Error",
          "answer": "[1, 2, 3]",
          "reason": "In this code, a new list is created by concatenating 'x' with another list [4]. The assignment 'x = x + [4]' creates a new list object and reassigns 'x' to it. However, 'y' still refers to the original list [1, 2, 3], so the output will be [1, 2, 3]."
        },
        {
          "id": 19,
          "question": "Which of the following statements about Python closures is true ?",
          "optA": "Closures can access variables defined in their own scope",
          "optB": "Closures can only access global variables",
          "optC": "Closures cannot access variables from outer scopes",
          "optD": "Closures can only be defined within classes",
          "answer": "Closures can access variables defined in their own scope",
          "reason": "In Python, closures are functions that remember and access variables from their own enclosing scope, even when they are invoked outside that scope. This allows closures to maintain state and have persistent access to variables defined in their own scope."
        },
        {
          "id": 20,
          "question": "Which of the following is true about Python context managers ?",
          "optA": "Context managers are used to manage system resources",
          "optB": "Context managers are defined using the 'with' statement",
          "optC": "Context managers must implement the '__enter__' and '__exit__' methods",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "Python context managers are used to properly manage system resources, such as files or network connections, ensuring they are properly acquired and released. They are defined using the 'with' statement and must implement the '__enter__' and '__exit__' methods."
        },
        {
          "id": 21,
          "question": "What is the output of the following code ?\n\nx = 5\nprint(f'{x+5}')",
          "optA": "5",
          "optB": "10",
          "optC": "x+5",
          "optD": "Error",
          "answer": "10",
          "reason": "The code uses an f-string (formatted string literal) to print the value of 'x+5'. The expression inside the curly braces is evaluated, so the output will be '10'."
        },
        {
          "id": 22,
          "question": "What is the purpose of the 'yield from' statement in Python generators ?",
          "optA": "To yield values from another generator",
          "optB": "To terminate the generator",
          "optC": "To skip a loop iteration",
          "optD": "To raise an exception",
          "answer": "To yield values from another generator",
          "reason": "The 'yield from' statement in Python generators is used to delegate the iteration to another generator. It allows a generator to yield values from another generator, simplifying the process of composing generators and reducing code duplication."
        },
        {
          "id": 23,
          "question": "What does the 'asyncio' module in Python provide ?",
          "optA": "Support for asynchronous programming",
          "optB": "Support for multi-threading",
          "optC": "Support for file I/O operations",
          "optD": "Support for regular expressions",
          "answer": "Support for asynchronous programming",
          "reason": "The 'asyncio' module in Python provides support for asynchronous programming, allowing you to write concurrent code that can efficiently handle I/O-bound and CPU-bound tasks without using threads or blocking the execution."
        },
        {
          "id": 24,
          "question": "Which of the following is true about Python metaclasses ?",
          "optA": "Metaclasses define the behavior of classes",
          "optB": "Metaclasses can be inherited",
          "optC": "Metaclasses are instances of the 'type' class",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "Metaclasses in Python are used to define the behavior of classes. They can be inherited, allowing the creation of class hierarchies. Additionally, metaclasses themselves are instances of the 'type' class."
        },
        {
          "id": 25,
          "question": "What is the purpose of the 'mro()' method in Python ?",
          "optA": "To return the method resolution order of a class",
          "optB": "To check if a class is a subclass of another class",
          "optC": "To return the attributes and methods of an object",
          "optD": "To access the documentation string of a class",
          "answer": "To return the method resolution order of a class",
          "reason": "The 'mro()' method in Python is used to return the method resolution order of a class. Method resolution order determines the order in which methods are resolved and called in the presence of multiple inheritance."
        },
        {
          "id": 26,
          "question": "What is the output of the following code?\n\nx = [1, 2, 3]\nfor i in x:\n    x.append(i)\n    print(i, end=' ')",
          "optA": "1 2 3",
          "optB": "1 2 3 1 2 3",
          "optC": "1 2 3 3 2 1",
          "optD": "Error",
          "answer": "1 2 3",
          "reason": "When iterating over a list, it is not recommended to modify the list itself. In this code, new elements are appended to the list 'x' while it is being iterated. As a result, the loop becomes infinite and does not terminate. However, the initial three elements [1, 2, 3] will be printed before the loop becomes infinite."
        },
        {
          "id": 27,
          "question": "Which of the following is not a built-in exception in Python ?",
          "optA": "ZeroDivisionError",
          "optB": "NameError",
          "optC": "ValueError",
          "optD": "NullPointerException",
          "answer": "NullPointerException",
          "reason": "In Python, 'NullPointerException' is not a built-in exception. However, exceptions like 'ZeroDivisionError', 'NameError', and 'ValueError' are commonly used and provided by the Python language."
        },
        {
          "id": 28,
          "question": "What is the purpose of the 'sys' module in Python ?",
          "optA": "To interact with the operating system",
          "optB": "To perform regular expression operations",
          "optC": "To handle exceptions",
          "optD": "To manage system resources",
          "answer": "To interact with the operating system",
          "reason": "The 'sys' module in Python provides access to various system-specific parameters and functions. It allows interaction with the operating system, including tasks like accessing command-line arguments, exiting the program, and interacting with the standard input and output streams."
        },
        {
          "id": 29,
          "question": "Which of the following is not a valid method descriptor in Python ?",
          "optA": "Static method",
          "optB": "Class method",
          "optC": "Instance method",
          "optD": "Object method",
          "answer": "Object method",
          "reason": "In Python, there is no specific descriptor called 'Object method'. However, static methods, class methods, and instance methods are all valid method descriptors used to define different types of methods in classes."
        },
        {
          "id": 30,
          "question": "What is the purpose of the 'logging' module in Python ?",
          "optA": "To record events and errors during program execution",
          "optB": "To perform mathematical operations",
          "optC": "To manipulate strings",
          "optD": "To handle network communication",
          "answer": "To record events and errors during program execution",
          "reason": "The 'logging' module in Python provides a flexible framework for recording events and errors during program execution. It allows developers to log messages of varying severity levels, which can be useful for debugging, monitoring, and analyzing the behavior of a program."
        }
      ]
    },
    {
      "id": 5,
      "title": "CSS - I",
      "logo": "css.png",
      "description": "CSS is a vital technology for web styling. It controls the appearance and layout of HTML elements. Widely used in web development, CSS enables visually appealing designs and responsive layouts, with options for colors, fonts, spacing, and animations.",
      "lastUpdated": "6th June 2023",
      "body": [
        {
          "id": 1,
          "question": "Which CSS property is used to set the color of text ?",
          "optA": "color",
          "optB": "text-color",
          "optC": "font-color",
          "optD": "text-style",
          "answer": "color",
          "reason": "The 'color' property is used to set the color of text in CSS."
        },
        {
          "id": 2,
          "question": "Which CSS property is used to set the font size of an element ?",
          "optA": "font-size",
          "optB": "text-size",
          "optC": "size",
          "optD": "font-style",
          "answer": "font-size",
          "reason": "The 'font-size' property is used to set the font size of an element in CSS."
        },
        {
          "id": 3,
          "question": "Which CSS property is used to set the background color of an element ?",
          "optA": "background-color",
          "optB": "color",
          "optC": "background",
          "optD": "background-style",
          "answer": "background-color",
          "reason": "The 'background-color' property is used to set the background color of an element in CSS."
        },
        {
          "id": 4,
          "question": "Which CSS property is used to set the font family of an element ?",
          "optA": "font-family",
          "optB": "font-style",
          "optC": "text-family",
          "optD": "text-font",
          "answer": "font-family",
          "reason": "The 'font-family' property is used to set the font family of an element in CSS."
        },
        {
          "id": 5,
          "question": "Which CSS property is used to set the text alignment of an element ?",
          "optA": "text-align",
          "optB": "text-style",
          "optC": "text-decoration",
          "optD": "text-color",
          "answer": "text-align",
          "reason": "The 'text-align' property is used to set the text alignment of an element in CSS."
        },
        {
          "id": 6,
          "question": "Which CSS property is used to set the margin around an element ?",
          "optA": "margin",
          "optB": "padding",
          "optC": "border",
          "optD": "outline",
          "answer": "margin",
          "reason": "The 'margin' property is used to set the margin around an element in CSS."
        },
        {
          "id": 7,
          "question": "Which CSS property is used to set the padding inside an element ?",
          "optA": "padding",
          "optB": "margin",
          "optC": "border",
          "optD": "outline",
          "answer": "padding",
          "reason": "The 'padding' property is used to set the padding inside an element in CSS."
        },
        {
          "id": 8,
          "question": "Which CSS property is used to set the width of an element ?",
          "optA": "width",
          "optB": "height",
          "optC": "size",
          "optD": "length",
          "answer": "width",
          "reason": "The 'width' property is used to set the width of an element in CSS."
        },
        {
          "id": 9,
          "question": "Which CSS property is used to set the height of an element ?",
          "optA": "height",
          "optB": "width",
          "optC": "size",
          "optD": "length",
          "answer": "height",
          "reason": "The 'height' property is used to set the height of an element in CSS."
        },
        {
          "id": 10,
          "question": "Which CSS property is used to set the border of an element ?",
          "optA": "border",
          "optB": "outline",
          "optC": "margin",
          "optD": "padding",
          "answer": "border",
          "reason": "The 'border' property is used to set the border of an element in CSS."
        },
        {
          "id": 11,
          "question": "Which CSS property is used to create rounded corners for an element ?",
          "optA": "border-radius",
          "optB": "border-style",
          "optC": "border-width",
          "optD": "border-color",
          "answer": "border-radius",
          "reason": "The 'border-radius' property is used to create rounded corners for an element in CSS."
        },
        {
          "id": 12,
          "question": "Which CSS property is used to set the position of an element ?",
          "optA": "position",
          "optB": "top",
          "optC": "left",
          "optD": "bottom",
          "answer": "position",
          "reason": "The 'position' property is used to set the position of an element in CSS."
        },
        {
          "id": 13,
          "question": "Which CSS property is used to set the display behavior of an element ?",
          "optA": "display",
          "optB": "position",
          "optC": "visibility",
          "optD": "float",
          "answer": "display",
          "reason": "The 'display' property is used to set the display behavior of an element in CSS, such as block, inline, inline-block, etc."
        },
        {
          "id": 14,
          "question": "Which CSS property is used to control the order of floating elements ?",
          "optA": "float",
          "optB": "clear",
          "optC": "order",
          "optD": "position",
          "answer": "float",
          "reason": "The 'float' property is used to control the order of floating elements in CSS."
        },
        {
          "id": 15,
          "question": "Which CSS property is used to control the line height of text ?",
          "optA": "line-height",
          "optB": "text-height",
          "optC": "font-height",
          "optD": "text-line",
          "answer": "line-height",
          "reason": "The 'line-height' property is used to control the line height of text in CSS."
        },
        {
          "id": 16,
          "question": "Which CSS property is used to create an animation in an element ?",
          "optA": "animation",
          "optB": "transition",
          "optC": "transform",
          "optD": "keyframes",
          "answer": "animation",
          "reason": "The 'animation' property is used to create an animation in an element in CSS. It allows you to specify the keyframes and duration of the animation."
        },
        {
          "id": 17,
          "question": "Which CSS property is used to apply a gradient background ?",
          "optA": "background-image",
          "optB": "background-color",
          "optC": "background-gradient",
          "optD": "background",
          "answer": "background-image",
          "reason": "The 'background-image' property is used to apply a gradient background in CSS."
        },
        {
          "id": 18,
          "question": "Which CSS property is used to control the visibility of an element ?",
          "optA": "visibility",
          "optB": "display",
          "optC": "opacity",
          "optD": "hidden",
          "answer": "visibility",
          "reason": "The 'visibility' property is used to control the visibility of an element in CSS."
        },
        {
          "id": 19,
          "question": "Which CSS property is used to create a box shadow effect ?",
          "optA": "box-shadow",
          "optB": "text-shadow",
          "optC": "shadow",
          "optD": "drop-shadow",
          "answer": "box-shadow",
          "reason": "The 'box-shadow' property is used to create a box shadow effect in CSS."
        },
        {
          "id": 20,
          "question": "Which CSS property is used to control the spacing between lines of text ?",
          "optA": "line-spacing",
          "optB": "text-spacing",
          "optC": "letter-spacing",
          "optD": "word-spacing",
          "answer": "line-spacing",
          "reason": "The 'line-spacing' property is not a valid CSS property. The correct property to control the spacing between lines of text is 'line-height'."
        },
        {
          "id": 21,
          "question": "Which CSS property is used to set the font weight of text ?",
          "optA": "font-weight",
          "optB": "text-weight",
          "optC": "weight",
          "optD": "font-style",
          "answer": "font-weight",
          "reason": "The 'font-weight' property is used to set the font weight of text in CSS."
        },
        {
          "id": 22,
          "question": "Which CSS property is used to control the visibility of overflowing content ?",
          "optA": "overflow",
          "optB": "overflow-x",
          "optC": "overflow-y",
          "optD": "overflow-wrap",
          "answer": "overflow",
          "reason": "The 'overflow' property is used to control the visibility of overflowing content in CSS."
        },
        {
          "id": 23,
          "question": "Which CSS property is used to control the order of flex items ?",
          "optA": "order",
          "optB": "flex-direction",
          "optC": "flex-wrap",
          "optD": "flex-flow",
          "answer": "order",
          "reason": "The 'order' property is used to control the order of flex items in CSS."
        },
        {
          "id": 24,
          "question": "Which CSS property is used to create a gradient background ?",
          "optA": "background-image",
          "optB": "background-color",
          "optC": "background-gradient",
          "optD": "background",
          "answer": "background",
          "reason": "The 'background' property is used to create a gradient background in CSS using the 'linear-gradient()' function."
        },
        {
          "id": 25,
          "question": "Which CSS property is used to rotate an element ?",
          "optA": "transform",
          "optB": "rotate",
          "optC": "rotation",
          "optD": "transform-rotate",
          "answer": "transform",
          "reason": "The 'transform' property is used to apply various transformations to an element in CSS, including rotation."
        },
        {
          "id": 26,
          "question": "Which CSS property is used to create a drop shadow effect ?",
          "optA": "box-shadow",
          "optB": "text-shadow",
          "optC": "shadow",
          "optD": "drop-shadow",
          "answer": "box-shadow",
          "reason": "The 'box-shadow' property is used to create a drop shadow effect in CSS."
        },
        {
          "id": 27,
          "question": "Which CSS property is used to set the space between individual letters ?",
          "optA": "letter-spacing",
          "optB": "word-spacing",
          "optC": "line-spacing",
          "optD": "text-spacing",
          "answer": "letter-spacing",
          "reason": "The 'letter-spacing' property is used to set the space between individual letters in CSS."
        },
        {
          "id": 28,
          "question": "Which CSS property is used to control the wrapping behavior of text ?",
          "optA": "white-space",
          "optB": "text-wrap",
          "optC": "word-wrap",
          "optD": "text-overflow",
          "answer": "white-space",
          "reason": "The 'white-space' property is used to control the wrapping behavior of text in CSS."
        },
        {
          "id": 29,
          "question": "Which CSS property is used to set the order of columns in a multi-column layout ?",
          "optA": "column-count",
          "optB": "column-gap",
          "optC": "column-rule",
          "optD": "column-rule-color",
          "answer": "column-count",
          "reason": "The 'column-count' property is used to set the order of columns in a multi-column layout in CSS."
        },
        {
          "id": 30,
          "question": "Which CSS property is used to create a transition effect ?",
          "optA": "transition",
          "optB": "animation",
          "optC": "transform",
          "optD": "transition-effect",
          "answer": "transition",
          "reason": "The 'transition' property is used to create a transition effect in CSS. It allows you to specify the property, duration, timing function, and delay of the transition."
        }
      ]
    },
    {
      "id": 6,
      "title": "CSS - II",
      "logo": "css.png",
      "description": "CSS is a vital technology for web styling. It controls the appearance and layout of HTML elements. Widely used in web development, CSS enables visually appealing designs and responsive layouts, with options for colors, fonts, spacing, and animations.",
      "lastUpdated": "7th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What CSS property is used to create a 3D effect by adding depth to an element ?",
          "optA": "perspective",
          "optB": "transform",
          "optC": "backface-visibility",
          "optD": "transform-style",
          "answer": "perspective",
          "reason": "The 'perspective' property is used to create a 3D effect by adding depth to an element in CSS."
        },
        {
          "id": 2,
          "question": "In CSS, how do you specify the order of displaying stacked elements ?",
          "optA": "z-index",
          "optB": "position",
          "optC": "display",
          "optD": "order",
          "answer": "order",
          "reason": "The 'order' property is used to specify the order of displaying stacked elements in CSS Flexbox and CSS Grid layouts."
        },
        {
          "id": 3,
          "question": "Which CSS property is used to create a background image that scrolls slower than the page content ?",
          "optA": "background-image",
          "optB": "background-attachment",
          "optC": "background-size",
          "optD": "background-position",
          "answer": "background-attachment",
          "reason": "The 'background-attachment' property is used to create a background image that scrolls slower than the page content in CSS."
        },
        {
          "id": 4,
          "question": "Which CSS property is used to specify the space between characters in a text ?",
          "optA": "letter-spacing",
          "optB": "word-spacing",
          "optC": "text-spacing",
          "optD": "character-spacing",
          "answer": "letter-spacing",
          "reason": "The 'letter-spacing' property is used to specify the space between characters in a text in CSS."
        },
        {
          "id": 5,
          "question": "Which CSS property is used to create a flexible box layout ?",
          "optA": "flex-direction",
          "optB": "flex-wrap",
          "optC": "flex-flow",
          "optD": "display",
          "answer": "display",
          "reason": "The 'display' property is used to create a flexible box layout using CSS Flexbox."
        },
        {
          "id": 6,
          "question": "Which CSS property is used to animate an element's opacity ?",
          "optA": "opacity",
          "optB": "visibility",
          "optC": "display",
          "optD": "transform",
          "answer": "opacity",
          "reason": "The 'opacity' property is used to animate an element's opacity in CSS."
        },
        {
          "id": 7,
          "question": "Which CSS property is used to create a sticky positioning for an element ?",
          "optA": "position",
          "optB": "top",
          "optC": "left",
          "optD": "sticky",
          "answer": "position",
          "reason": "The 'position' property is used to create a sticky positioning for an element in CSS using the value 'sticky'."
        },
        {
          "id": 8,
          "question": "Which CSS property is used to set the shape of a CSS Grid item ?",
          "optA": "grid-template-columns",
          "optB": "grid-template-rows",
          "optC": "grid-template-areas",
          "optD": "grid-column",
          "answer": "grid-column",
          "reason": "The 'grid-column' property is used to set the shape of a CSS Grid item by defining the start and end positions of the item within the grid."
        },
        {
          "id": 9,
          "question": "Which CSS property is used to create a smooth scrolling effect ?",
          "optA": "scroll-behavior",
          "optB": "overflow",
          "optC": "scroll-snap-type",
          "optD": "smooth-scrolling",
          "answer": "scroll-behavior",
          "reason": "The 'scroll-behavior' property is used to create a smooth scrolling effect in CSS."
        },
        {
          "id": 10,
          "question": "Which CSS property is used to create a repeating pattern from an image ?",
          "optA": "background-repeat",
          "optB": "background-clip",
          "optC": "background-size",
          "optD": "background-origin",
          "answer": "background-repeat",
          "reason": "The 'background-repeat' property is used to create a repeating pattern from an image in CSS."
        },
        {
          "id": 11,
          "question": "Which CSS property is used to create a circular shape for an element ?",
          "optA": "border-radius",
          "optB": "border-style",
          "optC": "border-width",
          "optD": "border-shape",
          "answer": "border-radius",
          "reason": "The 'border-radius' property is used to create a circular shape for an element in CSS."
        },
        {
          "id": 12,
          "question": "Which CSS property is used to create a responsive layout for mobile devices ?",
          "optA": "media-queries",
          "optB": "responsive-layout",
          "optC": "viewport",
          "optD": "device-width",
          "answer": "media-queries",
          "reason": "Media queries are used to create a responsive layout for mobile devices in CSS."
        },
        {
          "id": 13,
          "question": "Which CSS property is used to create an underline below text ?",
          "optA": "text-decoration",
          "optB": "text-underline",
          "optC": "text-underline-style",
          "optD": "text-decoration-line",
          "answer": "text-decoration",
          "reason": "The 'text-decoration' property is used to create an underline below text in CSS."
        },
        {
          "id": 14,
          "question": "Which CSS property is used to create a slide-in animation for an element ?",
          "optA": "animation",
          "optB": "transition",
          "optC": "transform",
          "optD": "keyframes",
          "answer": "animation",
          "reason": "The 'animation' property is used to create a slide-in animation for an element in CSS."
        },
        {
          "id": 15,
          "question": "Which CSS property is used to create a fixed positioning for an element ?",
          "optA": "position",
          "optB": "top",
          "optC": "left",
          "optD": "fixed",
          "answer": "position",
          "reason": "The 'position' property is used to create a fixed positioning for an element in CSS using the value 'fixed'."
        },
        {
          "id": 16,
          "question": "Which CSS property is used to create a responsive font size based on the viewport size ?",
          "optA": "font-size",
          "optB": "em",
          "optC": "rem",
          "optD": "vw",
          "answer": "rem",
          "reason": "The 'rem' (root em) unit is used to create a responsive font size based on the root element's font size in CSS."
        },
        {
          "id": 17,
          "question": "Which CSS property is used to create a fixed ratio between the width and height of an element ?",
          "optA": "aspect-ratio",
          "optB": "width",
          "optC": "height",
          "optD": "padding",
          "answer": "aspect-ratio",
          "reason": "The 'aspect-ratio' property is used to create a fixed ratio between the width and height of an element in CSS."
        },
        {
          "id": 18,
          "question": "Which CSS property is used to create a gradient background ?",
          "optA": "background-color",
          "optB": "background-image",
          "optC": "background-gradient",
          "optD": "background-linear-gradient",
          "answer": "background-image",
          "reason": "The 'background-image' property is used to create a gradient background in CSS using the 'linear-gradient' function."
        },
        {
          "id": 19,
          "question": "Which CSS property is used to create a smooth scrolling effect with snap points ?",
          "optA": "scroll-snap-type",
          "optB": "overflow",
          "optC": "scroll-behavior",
          "optD": "scroll-snap-points",
          "answer": "scroll-snap-type",
          "reason": "The 'scroll-snap-type' property is used to create a smooth scrolling effect with snap points in CSS."
        },
        {
          "id": 20,
          "question": "Which CSS property is used to create a responsive layout for print media ?",
          "optA": "media-queries",
          "optB": "print-layout",
          "optC": "print-styles",
          "optD": "print-media",
          "answer": "media-queries",
          "reason": "Media queries are used to create a responsive layout for print media in CSS."
        },
        {
          "id": 21,
          "question": "Which CSS property is used to create a sticky header that remains fixed at the top of the page ?",
          "optA": "position",
          "optB": "top",
          "optC": "left",
          "optD": "sticky",
          "answer": "position",
          "reason": "The 'position' property is used to create a sticky header that remains fixed at the top of the page in CSS using the value 'sticky'."
        },
        {
          "id": 22,
          "question": "Which CSS property is used to create a text shadow effect ?",
          "optA": "text-shadow",
          "optB": "box-shadow",
          "optC": "shadow",
          "optD": "text-effect",
          "answer": "text-shadow",
          "reason": "The 'text-shadow' property is used to create a text shadow effect in CSS."
        },
        {
          "id": 23,
          "question": "Which CSS property is used to create a responsive layout with a fixed aspect ratio ?",
          "optA": "aspect-ratio",
          "optB": "width",
          "optC": "height",
          "optD": "padding",
          "answer": "aspect-ratio",
          "reason": "The 'aspect-ratio' property is used to create a responsive layout with a fixed aspect ratio in CSS."
        },
        {
          "id": 24,
          "question": "Which CSS property is used to create a stacking order for overlapping elements ?",
          "optA": "z-index",
          "optB": "position",
          "optC": "display",
          "optD": "order",
          "answer": "z-index",
          "reason": "The 'z-index' property is used to create a stacking order for overlapping elements in CSS."
        },
        {
          "id": 25,
          "question": "Which CSS property is used to create a grid layout with flexible column sizes ?",
          "optA": "grid-template-columns",
          "optB": "grid-template-rows",
          "optC": "grid-template-areas",
          "optD": "grid-auto-columns",
          "answer": "grid-template-columns",
          "reason": "The 'grid-template-columns' property is used to create a grid layout with flexible column sizes in CSS Grid."
        },
        {
          "id": 26,
          "question": "Which CSS property is used to create a smooth scrolling effect with snap points in both horizontal and vertical directions ?",
          "optA": "scroll-snap-type",
          "optB": "scroll-snap-direction",
          "optC": "scroll-snap-y-x",
          "optD": "scroll-snap-x-y",
          "answer": "scroll-snap-type",
          "reason": "The 'scroll-snap-type' property is used to create a smooth scrolling effect with snap points in both horizontal and vertical directions in CSS."
        },
        {
          "id": 27,
          "question": "Which CSS property is used to create a responsive text layout that adjusts the number of columns based on the available space ?",
          "optA": "columns",
          "optB": "column-count",
          "optC": "column-width",
          "optD": "column-gap",
          "answer": "columns",
          "reason": "The 'columns' property is used to create a responsive text layout that adjusts the number of columns based on the available space in CSS."
        },
        {
          "id": 28,
          "question": "Which CSS property is used to create a fade-in effect for an element ?",
          "optA": "opacity",
          "optB": "visibility",
          "optC": "display",
          "optD": "transition",
          "answer": "opacity",
          "reason": "The 'opacity' property is used to create a fade-in effect for an element in CSS."
        },
        {
          "id": 29,
          "question": "Which CSS property is used to create a grid layout with flexible row sizes ?",
          "optA": "grid-template-rows",
          "optB": "grid-template-columns",
          "optC": "grid-template-areas",
          "optD": "grid-auto-rows",
          "answer": "grid-template-rows",
          "reason": "The 'grid-template-rows' property is used to create a grid layout with flexible row sizes in CSS Grid."
        },
        {
          "id": 30,
          "question": "Which CSS property is used to create a responsive text layout that adjusts the number of columns and their widths based on the available space ?",
          "optA": "columns",
          "optB": "column-count",
          "optC": "column-width",
          "optD": "column-gap",
          "answer": "columns",
          "reason": "The 'columns' property is used to create a responsive text layout that adjusts the number of columns and their widths based on the available space in CSS."
        }
      ]
    },
    {
      "id": 7,
      "title": "HTML",
      "logo": "html.png",
      "description": "HTML is the standard markup language for creating web pages. It structures content and enables interactive and accessible websites across devices and browsers.",
      "lastUpdated": "29th May 2023",
      "body": [
        {
          "id": 1,
          "question": "What does HTML stand for ?",
          "optA": "HyperText Machine Language",
          "optB": "HyperText Markup Language",
          "optC": "HyperText Marking Language",
          "optD": "HighText Marking Language",
          "answer": "HyperText Markup Language",
          "reason": "HTML stands for ' HyperText Markup Language '. It is the standard markup language mainly used to design and create web pages and web applications."
        },
        {
          "id": 2,
          "question": "Which HTML tag is used for making your content appear bold ?",
          "optA": "<u>padhakoo</u>",
          "optB": "<b>padhakoo</b>",
          "optC": "<br>padhakoo</br>",
          "optD": "<i>padhakoo</i>",
          "answer": "<b>padhakoo</b>",
          "reason": "The <b> tag is used to make content appear bold in HTML."
        },
        {
          "id": 3,
          "question": "What is the correct sequence of HTML tags for starting a webpage ?",
          "optA": "Head, Title, HTML, Body",
          "optB": "HTML, Body, Title, Head",
          "optC": "HTML, Title, Head, Body",
          "optD": "HTML, Head, Title, Body",
          "answer": "HTML, Head, Title, Body",
          "reason": "The correct sequence of HTML tags to start a webpage is HTML, Head, Title, Body."
        },
        {
          "id": 4,
          "question": "Which of the following is used to read an HTML page and render it ?",
          "optA": "Web server",
          "optB": "Web matrix",
          "optC": "Web network",
          "optD": "Web browser",
          "answer": "Web browser",
          "reason": "A web browser is a software application responsible for retrieving, rendering and traversing the information resources on the World Wide Web."
        },
        {
          "id": 5,
          "question": "What is DOM in HTML ?",
          "optA": "Application programming interface",
          "optB": "Language dependent application programming",
          "optC": "Hierarchy of objects in ASP.NET",
          "optD": "Convention for representing and interacting with objects in html documents",
          "answer": "Convention for representing and interacting with objects in html documents",
          "reason": "The Document Object Model is a cross-platform and language-independent application programming interface that treats an HTML, XHTML, or XML document as a tree structure. A document can be viewed as a logical tree with help of DOM Model."
        },
        {
          "id": 6,
          "question": "Which of the following tag is used to insert a line-break in HTML ?",
          "optA": "<pre>",
          "optB": "<br>",
          "optC": "<a>",
          "optD": "<b>",
          "answer": "<br>",
          "reason": "The <br> tag in HTML is used to create a line break in a text."
        },
        {
          "id": 7,
          "question": "In which part of HTML do we write the metadeta ?",
          "optA": "<head> tag",
          "optB": "<title> tag",
          "optC": "<body> tag",
          "optD": "<html> tag",
          "answer": "<head> tag",
          "reason": "Metadata informs the search engine about the type of content present on a website. This information is enclosed within the <meta> tag. This tag is written inside the <head> tag."
        },
        {
          "id": 8,
          "question": "What is used for styling the HTML layout ?",
          "optA": "jQuery",
          "optB": "JavaScript",
          "optC": "CSS",
          "optD": "PHP",
          "answer": "CSS",
          "reason": "CSS or Cascading Style Sheet is a style sheet language which is designed to describe the presentation of a website's content including layouts, colors and fonts."
        },
        {
          "id": 9,
          "question": "How to create an unordered list in HTML ?",
          "optA": "<i>",
          "optB": "<ul>",
          "optC": "<li>",
          "optD": "<ol>",
          "answer": "<ul>",
          "reason": "The <ul> tag in HTML is used to display a list of items in a bulleted format. There can be four types of an unordered list: disc, circle, square, and none."
        },
        {
          "id": 10,
          "question": "What is the correct syntax to create a hyperlink in HTML ?",
          "optA": "<a> www.padhakoo.in <padhakoo.in /a>",
          "optB": "<a href = 'www.padhakoo.in'> padhakoo.in </a>",
          "optC": "<a link = 'www.padhakoo.in'> padhakoo.in </a>",
          "optD": "<a url = 'www.padhakoo.in' padhakoo.in /a>",
          "answer": "<a href = 'www.padhakoo.in'> padhakoo.in </a>",
          "reason": "The href (Hypertext reference) is an HTML attribute of the anchor tag used to create a link to another page."
        },
        {
          "id": 11,
          "question": "How to create an ordered list in HTML ?",
          "optA": "<li>",
          "optB": "<ul>",
          "optC": "<ol>",
          "optD": "<i>",
          "answer": "<ol>",
          "reason": "The <ol> tag in HTML is used to display the list items in a numbered format. There can be different types of numbered list: numeric number, capital alphabet, small alphabet, etc."
        },
        {
          "id": 12,
          "question": "Which of the following element is responsible for making the text italic in HTML ?",
          "optA": "<it>",
          "optB": "<pre>",
          "optC": "<italic>",
          "optD": "<i>",
          "answer": "<i>",
          "reason": "The <i> tag in HTML is used to display the written text in an italic format."
        },
        {
          "id": 13,
          "question": "Which of the following brackets are used to enclose the HTML tags ?",
          "optA": "( and )",
          "optB": "{ and }",
          "optC": "[ and ]",
          "optD": "< and >",
          "answer": "< and >",
          "reason": "All HTML tags must be enclosed within the angular < > brackets."
        },
        {
          "id": 14,
          "question": "Which of the following tag is used to add rows in a table ?",
          "optA": "<td> and </td>",
          "optB": "<th> and </th>",
          "optC": "<tr> and </tr>",
          "optD": "None of the above",
          "answer": "<tr> and </tr>",
          "reason": "The <tr> tag in HTML is used to define the rows in the table. It can consist of one or more <th> head cells and <td> data cells to define a single row of an HTML table."
        },
        {
          "id": 15,
          "question": "What is the use of <hr> tag in HTML ?",
          "optA": "New line",
          "optB": "Vertical ruler",
          "optC": "New paragraph",
          "optD": "Horizontal ruler",
          "answer": "Horizontal ruler",
          "reason": "The <hr> tag draws a horizontal line. It is used to specify a paragraph-level thematic break in the HTML document."
        },
        {
          "id": 16,
          "question": "Which of the following attribute is used to provide a unique name to an element ?",
          "optA": "class",
          "optB": "id",
          "optC": "type",
          "optD": "value",
          "answer": "id",
          "reason": "The 'id' attribute is used to specify a unique id for an element of the HTML document. It allocates the unique identifier which can be used by JavaScript and CSS to perform certain tasks."
        },
        {
          "id": 17,
          "question": "Which works similar to <b> tag ?",
          "optA": "<blockquote>",
          "optB": "<strong>",
          "optC": "<em>",
          "optD": "<i>",
          "answer": "<strong>",
          "reason": "Browsers show contents written inside the <strong> element in bold."
        },
        {
          "id": 18,
          "question": "Which of the following extension is used to save an HTML file ?",
          "optA": ".hl",
          "optB": ".h",
          "optC": ".htl",
          "optD": ".html",
          "answer": ".html",
          "reason": ".html or .htm extensions are used to save an HTML file."
        },
        {
          "id": 19,
          "question": "Which tag is used to create a dropdown in HTML forms ?",
          "optA": "<input>",
          "optB": "<select>",
          "optC": "<text>",
          "optD": "<textarea>",
          "answer": "<select>",
          "reason": "<select> element is used to create a drop-down list in HTML forms. It is mainly used to collect user input. Option tags are used within the <select> element to define available options from the drop-down list."
        },
        {
          "id": 20,
          "question": "Which of the following tag is used to create a text area in HTML forms ?",
          "optA": "<textarea>",
          "optB": "<text>",
          "optC": "<input type=”text” />",
          "optD": "<input type=”textarea” />",
          "answer": "<textarea>",
          "reason": "The <textarea> tag is used in a form to declare a text area element. It allows the user to enter text in multiple rows."
        },
        {
          "id": 21,
          "question": "Which of the following is a paragraph tag ?",
          "optA": "<p>",
          "optB": "<para>",
          "optC": "<hr>",
          "optD": "<a>",
          "answer": "<p>",
          "reason": "<p> tag is used for a paragraph in HTML."
        },
        {
          "id": 22,
          "question": "Which of the following HTML tag is used to display the text with a scrolling effect ?",
          "optA": "<marquee>",
          "optB": "<scroll>",
          "optC": "<div>",
          "optD": "<slide>",
          "answer": "<marquee>",
          "reason": "The <marquee> tag is used to scroll text or images in HTML."
        },
        {
          "id": 23,
          "question": "How to insert a background image in HTML ?",
          "optA": "<img background = 'img.png'>",
          "optB": "<bg-image = 'img.png'>",
          "optC": "<body background = 'img.png'>",
          "optD": "None of the above",
          "answer": "<body background = 'img.png'>",
          "reason": "To apply a background image to the entire document, use the 'background' attribute in the <body> tag."
        },
        {
          "id": 24,
          "question": "Which of the following is the correct way to create a list using the lowercase letters ?",
          "optA": "<ol type = 'a'>",
          "optB": "<ol lowercase = 'a'>",
          "optC": "<ol letter = 'a'>",
          "optD": "<ol case = 'a'>",
          "answer": "<ol type = 'a'>",
          "reason": "The 'type' attribute is used with the <ol> tag to create a list using lowercase letters."
        },
        {
          "id": 25,
          "question": "Which of the following HTML attribute is used to define inline styles ?",
          "optA": "type",
          "optB": "class",
          "optC": "inline",
          "optD": "style",
          "answer": "style",
          "reason": "The 'style' attribute is used to define inline styles in HTML."
        },
        {
          "id": 26,
          "question": "The tags in HTML are ____________ ",
          "optA": "case-sensitive",
          "optB": "in upper case",
          "optC": "not case sensitive",
          "optD": "in lowercase",
          "answer": "not case sensitive",
          "reason": "HTML tags are not case sensitive."
        },
        {
          "id": 27,
          "question": "Which of the following is the root tag of any HTML document ?",
          "optA": "<body>",
          "optB": "<head>",
          "optC": "<title>",
          "optD": "<html>",
          "answer": "<html>",
          "reason": "The <html> tag represents the root of an HTML document."
        },
        {
          "id": 28,
          "question": "Which HTML tag is used for embedding YouTube videos ?",
          "optA": "<video>",
          "optB": "<clip>",
          "optC": "<frame>",
          "optD": "<iframe>",
          "answer": "<iframe>",
          "reason": "The <iframe> tag is used for embedding YouTube videos."
        },
        {
          "id": 29,
          "question": "To show a deleted text, which HTML tag is used ?",
          "optA": "<del>",
          "optB": "<em>",
          "optC": "<strong>",
          "optD": "<ins>",
          "answer": "<del>",
          "reason": "The <del> tag is used to show deleted text in HTML."
        },
        {
          "id": 30,
          "question": "Which of the following is not an HTML5 tag ?",
          "optA": "<track>",
          "optB": "<video>",
          "optC": "<slider>",
          "optD": "<source>",
          "answer": "<slider>",
          "reason": "The <slider> tag is not an HTML5 tag."
        }
      ]
    },
    {
      "id": 8,
      "title": "SQL - I",
      "logo": "sql.png",
      "description": "SQL is a programming language for managing relational databases. It handles data storage, retrieval, and manipulation efficiently.",
      "lastUpdated": "4th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What does SQL stand for ?",
          "optA": "Structured Query Language",
          "optB": "Sequential Query Language",
          "optC": "Simple Query Language",
          "optD": "Structured Query Logic",
          "answer": "Structured Query Language",
          "reason": "SQL stands for Structured Query Language, which is used for managing and manipulating relational databases."
        },
        {
          "id": 2,
          "question": "Which SQL statement is used to retrieve data from a database ?",
          "optA": "SELECT",
          "optB": "UPDATE",
          "optC": "DELETE",
          "optD": "INSERT",
          "answer": "SELECT",
          "reason": "The SELECT statement is used to retrieve data from a database table in SQL."
        },
        {
          "id": 3,
          "question": "Which SQL keyword is used to filter records based on a specified condition ?",
          "optA": "WHERE",
          "optB": "FROM",
          "optC": "JOIN",
          "optD": "GROUP BY",
          "answer": "WHERE",
          "reason": "The WHERE keyword is used to filter records based on a specified condition in SQL."
        },
        {
          "id": 4,
          "question": "Which SQL statement is used to update data in a database ?",
          "optA": "SELECT",
          "optB": "UPDATE",
          "optC": "DELETE",
          "optD": "INSERT",
          "answer": "UPDATE",
          "reason": "The UPDATE statement is used to modify existing data in a database table in SQL."
        },
        {
          "id": 5,
          "question": "Which SQL keyword is used to sort the result set in ascending order ?",
          "optA": "SORT BY",
          "optB": "GROUP BY",
          "optC": "ORDER BY",
          "optD": "FILTER BY",
          "answer": "ORDER BY",
          "reason": "The ORDER BY keyword is used to sort the result set in ascending or descending order based on specified columns in SQL."
        },
        {
          "id": 6,
          "question": "Which SQL statement is used to delete records from a database ?",
          "optA": "SELECT",
          "optB": "UPDATE",
          "optC": "DELETE",
          "optD": "INSERT",
          "answer": "DELETE",
          "reason": "The DELETE statement is used to remove records from a database table in SQL."
        },
        {
          "id": 7,
          "question": "Which SQL keyword is used to retrieve unique/distinct values from a column ?",
          "optA": "UNIQUE",
          "optB": "DISTINCT",
          "optC": "UNION",
          "optD": "GROUP BY",
          "answer": "DISTINCT",
          "reason": "The DISTINCT keyword is used to retrieve unique/distinct values from a column in SQL."
        },
        {
          "id": 8,
          "question": "Which SQL statement is used to insert new records into a database ?",
          "optA": "SELECT",
          "optB": "UPDATE",
          "optC": "DELETE",
          "optD": "INSERT",
          "answer": "INSERT",
          "reason": "The INSERT statement is used to add new records to a database table in SQL."
        },
        {
          "id": 9,
          "question": "Which SQL keyword is used to combine rows from two or more tables based on a related column between them ?",
          "optA": "JOIN",
          "optB": "UNION",
          "optC": "FROM",
          "optD": "GROUP BY",
          "answer": "JOIN",
          "reason": "The JOIN keyword is used to combine rows from two or more tables based on a related column between them in SQL."
        },
        {
          "id": 10,
          "question": "Which SQL statement is used to create a new database ?",
          "optA": "CREATE DATABASE",
          "optB": "ALTER DATABASE",
          "optC": "DROP DATABASE",
          "optD": "SELECT DATABASE",
          "answer": "CREATE DATABASE",
          "reason": "The CREATE DATABASE statement is used to create a new database in SQL."
        },
        {
          "id": 11,
          "question": "Which SQL function is used to count the number of rows in a table ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "COUNT",
          "optD": "MAX",
          "answer": "COUNT",
          "reason": "The COUNT function is used to count the number of rows in a table in SQL."
        },
        {
          "id": 12,
          "question": "Which SQL keyword is used to retrieve the top 'n' records from a table ?",
          "optA": "FIRST",
          "optB": "LAST",
          "optC": "LIMIT",
          "optD": "TOP",
          "answer": "TOP",
          "reason": "The TOP keyword is used to retrieve the top 'n' records from a table in SQL."
        },
        {
          "id": 13,
          "question": "Which SQL statement is used to add a new column to an existing table ?",
          "optA": "ALTER TABLE",
          "optB": "ADD COLUMN",
          "optC": "CREATE TABLE",
          "optD": "UPDATE TABLE",
          "answer": "ALTER TABLE",
          "reason": "The ALTER TABLE statement is used to add a new column to an existing table in SQL."
        },
        {
          "id": 14,
          "question": "Which SQL keyword is used to specify multiple conditions in a SELECT statement ?",
          "optA": "AND",
          "optB": "OR",
          "optC": "NOT",
          "optD": "BETWEEN",
          "answer": "AND",
          "reason": "The AND keyword is used to specify multiple conditions in a SELECT statement in SQL."
        },
        {
          "id": 15,
          "question": "Which SQL operator is used to select values within a specified range ?",
          "optA": "IN",
          "optB": "BETWEEN",
          "optC": "LIKE",
          "optD": "IS NULL",
          "answer": "BETWEEN",
          "reason": "The BETWEEN operator is used to select values within a specified range in SQL."
        },
        {
          "id": 16,
          "question": "Which SQL keyword is used to sort the result set in descending order ?",
          "optA": "SORT BY",
          "optB": "GROUP BY",
          "optC": "ORDER BY",
          "optD": "FILTER BY",
          "answer": "ORDER BY",
          "reason": "The ORDER BY keyword is used to sort the result set in ascending or descending order based on specified columns in SQL."
        },
        {
          "id": 17,
          "question": "Which SQL function is used to find the average value of a column ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "COUNT",
          "optD": "MAX",
          "answer": "AVG",
          "reason": "The AVG function is used to find the average value of a column in SQL."
        },
        {
          "id": 18,
          "question": "Which SQL operator is used to search for a specified pattern in a column ?",
          "optA": "IN",
          "optB": "BETWEEN",
          "optC": "LIKE",
          "optD": "IS NULL",
          "answer": "LIKE",
          "reason": "The LIKE operator is used to search for a specified pattern in a column in SQL."
        },
        {
          "id": 19,
          "question": "Which SQL keyword is used to retrieve records from multiple tables using a common column ?",
          "optA": "WHERE",
          "optB": "FROM",
          "optC": "JOIN",
          "optD": "GROUP BY",
          "answer": "JOIN",
          "reason": "The JOIN keyword is used to retrieve records from multiple tables using a common column in SQL."
        },
        {
          "id": 20,
          "question": "Which SQL statement is used to delete a table from a database ?",
          "optA": "DELETE TABLE",
          "optB": "DROP TABLE",
          "optC": "REMOVE TABLE",
          "optD": "ERASE TABLE",
          "answer": "DROP TABLE",
          "reason": "The DROP TABLE statement is used to delete a table from a database in SQL."
        },
        {
          "id": 21,
          "question": "What is the purpose of the SQL GROUP BY clause ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To combine rows from two or more tables",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To group rows with the same values into summary rows",
          "answer": "To group rows with the same values into summary rows",
          "reason": "The GROUP BY clause is used to group rows with the same values into summary rows in SQL."
        },
        {
          "id": 22,
          "question": "Which SQL operator is used to check if a value is NULL ?",
          "optA": "IS",
          "optB": "LIKE",
          "optC": "NOT",
          "optD": "BETWEEN",
          "answer": "IS",
          "reason": "The IS operator is used to check if a value is NULL in SQL."
        },
        {
          "id": 23,
          "question": "Which SQL keyword is used to specify a condition to be met for the result set ?",
          "optA": "SELECT",
          "optB": "WHERE",
          "optC": "FROM",
          "optD": "ORDER BY",
          "answer": "WHERE",
          "reason": "The WHERE keyword is used to specify a condition to be met for the result set in SQL."
        },
        {
          "id": 24,
          "question": "Which SQL function is used to find the highest value in a column ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "COUNT",
          "optD": "MAX",
          "answer": "MAX",
          "reason": "The MAX function is used to find the highest value in a column in SQL."
        },
        {
          "id": 25,
          "question": "Which SQL operator is used to select values that are not in a specified set ?",
          "optA": "IN",
          "optB": "BETWEEN",
          "optC": "LIKE",
          "optD": "NOT IN",
          "answer": "NOT IN",
          "reason": "The NOT IN operator is used to select values that are not in a specified set in SQL."
        },
        {
          "id": 26,
          "question": "Which SQL keyword is used to retrieve records from a table without any duplicate values ?",
          "optA": "UNIQUE",
          "optB": "DISTINCT",
          "optC": "UNION",
          "optD": "GROUP BY",
          "answer": "DISTINCT",
          "reason": "The DISTINCT keyword is used to retrieve records from a table without any duplicate values in SQL."
        },
        {
          "id": 27,
          "question": "Which SQL statement is used to modify the structure of an existing table ?",
          "optA": "SELECT",
          "optB": "UPDATE",
          "optC": "ALTER TABLE",
          "optD": "INSERT",
          "answer": "ALTER TABLE",
          "reason": "The ALTER TABLE statement is used to modify the structure of an existing table in SQL."
        },
        {
          "id": 28,
          "question": "Which SQL operator is used to select values that are NULL ?",
          "optA": "IS",
          "optB": "LIKE",
          "optC": "NOT",
          "optD": "BETWEEN",
          "answer": "IS",
          "reason": "The IS operator is used to select values that are NULL in SQL."
        },
        {
          "id": 29,
          "question": "Which SQL keyword is used to specify the columns to be retrieved in a SELECT statement ?",
          "optA": "SELECT",
          "optB": "WHERE",
          "optC": "FROM",
          "optD": "ORDER BY",
          "answer": "SELECT",
          "reason": "The SELECT keyword is used to specify the columns to be retrieved in a SELECT statement in SQL."
        },
        {
          "id": 30,
          "question": "Which SQL statement is used to create a new table in a database ?",
          "optA": "CREATE TABLE",
          "optB": "ALTER TABLE",
          "optC": "DROP TABLE",
          "optD": "INSERT INTO",
          "answer": "CREATE TABLE",
          "reason": "The CREATE TABLE statement is used to create a new table in a database in SQL."
        }
      ]
    },
    {
      "id": 9,
      "title": "SQL - II",
      "logo": "sql.png",
      "description": "SQL is a programming language for managing relational databases. It handles data storage, retrieval, and manipulation efficiently.",
      "lastUpdated": "7th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is a correlated subquery in SQL ?",
          "optA": "A subquery that is independent of the outer query",
          "optB": "A subquery that refers to a column from the outer query",
          "optC": "A subquery that returns multiple rows",
          "optD": "A subquery that is used with the EXISTS operator",
          "answer": "A subquery that refers to a column from the outer query",
          "reason": "A correlated subquery is a subquery that refers to a column from the outer query, allowing the inner query to be dependent on the outer query's results."
        },
        {
          "id": 2,
          "question": "What is the purpose of the SQL HAVING clause ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To combine rows from two or more tables",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To filter groups based on a specified condition",
          "answer": "To filter groups based on a specified condition",
          "reason": "The HAVING clause is used to filter groups based on a specified condition in SQL. It is typically used in combination with the GROUP BY clause."
        },
        {
          "id": 3,
          "question": "Which SQL statement is used to insert new records into a table ?",
          "optA": "INSERT",
          "optB": "UPDATE",
          "optC": "SELECT",
          "optD": "DELETE",
          "answer": "INSERT",
          "reason": "The INSERT statement is used to insert new records into a table in SQL."
        },
        {
          "id": 4,
          "question": "What is the purpose of the SQL UNION operator ?",
          "optA": "To combine rows from two or more tables",
          "optB": "To filter records based on a specified condition",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To perform mathematical calculations on numeric columns",
          "answer": "To combine rows from two or more tables",
          "reason": "The UNION operator is used to combine rows from two or more tables into a single result set in SQL."
        },
        {
          "id": 5,
          "question": "Which SQL function is used to convert a value to a different data type ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "CONVERT",
          "optD": "MAX",
          "answer": "CONVERT",
          "reason": "The CONVERT function is used to convert a value to a different data type in SQL."
        },
        {
          "id": 6,
          "question": "What is the purpose of the SQL CASE statement ?",
          "optA": "To combine rows from two or more tables",
          "optB": "To filter records based on a specified condition",
          "optC": "To perform mathematical calculations on numeric columns",
          "optD": "To conditionally perform an action based on specified criteria",
          "answer": "To conditionally perform an action based on specified criteria",
          "reason": "The CASE statement is used to conditionally perform an action based on specified criteria in SQL."
        },
        {
          "id": 7,
          "question": "Which SQL operator is used to select all records from a table ?",
          "optA": "AND",
          "optB": "OR",
          "optC": "NOT",
          "optD": "ALL",
          "answer": "ALL",
          "reason": "The ALL operator is used to select all records from a table in SQL."
        },
        {
          "id": 8,
          "question": "What is the purpose of the SQL EXISTS operator ?",
          "optA": "To combine rows from two or more tables",
          "optB": "To filter records based on a specified condition",
          "optC": "To check if a subquery returns any rows",
          "optD": "To perform mathematical calculations on numeric columns",
          "answer": "To check if a subquery returns any rows",
          "reason": "The EXISTS operator is used to check if a subquery returns any rows in SQL."
        },
        {
          "id": 9,
          "question": "Which SQL statement is used to update existing records in a table ?",
          "optA": "INSERT",
          "optB": "UPDATE",
          "optC": "SELECT",
          "optD": "DELETE",
          "answer": "UPDATE",
          "reason": "The UPDATE statement is used to update existing records in a table in SQL."
        },
        {
          "id": 10,
          "question": "What is the purpose of the SQL ORDER BY clause ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To combine rows from two or more tables",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To perform mathematical calculations on numeric columns",
          "answer": "To sort the result set in ascending or descending order",
          "reason": "The ORDER BY clause is used to sort the result set in ascending or descending order based on one or more columns in SQL."
        },
        {
          "id": 11,
          "question": "What is the purpose of the SQL GROUP BY clause ?",
          "optA": "To combine rows from two or more tables",
          "optB": "To filter records based on a specified condition",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To group rows with the same values into summary rows",
          "answer": "To group rows with the same values into summary rows",
          "reason": "The GROUP BY clause is used to group rows with the same values into summary rows in SQL."
        },
        {
          "id": 12,
          "question": "Which SQL operator is used to check if a value is NULL ?",
          "optA": "IS",
          "optB": "LIKE",
          "optC": "NOT",
          "optD": "BETWEEN",
          "answer": "IS",
          "reason": "The IS operator is used to check if a value is NULL in SQL."
        },
        {
          "id": 13,
          "question": "Which SQL keyword is used to specify a condition to be met for the result set ?",
          "optA": "SELECT",
          "optB": "WHERE",
          "optC": "FROM",
          "optD": "ORDER BY",
          "answer": "WHERE",
          "reason": "The WHERE keyword is used to specify a condition to be met for the result set in SQL."
        },
        {
          "id": 14,
          "question": "Which SQL function is used to find the highest value in a column ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "COUNT",
          "optD": "MAX",
          "answer": "MAX",
          "reason": "The MAX function is used to find the highest value in a column in SQL."
        },
        {
          "id": 15,
          "question": "What is the purpose of the SQL JOIN clause ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To combine rows from two or more tables",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To perform mathematical calculations on numeric columns",
          "answer": "To combine rows from two or more tables",
          "reason": "The JOIN clause is used to combine rows from two or more tables based on a related column in SQL."
        },
        {
          "id": 16,
          "question": "What is the purpose of the SQL GROUP_CONCAT function ?",
          "optA": "To perform mathematical calculations on numeric columns",
          "optB": "To concatenate values from multiple rows into a single string",
          "optC": "To filter records based on a specified condition",
          "optD": "To combine rows from two or more tables",
          "answer": "To concatenate values from multiple rows into a single string",
          "reason": "The GROUP_CONCAT function is used to concatenate values from multiple rows into a single string in SQL."
        },
        {
          "id": 17,
          "question": "Which SQL statement is used to delete records from a table ?",
          "optA": "INSERT",
          "optB": "UPDATE",
          "optC": "SELECT",
          "optD": "DELETE",
          "answer": "DELETE",
          "reason": "The DELETE statement is used to delete records from a table in SQL."
        },
        {
          "id": 18,
          "question": "What is the purpose of the SQL ROW_NUMBER() function ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To perform mathematical calculations on numeric columns",
          "optC": "To assign a unique row number to each row in the result set",
          "optD": "To combine rows from two or more tables",
          "answer": "To assign a unique row number to each row in the result set",
          "reason": "The ROW_NUMBER() function is used to assign a unique row number to each row in the result set in SQL."
        },
        {
          "id": 19,
          "question": "Which SQL keyword is used to retrieve distinct values from a column ?",
          "optA": "DISTINCT",
          "optB": "UNIQUE",
          "optC": "ALL",
          "optD": "HAVING",
          "answer": "DISTINCT",
          "reason": "The DISTINCT keyword is used to retrieve distinct values from a column in SQL."
        },
        {
          "id": 20,
          "question": "What is the purpose of the SQL TRUNCATE TABLE statement ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To combine rows from two or more tables",
          "optC": "To delete all records from a table",
          "optD": "To perform mathematical calculations on numeric columns",
          "answer": "To delete all records from a table",
          "reason": "The TRUNCATE TABLE statement is used to delete all records from a table in SQL."
        },
        {
          "id": 21,
          "question": "What is the purpose of the SQL RANK() function ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To perform mathematical calculations on numeric columns",
          "optC": "To assign a rank to each row in the result set",
          "optD": "To combine rows from two or more tables",
          "answer": "To assign a rank to each row in the result set",
          "reason": "The RANK() function is used to assign a rank to each row in the result set in SQL."
        },
        {
          "id": 22,
          "question": "Which SQL statement is used to create a new table ?",
          "optA": "INSERT",
          "optB": "UPDATE",
          "optC": "SELECT",
          "optD": "CREATE TABLE",
          "answer": "CREATE TABLE",
          "reason": "The CREATE TABLE statement is used to create a new table in SQL."
        },
        {
          "id": 23,
          "question": "What is the purpose of the SQL IN operator ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To perform mathematical calculations on numeric columns",
          "optC": "To check if a value exists in a specified set of values",
          "optD": "To combine rows from two or more tables",
          "answer": "To check if a value exists in a specified set of values",
          "reason": "The IN operator is used to check if a value exists in a specified set of values in SQL."
        },
        {
          "id": 24,
          "question": "Which SQL function is used to calculate the average value of a column ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "COUNT",
          "optD": "MAX",
          "answer": "AVG",
          "reason": "The AVG function is used to calculate the average value of a column in SQL."
        },
        {
          "id": 25,
          "question": "What is the purpose of the SQL COALESCE function ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To perform mathematical calculations on numeric columns",
          "optC": "To concatenate values from multiple rows into a single string",
          "optD": "To return the first non-null expression in a list",
          "answer": "To return the first non-null expression in a list",
          "reason": "The COALESCE function is used to return the first non-null expression in a list in SQL."
        },
        {
          "id": 26,
          "question": "Which SQL statement is used to add a new column to an existing table ?",
          "optA": "INSERT",
          "optB": "UPDATE",
          "optC": "SELECT",
          "optD": "ALTER TABLE",
          "answer": "ALTER TABLE",
          "reason": "The ALTER TABLE statement is used to add a new column to an existing table in SQL."
        },
        {
          "id": 27,
          "question": "What is the purpose of the SQL EXISTS operator ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To perform mathematical calculations on numeric columns",
          "optC": "To check if a subquery returns any rows",
          "optD": "To combine rows from two or more tables",
          "answer": "To check if a subquery returns any rows",
          "reason": "The EXISTS operator is used to check if a subquery returns any rows in SQL."
        },
        {
          "id": 28,
          "question": "Which SQL function is used to find the maximum value in a column ?",
          "optA": "SUM",
          "optB": "AVG",
          "optC": "COUNT",
          "optD": "MAX",
          "answer": "MAX",
          "reason": "The MAX function is used to find the maximum value in a column in SQL."
        },
        {
          "id": 29,
          "question": "What is the purpose of the SQL OUTER JOIN ?",
          "optA": "To filter records based on a specified condition",
          "optB": "To combine rows from two or more tables",
          "optC": "To sort the result set in ascending or descending order",
          "optD": "To perform mathematical calculations on numeric columns",
          "answer": "To combine rows from two or more tables",
          "reason": "The OUTER JOIN is used to combine rows from two or more tables, including unmatched rows from one or both tables, in SQL."
        },
        {
          "id": 30,
          "question": "Which SQL statement is used to rename a table ?",
          "optA": "INSERT",
          "optB": "UPDATE",
          "optC": "SELECT",
          "optD": "RENAME TABLE",
          "answer": "RENAME TABLE",
          "reason": "The RENAME TABLE statement is used to rename a table in SQL."
        }
      ]
    },
    {
      "id": 10,
      "title": "Redux",
      "logo": "redux.png",
      "description": "Redux is a predictable state container for JavaScript applications, commonly used with React. It simplifies state management and enables scalable applications with a unidirectional data flow.",
      "lastUpdated": "6th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Redux ?",
          "optA": "A programming language",
          "optB": "A state management library for JavaScript",
          "optC": "A database management system",
          "optD": "A UI framework",
          "answer": "A state management library for JavaScript",
          "reason": "Redux is a state management library for JavaScript applications."
        },
        {
          "id": 2,
          "question": "What is the main concept in Redux ?",
          "optA": "Actions",
          "optB": "Components",
          "optC": "Reducers",
          "optD": "Selectors",
          "answer": "Actions",
          "reason": "Actions are the main concept in Redux. They represent events that occur in the application."
        },
        {
          "id": 3,
          "question": "What is the purpose of an action creator in Redux ?",
          "optA": "To define the actions required by an application state",
          "optB": "To manage the state of components",
          "optC": "To create actions",
          "optD": "To handle side effects",
          "answer": "To create actions",
          "reason": "Action creators are functions that create actions in Redux."
        },
        {
          "id": 4,
          "question": "What is a reducer in Redux ?",
          "optA": "A function that handles actions and updates the state",
          "optB": "A component that renders the UI",
          "optC": "A utility for managing side effects",
          "optD": "A tool for debugging Redux applications",
          "answer": "A function that handles actions and updates the state",
          "reason": "Reducers are functions in Redux that handle actions and update the state of the application."
        },
        {
          "id": 5,
          "question": "What is the purpose of the Redux store ?",
          "optA": "To manage the application's state",
          "optB": "To define the structure of the application state",
          "optC": "To handle side effects",
          "optD": "To manage the routing in the application",
          "answer": "To manage the application's state",
          "reason": "The Redux store is responsible for managing the application's state."
        },
        {
          "id": 6,
          "question": "What is an action payload in Redux ?",
          "optA": "A function that creates actions",
          "optB": "The data associated with an action",
          "optC": "A utility for managing side effects",
          "optD": "A tool for debugging Redux applications",
          "answer": "The data associated with an action",
          "reason": "The action payload is the data associated with an action in Redux."
        },
        {
          "id": 7,
          "question": "What is the purpose of the Redux devtools ?",
          "optA": "To debug Redux applications",
          "optB": "To optimize performance",
          "optC": "To handle routing",
          "optD": "To secure the application",
          "answer": "To debug Redux applications",
          "reason": "The Redux devtools extension is used for debugging Redux applications, inspecting the state, and tracking actions."
        },
        {
          "id": 8,
          "question": "What is the role of middleware in Redux ?",
          "optA": "To handle actions and update the state",
          "optB": "To manage the application's state",
          "optC": "To handle side effects",
          "optD": "To define the structure of the application state",
          "answer": "To handle side effects",
          "reason": "Middleware in Redux is used to handle side effects such as asynchronous actions."
        },
        {
          "id": 9,
          "question": "What is the purpose of the Redux connect function ?",
          "optA": "To connect React components to the Redux store",
          "optB": "To connect to a database",
          "optC": "To manage API requests",
          "optD": "To handle routing",
          "answer": "To connect React components to the Redux store",
          "reason": "The Redux connect function is used to connect React components to the Redux store, enabling access to the state and actions."
        },
        {
          "id": 10,
          "question": "What is the purpose of the Redux combineReducers function ?",
          "optA": "To combine multiple reducers into a single reducer",
          "optB": "To combine multiple actions into a single action",
          "optC": "To combine multiple components into a single component",
          "optD": "To combine multiple stores into a single store",
          "answer": "To combine multiple reducers into a single reducer",
          "reason": "The Redux combineReducers function is used to combine multiple reducers into a single reducer function."
        },
        {
          "id": 11,
          "question": "What is the purpose of the Redux middleware ?",
          "optA": "To handle API requests",
          "optB": "To optimize performance",
          "optC": "To manage component state in React",
          "optD": "To handle asynchronous actions",
          "answer": "To handle asynchronous actions",
          "reason": "The Redux thunk middleware allows writing action creators that return functions instead of plain action objects, enabling handling of asynchronous actions."
        },
        {
          "id": 12,
          "question": "What is a selector in Redux ?",
          "optA": "A component in React",
          "optB": "A function that extracts data from the state",
          "optC": "A database query",
          "optD": "A middleware",
          "answer": "A function that extracts data from the state",
          "reason": "A selector is a function in Redux that extracts specific data from the state, often used for computing derived data."
        },
        {
          "id": 13,
          "question": "What is the purpose of the Redux action type ?",
          "optA": "To handle actions and update the state",
          "optB": "To manage the application's state",
          "optC": "To define the structure of the application state",
          "optD": "To identify the type of an action",
          "answer": "To identify the type of an action",
          "reason": "The Redux action type is used to identify the type of an action."
        },
        {
          "id": 14,
          "question": "What is an action in Redux ?",
          "optA": "A component in React",
          "optB": "A function that returns an object",
          "optC": "A database query",
          "optD": "A middleware",
          "answer": "A function that returns an object",
          "reason": "In Redux, an action is a plain JavaScript object that represents an intention to change the state."
        },
        {
          "id": 15,
          "question": "What is the core principle of Redux ?",
          "optA": "Immutability",
          "optB": "Encapsulation",
          "optC": "Inheritance",
          "optD": "Polymorphism",
          "answer": "Immutability",
          "reason": "The core principle of Redux is immutability, where state is not directly mutated but new state objects are created."
        },
        {
          "id": 16,
          "question": "What is the purpose of the Redux action creator ?",
          "optA": "To define the structure of the application state",
          "optB": "To manage the application's state",
          "optC": "To create actions",
          "optD": "To handle side effects",
          "answer": "To create actions",
          "reason": "Redux action creators are functions used to create actions."
        },
        {
          "id": 17,
          "question": "What is a Redux store enhancer ?",
          "optA": "A component in React",
          "optB": "A function that extends the store's capabilities",
          "optC": "A database table",
          "optD": "A middleware",
          "answer": "A function that extends the store's capabilities",
          "reason": "A store enhancer is a higher-order function in Redux that wraps the store to provide additional capabilities, such as middleware support."
        },
        {
          "id": 18,
          "question": "What is the difference between actions and action creators in Redux ?",
          "optA": "Actions are functions, and action creators are objects",
          "optB": "Actions are objects, and action creators are functions",
          "optC": "Actions are used to create state, and action creators are used to modify state",
          "optD": "Actions are synchronous, and action creators are asynchronous",
          "answer": "Actions are objects, and action creators are functions",
          "reason": "Actions are plain JavaScript objects that represent an intention to change the state, while action creators are functions that return these action objects."
        },
        {
          "id": 19,
          "question": "What are the three principles of Redux ?",
          "optA": "Actions, Reducers, Store",
          "optB": "Components, Props, State",
          "optC": "Dispatch, Subscribe, Middleware",
          "optD": "Immutability, Single Source of Truth, Changes with Pure Functions",
          "answer": "Immutability, Single Source of Truth, Changes with Pure Functions",
          "reason": "The three principles of Redux are Immutability, Single Source of Truth, and Changes with Pure Functions."
        },
        {
          "id": 20,
          "question": "What is the role of an action in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To describe a specific user interaction or event",
          "optD": "To update the application state",
          "answer": "To describe a specific user interaction or event",
          "reason": "Actions in Redux describe a specific user interaction or event that triggers a change in the application state."
        },
        {
          "id": 21,
          "question": "What is the store in Redux ?",
          "optA": "A global object that holds the application state",
          "optB": "A component that renders the application UI",
          "optC": "A utility function for performing side effects",
          "optD": "A middleware for handling asynchronous operations",
          "answer": "A global object that holds the application state",
          "reason": "The store in Redux is a global object that holds the application state and provides methods for dispatching actions and subscribing to state changes."
        },
        {
          "id": 22,
          "question": "What is the purpose of mapStateToProps in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To connect the state from the store to component props",
          "optD": "To update the application state based on actions",
          "answer": "To connect the state from the store to component props",
          "reason": "mapStateToProps is a function used in Redux to connect the state from the store to the props of a component."
        },
        {
          "id": 23,
          "question": "What is the purpose of mapDispatchToProps in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To connect the action creators to component props",
          "optD": "To update the application state based on actions",
          "answer": "To connect the action creators to component props",
          "reason": "mapDispatchToProps is a function used in Redux to connect the action creators to the props of a component."
        },
        {
          "id": 24,
          "question": "What is the purpose of the Provider component in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To connect a component to the Redux store",
          "optD": "To provide access to the Redux store to all components",
          "answer": "To provide access to the Redux store to all components",
          "reason": "The Provider component in Redux is used to provide access to the Redux store to all components in the application by wrapping the root component."
        },
        {
          "id": 25,
          "question": "What is a middleware in Redux ?",
          "optA": "A component that renders the application UI",
          "optB": "A utility function for performing side effects",
          "optC": "A global object that holds the application state",
          "optD": "A function that sits between the action dispatch and the reducer",
          "answer": "A function that sits between the action dispatch and the reducer",
          "reason": "Middleware in Redux is a function that sits between the action dispatch and the reducer, allowing for additional functionality such as handling asynchronous operations or logging."
        },
        {
          "id": 26,
          "question": "What is a dispatch in Redux ?",
          "optA": "A function that creates actions",
          "optB": "A function that handles asynchronous operations",
          "optC": "A function that updates the application state",
          "optD": "A function that sends actions to the reducers",
          "answer": "A function that sends actions to the reducers",
          "reason": "A dispatch in Redux is a function that sends actions to the reducers, triggering the state updates based on the action type."
        },
        {
          "id": 27,
          "question": "What is the purpose of the getState function in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To get the current application state from the store",
          "optD": "To update the application state based on actions",
          "answer": "To get the current application state from the store",
          "reason": "The getState function in Redux is used to get the current application state from the store, allowing components or middleware to access the state."
        },
        {
          "id": 28,
          "question": "What is the purpose of the action payload in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To provide additional data to the reducers",
          "optD": "To create memoized selectors for efficient state access",
          "answer": "To provide additional data to the reducers",
          "reason": "The action payload in Redux is used to provide additional data to the reducers, allowing them to update the state based on the payload values."
        },
        {
          "id": 29,
          "question": "What is the purpose of the createSelector function in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To combine multiple reducers into a single reducer",
          "optD": "To create memoized selectors for efficient state access",
          "answer": "To create memoized selectors for efficient state access",
          "reason": "The createSelector function in Redux is used to create memoized selectors, which efficiently compute derived state from the Redux store."
        },
        {
          "id": 30,
          "question": "What is the purpose of the applyMiddleware function in Redux ?",
          "optA": "To define the structure of the application state",
          "optB": "To handle asynchronous operations",
          "optC": "To combine multiple reducers into a single reducer",
          "optD": "To apply middleware to the Redux store",
          "answer": "To apply middleware to the Redux store",
          "reason": "The applyMiddleware function in Redux is used to apply middleware to the Redux store, enabling additional functionality to be added to the dispatch process."
        }
      ]
    },
    {
      "id": 11,
      "title": "Node JS",
      "logo": "nodejs.png",
      "description": "Node.js is a JavaScript runtime for server-side applications. It enables scalable and efficient web development with a vast ecosystem of packages.",
      "lastUpdated": "7th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Node.js ?",
          "optA": "A programming language",
          "optB": "A web server",
          "optC": "A runtime environment",
          "optD": "A database management system",
          "answer": "A runtime environment",
          "reason": "Node.js is a runtime environment that allows you to run JavaScript code outside of a web browser, enabling server-side and command-line scripting."
        },
        {
          "id": 2,
          "question": "Which of the following is true about Node.js ?",
          "optA": "It is single-threaded and uses blocking I/O operations",
          "optB": "It is multi-threaded and uses non-blocking I/O operations",
          "optC": "It is single-threaded and uses non-blocking I/O operations",
          "optD": "It is multi-threaded and uses blocking I/O operations",
          "answer": "It is single-threaded and uses non-blocking I/O operations",
          "reason": "Node.js is single-threaded and uses non-blocking I/O operations, allowing it to handle concurrent requests efficiently without blocking the execution of other code."
        },
        {
          "id": 3,
          "question": "What does NPM stand for ?",
          "optA": "Node Project Manager",
          "optB": "Node Package Manager",
          "optC": "Node Program Manager",
          "optD": "Node Plugin Manager",
          "answer": "Node Package Manager",
          "reason": "NPM stands for Node Package Manager, which is a package manager for JavaScript libraries and tools. It allows developers to easily install, manage, and publish packages for their Node.js applications."
        },
        {
          "id": 4,
          "question": "Which of the following is not a core module in Node.js ?",
          "optA": "fs",
          "optB": "http",
          "optC": "path",
          "optD": "ajax",
          "answer": "ajax",
          "reason": "The core modules in Node.js include fs (file system), http (HTTP server), and path (file path handling), but 'ajax' is not a core module."
        },
        {
          "id": 5,
          "question": "What is the purpose of the 'require' function in Node.js ?",
          "optA": "To include external JavaScript files",
          "optB": "To create new modules",
          "optC": "To load core modules",
          "optD": "To install npm packages",
          "answer": "To load core modules",
          "reason": "The 'require' function in Node.js is used to load core modules or external JavaScript files by specifying their module name or file path."
        },
        {
          "id": 6,
          "question": "Which module in Node.js provides support for working with file systems ?",
          "optA": "fs",
          "optB": "http",
          "optC": "path",
          "optD": "util",
          "answer": "fs",
          "reason": "The 'fs' module in Node.js provides support for working with file systems, including reading and writing files, creating directories, and more."
        },
        {
          "id": 7,
          "question": "What is an event emitter in Node.js ?",
          "optA": "A function for generating random numbers",
          "optB": "A utility module for handling events",
          "optC": "A built-in class for creating event-driven applications",
          "optD": "A debugging tool for tracking event logs",
          "answer": "A built-in class for creating event-driven applications",
          "reason": "An event emitter in Node.js is a built-in class that allows you to create event-driven applications by emitting and handling events using the EventEmitter API."
        },
        {
          "id": 8,
          "question": "Which of the following is true about streams in Node.js ?",
          "optA": "Streams are used for handling HTTP requests",
          "optB": "Streams allow you to perform asynchronous file operations",
          "optC": "Streams are used for handling database queries",
          "optD": "Streams allow you to process data piece by piece",
          "answer": "Streams allow you to process data piece by piece",
          "reason": "Streams in Node.js allow you to process data piece by piece, which is useful for handling large files or data streams without consuming excessive memory."
        },
        {
          "id": 9,
          "question": "What is the purpose of the 'buffer' module in Node.js ?",
          "optA": "To store binary data",
          "optB": "To encode and decode JSON data",
          "optC": "To manipulate strings",
          "optD": "To perform encryption and decryption",
          "answer": "To store binary data",
          "reason": "The 'buffer' module in Node.js provides a way to store and manipulate binary data, such as reading from or writing to sockets, files, or other streams."
        },
        {
          "id": 10,
          "question": "What is the role of the 'path' module in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create and manipulate file paths",
          "optC": "To encode and decode URLs",
          "optD": "To perform data validation",
          "answer": "To create and manipulate file paths",
          "reason": "The 'path' module in Node.js provides utilities for working with file paths, including resolving, joining, and normalizing paths across different operating systems."
        },
        {
          "id": 11,
          "question": "What is the purpose of the 'cluster' module in Node.js ?",
          "optA": "To create child processes",
          "optB": "To handle HTTP requests",
          "optC": "To manage server-side sessions",
          "optD": "To perform database operations",
          "answer": "To create child processes",
          "reason": "The 'cluster' module in Node.js allows you to create child processes, enabling your Node.js application to utilize multiple CPU cores for improved performance."
        },
        {
          "id": 12,
          "question": "What is the role of the 'os' module in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create and manipulate file paths",
          "optC": "To interact with the operating system",
          "optD": "To perform data validation",
          "answer": "To interact with the operating system",
          "reason": "The 'os' module in Node.js provides utilities for interacting with the operating system, such as retrieving information about the system, network interfaces, and more."
        },
        {
          "id": 13,
          "question": "What is a middleware in the context of Express.js ?",
          "optA": "A module for handling database queries",
          "optB": "A function for generating random numbers",
          "optC": "A utility module for handling events",
          "optD": "Functions that are executed in the request/response pipeline",
          "answer": "Functions that are executed in the request/response pipeline",
          "reason": "Middleware in Express.js refers to functions that are executed in the request/response pipeline, allowing you to add additional functionality or modify the request or response objects."
        },
        {
          "id": 14,
          "question": "Which programming language is commonly used with Node.js ?",
          "optA": "Java",
          "optB": "C++",
          "optC": "Python",
          "optD": "JavaScript",
          "answer": "JavaScript",
          "reason": "Node.js is commonly used with JavaScript as it provides a runtime environment for executing JavaScript code on the server-side."
        },
        {
          "id": 15,
          "question": "What is the purpose of package.json in a Node.js project ?",
          "optA": "To manage project dependencies",
          "optB": "To define project configuration",
          "optC": "To specify project scripts",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "The package.json file in a Node.js project serves multiple purposes. It manages project dependencies, defines project configuration, and specifies project scripts, among other things."
        },
        {
          "id": 16,
          "question": "What is the role of the 'jsonwebtoken' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To encode and decode JSON data",
          "optC": "To perform encryption and decryption",
          "optD": "To manage JSON Web Tokens (JWT)",
          "answer": "To manage JSON Web Tokens (JWT)",
          "reason": "The 'jsonwebtoken' library in Node.js provides functions for creating, signing, and verifying JSON Web Tokens (JWT), which are used for authentication and authorization purposes."
        },
        {
          "id": 17,
          "question": "What is the purpose of the 'bcrypt' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To perform encryption and decryption",
          "optC": "To manipulate strings",
          "optD": "To create and manipulate file paths",
          "answer": "To perform encryption and decryption",
          "reason": "The 'bcrypt' library in Node.js is used for hashing and verifying passwords, providing a secure way to store and compare sensitive information like user passwords."
        },
        {
          "id": 18,
          "question": "What is the role of the 'mongoose' library in Node.js ?",
          "optA": "To create and manipulate file paths",
          "optB": "To handle HTTP requests",
          "optC": "To interact with MongoDB databases",
          "optD": "To perform data validation",
          "answer": "To interact with MongoDB databases",
          "reason": "The 'mongoose' library in Node.js provides an object modeling tool for MongoDB, allowing you to define schemas, perform CRUD operations, and more with ease."
        },
        {
          "id": 19,
          "question": "What is the global object in Node.js ?",
          "optA": "window",
          "optB": "global",
          "optC": "document",
          "optD": "root",
          "answer": "global",
          "reason": "In Node.js, the global object is accessible throughout the application and provides global scope. It is analogous to the window object in browser-based JavaScript."
        },
        {
          "id": 20,
          "question": "What is an event loop in Node.js ?",
          "optA": "A mechanism for handling asynchronous operations",
          "optB": "A loop that iterates over an array of events",
          "optC": "A function that handles HTTP requests",
          "optD": "A data structure for storing events",
          "answer": "A mechanism for handling asynchronous operations",
          "reason": "The event loop in Node.js is a mechanism that handles asynchronous operations. It allows Node.js to perform non-blocking I/O operations and efficiently handle concurrent requests."
        },
        {
          "id": 21,
          "question": "What is the purpose of the 'async' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create and manipulate file paths",
          "optC": "To perform asynchronous operations",
          "optD": "To perform data validation",
          "answer": "To perform asynchronous operations",
          "reason": "The 'async' library in Node.js provides a set of utility functions for handling asynchronous operations, such as running functions in parallel, handling callbacks, and more."
        },
        {
          "id": 22,
          "question": "What is the role of the 'lodash' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create and manipulate file paths",
          "optC": "To perform data validation",
          "optD": "To provide utility functions for working with data",
          "answer": "To provide utility functions for working with data",
          "reason": "The 'lodash' library in Node.js provides a collection of utility functions that simplify working with arrays, objects, strings, and more, making data manipulation and transformation easier."
        },
        {
          "id": 23,
          "question": "What is the purpose of the 'request' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create and manipulate file paths",
          "optC": "To perform data validation",
          "optD": "To handle database operations",
          "answer": "To handle HTTP requests",
          "reason": "The 'request' library in Node.js is used to send HTTP requests to servers and handle the corresponding responses, making it easier to interact with web APIs and services."
        },
        {
          "id": 24,
          "question": "What is the purpose of the 'exports' object in Node.js ?",
          "optA": "To define variables",
          "optB": "To expose functions or objects for use in other modules",
          "optC": "To create HTTP servers",
          "optD": "To execute JavaScript code",
          "answer": "To expose functions or objects for use in other modules",
          "reason": "The 'exports' object in Node.js is used to expose functions or objects from a module for use in other modules. It allows you to encapsulate functionality and make it accessible to other parts of your application."
        },
        {
          "id": 25,
          "question": "What is the purpose of the 'jsonwebtoken' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To encode and decode JSON data",
          "optC": "To perform encryption and decryption",
          "optD": "To manage JSON Web Tokens (JWT)",
          "answer": "To manage JSON Web Tokens (JWT)",
          "reason": "The 'jsonwebtoken' library in Node.js provides functions for creating, signing, and verifying JSON Web Tokens (JWT), which are used for authentication and authorization purposes."
        },
        {
          "id": 26,
          "question": "What is the purpose of the 'crypto' module in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To perform encryption and decryption",
          "optC": "To manipulate strings",
          "optD": "To create and manipulate file paths",
          "answer": "To perform encryption and decryption",
          "reason": "The 'crypto' module in Node.js provides cryptographic functionality, including methods for creating hashes, generating secure random numbers, performing encryption and decryption, and more."
        },
        {
          "id": 27,
          "question": "Which module in Node.js is commonly used for working with file system operations ?",
          "optA": "http",
          "optB": "fs",
          "optC": "path",
          "optD": "url",
          "answer": "fs",
          "reason": "The 'fs' module in Node.js provides functionality for working with the file system. It allows you to read, write, and manipulate files and directories."
        },
        {
          "id": 28,
          "question": "What is the purpose of the 'dotenv' library in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create and manipulate file paths",
          "optC": "To perform data validation",
          "optD": "To load environment variables from a .env file",
          "answer": "To load environment variables from a .env file",
          "reason": "The 'dotenv' library in Node.js allows you to load environment variables from a .env file, making it easier to manage configuration options and sensitive information."
        },
        {
          "id": 29,
          "question": "What is a buffer in Node.js ?",
          "optA": "A temporary storage area for data",
          "optB": "A method for error handling",
          "optC": "A module for working with streams",
          "optD": "A data structure for storing events",
          "answer": "A temporary storage area for data",
          "reason": "A buffer in Node.js is a temporary storage area for data. It is used to store raw binary data and provides methods for manipulating and working with that data."
        },
        {
          "id": 30,
          "question": "What is a callback hell in Node.js ?",
          "optA": "A situation where callbacks are deeply nested",
          "optB": "A performance issue in Node.js",
          "optC": "A design pattern for asynchronous programming",
          "optD": "A feature of the event loop",
          "answer": "A situation where callbacks are deeply nested",
          "reason": "Callback hell in Node.js refers to a situation where callbacks are deeply nested, leading to code that is difficult to read and maintain. It can occur when handling multiple asynchronous operations."
        },
        {
          "id": 31,
          "question": "What is the purpose of the 'process' object in Node.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To create child processes",
          "optC": "To provide information about the current process",
          "optD": "To execute JavaScript code",
          "answer": "To provide information about the current process",
          "reason": "The 'process' object in Node.js provides information about the current process, such as command-line arguments, environment variables, and process-related events. It allows you to interact with the underlying operating system and control the behavior of your Node.js application."
        },
        {
          "id": 32,
          "question": "What is a stream in Node.js ?",
          "optA": "A module for working with files",
          "optB": "A data structure for storing data",
          "optC": "A software component for handling HTTP requests",
          "optD": "A sequence of data that is read or written asynchronously",
          "answer": "A sequence of data that is read or written asynchronously",
          "reason": "A stream in Node.js is a sequence of data that can be read from or written to asynchronously. It provides an efficient way to handle large amounts of data by processing it in smaller chunks rather than loading it entirely into memory."
        }
      ]
    },
    {
      "id": 12,
      "title": "Express JS",
      "logo": "expressjs.png",
      "description": "Express.js is a minimalist web application framework for Node.js. It simplifies building web servers and APIs with its flexibility and extensive middleware support.",
      "lastUpdated": "7th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Express.js ?",
          "optA": "A template engine",
          "optB": "A database management system",
          "optC": "A web application framework",
          "optD": "A version control system",
          "answer": "A web application framework",
          "reason": "Express.js is a web application framework for Node.js. It provides a set of features and tools for building robust and scalable web applications and APIs."
        },
        {
          "id": 2,
          "question": "What is the purpose of the 'app.use' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To define route handlers",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To set up middleware functions",
          "reason": "The 'app.use' method in Express.js is used to set up middleware functions. Middleware functions are functions that have access to the request and response objects, and can modify or augment them."
        },
        {
          "id": 3,
          "question": "Which method is used to handle an HTTP GET request in Express.js ?",
          "optA": "app.get()",
          "optB": "app.post()",
          "optC": "app.put()",
          "optD": "app.delete()",
          "answer": "app.get()",
          "reason": "The 'app.get()' method in Express.js is used to handle an HTTP GET request. It takes a path and a callback function as arguments, and the callback function is executed when a GET request is made to the specified path."
        },
        {
          "id": 4,
          "question": "What is the purpose of the 'req.params' object in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access request headers",
          "optD": "To access request cookies",
          "answer": "To access route parameters",
          "reason": "The 'req.params' object in Express.js is used to access route parameters. Route parameters are placeholders in the route path that can capture values specified in the URL."
        },
        {
          "id": 5,
          "question": "What is the purpose of the 'req.query' object in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access request headers",
          "optD": "To access request cookies",
          "answer": "To access query parameters",
          "reason": "The 'req.query' object in Express.js is used to access query parameters. Query parameters are key-value pairs in the URL that are used to provide additional data to the server."
        },
        {
          "id": 6,
          "question": "What is middleware in Express.js ?",
          "optA": "A database management system",
          "optB": "A template engine",
          "optC": "A function that has access to the request and response objects",
          "optD": "A version control system",
          "answer": "A function that has access to the request and response objects",
          "reason": "Middleware in Express.js is a function that has access to the request and response objects. It can perform tasks such as modifying the request or response,invoking the next middleware function, or terminating the request-response cycle."
        },
        {
          "id": 7,
          "question": "Which template engine is commonly used with Express.js ?",
          "optA": "Pug",
          "optB": "Handlebars",
          "optC": "EJS",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "Express.js supports multiple template engines, including Pug (formerly Jade), Handlebars, and EJS. Developers can choose the template engine that best fits their needs and preferences."
        },
        {
          "id": 8,
          "question": "What is the purpose of the 'res.render' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To define route handlers",
          "optC": "To send JSON data",
          "optD": "To render a view template",
          "answer": "To render a view template",
          "reason": "The 'res.render' method in Express.js is used to render a view template. It takes the name of the template file as an argument and combines it with the data to generate an HTML response."
        },
        {
          "id": 9,
          "question": "What is the purpose of the 'app.listen' method in Express.js ?",
          "optA": "To handle HTTP requests",
          "optB": "To start the Express.js application",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To start the Express.js application",
          "reason": "The 'app.listen' method in Express.js is used to start the Express.js application and listen for incoming HTTP requests. It takes a port number and an optional callback function as arguments."
        },
        {
          "id": 10,
          "question": "What is the purpose of the 'app.use(express.json())' middleware in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To parse JSON data in the request body",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To parse JSON data in the request body",
          "reason": "The 'app.use(express.json())' middleware in Express.js is used to parse JSON data in the request body. It automatically parses the request body and makes the parsed data available in the 'req.body' property."
        },
        {
          "id": 11,
          "question": "What is the purpose of the 'app.param' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To define route handlers",
          "optC": "To set up middleware functions",
          "optD": "To handle route parameters",
          "answer": "To handle route parameters",
          "reason": "The 'app.param' method in Express.js is used to handle route parameters. It allows you to define middleware functions that are executed when a specific route parameter is present in the URL."
        },
        {
          "id": 6,
          "question": "What is the purpose of the 'app.post' method in Express.js ?",
          "optA": "To define a route handler for GET requests",
          "optB": "To define a route handler for POST requests",
          "optC": "To define a route handler for PUT requests",
          "optD": "To define a route handler for DELETE requests",
          "answer": "To define a route handler for POST requests",
          "reason": "The 'app.post' method in Express.js is used to define a route handler for POST requests. It specifies a callback function that will be executed when a POST request with a matching route is received by the server."
        },
        {
          "id": 13,
          "question": "What is the purpose of the 'res.send' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To send JSON data",
          "optC": "To render a view template",
          "optD": "To send a response to the client",
          "answer": "To send a response to the client",
          "reason": "The 'res.send' method in Express.js is used to send a response to the client. It can send various types of data, including plain text, HTML, JSON, and more."
        },
        {
          "id": 14,
          "question": "What is the purpose of the 'res.redirect' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To send JSON data",
          "optC": "To redirect the client to a different URL",
          "optD": "To render a view template",
          "answer": "To redirect the client to a different URL",
          "reason": "The 'res.redirect' method in Express.js is used to redirect the client to a different URL. It sends a redirect response to the client with the specified URL, causing the client to make a new request to that URL."
        },
        {
          "id": 15,
          "question": "What is the purpose of the 'app.set' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To set up middleware functions",
          "optC": "To configure application settings",
          "optD": "To render HTML templates",
          "answer": "To configure application settings",
          "reason": "The 'app.set' method in Express.js is used to configure application settings. It allows you to set various properties and options for your Express.js application."
        },
        {
          "id": 16,
          "question": "What is the purpose of the 'res.status' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To send JSON data",
          "optC": "To render a view template",
          "optD": "To set the HTTP status code of the response",
          "answer": "To set the HTTP status code of the response",
          "reason": "The 'res.status' method in Express.js is used to set the HTTP status code of the response. It allows you to specify the status code that should be sent to the client."
        },
        {
          "id": 17,
          "question": "What is the purpose of 'express.static' middleware in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To define route handlers",
          "optC": "To serve static files",
          "optD": "To render HTML templates",
          "answer": "To serve static files",
          "reason": "The 'express.static' middleware in Express.js is used to serve static files, such as HTML, CSS, and JavaScript files. It can be used to serve files from a specific directory."
        },
        {
          "id": 18,
          "question": "How can you retrieve request parameters in Express.js ?",
          "optA": "Using the 'req.query' object",
          "optB": "Using the 'req.body' object",
          "optC": "Using the 'req.params' object",
          "optD": "All of the above",
          "answer": "All of the above",
          "reason": "In Express.js, you can retrieve request parameters using the 'req.query' object for query parameters, the 'req.body' object for request bodies, and the 'req.params' object for route parameters. All of these objects provide different ways to access and extract data from incoming requests."
        },
        {
          "id": 19,
          "question": "What is a route handler in Express.js ?",
          "optA": "A function that handles HTTP requests for a specific route",
          "optB": "A function that handles errors in the application",
          "optC": "A function that handles middleware errors",
          "optD": "A function that renders HTML templates",
          "answer": "A function that handles HTTP requests for a specific route",
          "reason": "A route handler in Express.js is a function that handles HTTP requests for a specific route. It is executed when a matching request is received and can perform actions such as accessing a database, processing data, and sending a response."
        },
        {
          "id": 20,
          "question": "What is the purpose of the 'req.cookies' object in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access request headers",
          "optD": "To access request cookies",
          "answer": "To access request cookies",
          "reason": "The 'req.cookies' object in Express.js is used to access request cookies. It provides access to the cookies sent by the client in the request."
        },
        {
          "id": 21,
          "question": "What is the purpose of the 'app.locals' object in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To set up middleware functions",
          "optC": "To store application-level data",
          "optD": "To render HTML templates",
          "answer": "To store application-level data",
          "reason": "The 'app.locals' object in Express.js is used to store application-level data. It allows you to store variables or data that are accessible across different routes and views within the same application."
        },
        {
          "id": 22,
          "question": "What is the purpose of the 'req.session' object in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access request headers",
          "optD": "To manage session data",
          "answer": "To manage session data",
          "reason": "The 'req.session' object in Express.js is used to manage session data. Sessions allow you to store data that is associated with a specific user or client across multiple requests."
        },
        {
          "id": 23,
          "question": "What is the purpose of the 'express.Router' class in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To define route handlers",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To define route handlers",
          "reason": "The 'express.Router' class in Express.js is used to define route handlers. It allows you to create modular and reusable route handlers that can be mounted as middleware."
        },
        {
          "id": 24,
          "question": "What is the purpose of the 'app.route' method in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To define route handlers",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To define route handlers",
          "reason": "The 'app.route' method in Express.js is used to define route handlers for a specific route. It allows you to chain multiple HTTP verb methods for a single route path."
        },
        {
          "id": 25,
          "question": "What is the purpose of the 'express.json' middleware in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To parse JSON data in the request body",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To parse JSON data in the request body",
          "reason": "The 'express.json' middleware in Express.js is used to parse JSON data in the request body. It automatically parses the request body and makes the parsed data available in the 'req.body' property."
        },
        {
          "id": 26,
          "question": "What is the purpose of the 'express.urlencoded' middleware in Express.js ?",
          "optA": "To handle HTTP GET requests",
          "optB": "To parse JSON data in the request body",
          "optC": "To set up middleware functions",
          "optD": "To parse URL-encoded data in the request body",
          "answer": "To parse URL-encoded data in the request body",
          "reason": "The 'express.urlencoded' middleware in Express.js is used to parse URL-encoded data in the request body. It automatically parses the request body and makes the parsed data available in the 'req.body' property."
        },
        {
          "id": 27,
          "question": "What is the purpose of the 'app.all' method in Express.js ?",
          "optA": "To handle all types of HTTP requests",
          "optB": "To define route handlers",
          "optC": "To set up middleware functions",
          "optD": "To render HTML templates",
          "answer": "To handle all types of HTTP requests",
          "reason": "The 'app.all' method in Express.js is used to handle all types of HTTP requests (GET, POST, PUT, DELETE, etc.) for a specific route. It is often used for global middleware or error handling."
        },
        {
          "id": 28,
          "question": "What is the purpose of the 'req.app' property in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access the Express.js application instance",
          "optD": "To access request cookies",
          "answer": "To access the Express.js application instance",
          "reason": "The 'req.app' property in Express.js is used to access the Express.js application instance. It provides access to the instance of the Express.js application handling the current request."
        },
        {
          "id": 29,
          "question": "What is the purpose of the 'req.route' property in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access request headers",
          "optD": "To access route information",
          "answer": "To access route information",
          "reason": "The 'req.route' property in Express.js is used to access route information. It provides information about the currently matched route, including the route path and any parameters."
        },
        {
          "id": 30,
          "question": "What is the purpose of the 'req.query' object in Express.js ?",
          "optA": "To access query parameters",
          "optB": "To access route parameters",
          "optC": "To access request headers",
          "optD": "To access request cookies",
          "answer": "To access query parameters",
          "reason": "The 'req.query' object in Express.js is used to access query parameters. Query parameters are key-value pairs that are appended to the URL and can be used to pass data to the server."
        }
      ]
    },
    {
      "id": 13,
      "title": "Java - I",
      "logo": "java.png",
      "description": "Java is a versatile programming language used for developing a wide range of applications. It offers strong support for object-oriented programming and is known for its robustness and scalability. Java is widely employed by companies across industries.",
      "lastUpdated": "7th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Java ?",
          "optA": "A programming language",
          "optB": "A database management system",
          "optC": "An operating system",
          "optD": "A web browser",
          "answer": "A programming language",
          "reason": "Java is a popular object-oriented programming language used to develop a wide range of applications, including desktop, web, and mobile applications."
        },
        {
          "id": 2,
          "question": "What is the purpose of the 'public' keyword in Java ?",
          "optA": "To declare a class",
          "optB": "To declare a variable",
          "optC": "To declare a method accessible to other classes",
          "optD": "To declare a constant",
          "answer": "To declare a method accessible to other classes",
          "reason": "The 'public' keyword in Java is an access modifier that allows a method to be accessed by other classes. It provides the highest level of visibility and allows the method to be called from any other class."
        },
        {
          "id": 3,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int x = 5;\n        System.out.println(x++);\n        System.out.println(x);\n    }\n}",
          "optA": "5\n6",
          "optB": "5\n5",
          "optC": "6\n5",
          "optD": "6\n6",
          "answer": "5\n6",
          "reason": "The 'x++' statement is a post-increment operation, which means that the value of 'x' is first printed (5) and then incremented to 6. Therefore, the output is:\n\n5\n6"
        },
        {
          "id": 4,
          "question": "What is the correct way to declare and initialize an array in Java ?",
          "optA": "int[] numbers = {1, 2, 3};",
          "optB": "int[] numbers = new int[3] {1, 2, 3};",
          "optC": "int numbers[] = {1, 2, 3};",
          "optD": "int numbers[] = new int[] {1, 2, 3};",
          "answer": "int[] numbers = {1, 2, 3};",
          "reason": "Option A is the correct way to declare and initialize an array in Java. It uses the curly braces to specify the initial values of the array elements without explicitly specifying the size of the array."
        },
        {
          "id": 5,
          "question": "Which of the following is a valid Java identifier ?",
          "optA": "_myVar",
          "optB": "123abc",
          "optC": "my-var",
          "optD": "class",
          "answer": "_myVar",
          "reason": "Option A, '_myVar', is a valid Java identifier. It starts with an underscore and can be followed by letters, digits, or underscores. Options B, C, and D are invalid identifiers due to the use of digits at the beginning, the hyphen character, and a reserved keyword, respectively."
        },
        {
          "id": 6,
          "question": "What is the purpose of the 'static' keyword in Java ?",
          "optA": "To declare a variable",
          "optB": "To declare a method",
          "optC": "To declare a class",
          "optD": "To declare a constant",
          "answer": "To declare a variable",
          "reason": "The 'static' keyword in Java can be used to declare a static variable. Static variables are associated with the class rather than instances of the class. They are shared among all instances of the class and can be accessed without creating an object of the class."
        },
        {
          "id": 7,
          "question": "Which of the following is true about the Java Virtual Machine (JVM) ?",
          "optA": "It is a physical machine that runs Java programs",
          "optB": "It is a software program that executes Java bytecode",
          "optC": "It is a programming language",
          "optD": "It is an integrated development environment (IDE)",
          "answer": "It is a software program that executes Java bytecode",
          "reason": "The JVM (Java Virtual Machine) is a software program that executes Java bytecode. It provides a runtime environment for Java applications, allowing them to be platform-independent and run on any device or operating system that has a compatible JVM."
        },
        {
          "id": 8,
          "question": "Which keyword is used to create an instance of a class in Java ?",
          "optA": "new",
          "optB": "instance",
          "optC": "create",
          "optD": "instantiate",
          "answer": "new",
          "reason": "The 'new' keyword is used to create an instance of a class in Java. It dynamically allocates memory for the object and initializes its state using the class's constructor."
        },
        {
          "id": 9,
          "question": "Which of the following is a primitive data type in Java ?",
          "optA": "String",
          "optB": "Integer",
          "optC": "Float",
          "optD": "Boolean",
          "answer": "Boolean",
          "reason": "Option D, 'Boolean', is a primitive data type in Java. Primitive data types are the most basic data types provided by the language. They include boolean, byte, short, int, long, float, double, and char."
        },
        {
          "id": 10,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        String text = \"Hello, World !\";\n        System.out.println(text.length());\n    }\n}",
          "optA": "12",
          "optB": "13",
          "optC": "14",
          "optD": "15",
          "answer": "14",
          "reason": "The 'length()' method in Java returns the number of characters in a string. In the given code, the string 'Hello, World !' has 14 characters, so the output is: 14"
        },
        {
          "id": 11,
          "question": "Which of the following is used to create an object with a copy of the values of another object in Java ?",
          "optA": "new",
          "optB": "clone",
          "optC": "copy",
          "optD": "copyOf",
          "answer": "clone",
          "reason": "The 'clone' method in Java is used to create an object with a copy of the values of another object. It performs a shallow copy of the object, meaning that the new object and the original object will share the same references to other objects unless a deep copy is implemented explicitly."
        },
        {
          "id": 12,
          "question": "What is the purpose of the 'break' statement in Java ?",
          "optA": "To exit a loop or switch statement",
          "optB": "To skip the current iteration of a loop",
          "optC": "To jump to a specific label in a loop or switch statement",
          "optD": "To terminate the program",
          "answer": "To exit a loop or switch statement",
          "reason": "The 'break' statement in Java is used to exit a loop or switch statement. When encountered, the 'break' statement terminates the execution of the innermost loop or switch statement and continues with the next statement after the loop or switch block."
        },
        {
          "id": 13,
          "question": "Which of the following is a valid way to declare a constant in Java ?",
          "optA": "final int MAX_VALUE = 100;",
          "optB": "int MAX_VALUE = 100;",
          "optC": "const int MAX_VALUE = 100;",
          "optD": "static int MAX_VALUE = 100;",
          "answer": "final int MAX_VALUE = 100;",
          "reason": "Option A is a valid way to declare a constant in Java. The 'final' keyword is used to indicate that the value of the variable cannot be changed once it is assigned. By convention, constant names are written in uppercase."
        },
        {
          "id": 14,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int x = 10;\n        if (x > 5) {\n            System.out.println(\"Hello\");\n        }\n        System.out.println(\"World\");\n    }\n}",
          "optA": "Hello\nWorld",
          "optB": "World\nHello",
          "optC": "Hello",
          "optD": "World",
          "answer": "Hello\nWorld",
          "reason": "The 'if' statement in Java is used to conditionally execute a block of code. In the given code, the condition 'x > 5' is true (as x is 10), so the code within the 'if' block is executed, resulting in the output:\n\nHello\nWorld"
        },
        {
          "id": 15,
          "question": "What is the purpose of the 'equals()' method in Java ?",
          "optA": "To compare two primitive data types",
          "optB": "To compare two objects for equality",
          "optC": "To concatenate strings",
          "optD": "To convert a string to lowercase",
          "answer": "To compare two objects for equality",
          "reason": "The 'equals()' method in Java is used to compare two objects for equality. It is commonly overridden in classes to provide custom comparison logic. By default, the 'equals()' method compares the memory references of objects, but it can be overridden to compare the contents of objects."
        },
        {
          "id": 16,
          "question": "Which of the following is used to read input from the user in Java ?",
          "optA": "System.in",
          "optB": "System.out",
          "optC": "System.err",
          "optD": "Scanner",
          "answer": "Scanner",
          "reason": "The 'Scanner' class in Java is used to read input from the user. It provides various methods to read different types of input, such as 'nextInt()' for reading an integer, 'nextLine()' for reading a line of text, and so on."
        },
        {
          "id": 17,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3};\n        System.out.println(numbers[3]);\n    }\n}",
          "optA": "Error",
          "optB": "ArrayIndexNotFound",
          "optC": "ArrayIndexOutOfBoundsException",
          "optD": "3",
          "answer": "ArrayIndexOutOfBoundsException",
          "reason": "In Java, arrays are zero-indexed, meaning that the first element has an index of 0. In the given code, 'numbers[3]' tries to access the fourth element of the 'numbers' array, which does not exist. This results in an 'ArrayIndexOutOfBoundsException' at runtime."
        },
        {
          "id": 18,
          "question": "Which of the following is true about constructors in Java ?",
          "optA": "They have a return type",
          "optB": "They are used to initialize objects",
          "optC": "They can be inherited",
          "optD": "They can be static",
          "answer": "They are used to initialize objects",
          "reason": "Constructors in Java are special methods that are used to initialize objects of a class. They have the same name as the class and do not have a return type. Constructors are automatically called when an object is created using the 'new' keyword."
        },
        {
          "id": 19,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int a = 5;\n        int b = 7;\n        int result = (a > b) ? a : b;\n        System.out.println(result);\n    }\n}",
          "optA": "5",
          "optB": "7",
          "optC": "12",
          "optD": "Compilation error",
          "answer": "7",
          "reason": "The ternary operator in Java (?:) is a shorthand way of writing an 'if-else' statement. In the given code, the condition 'a > b' evaluates to false, so the value of 'b' is assigned to the 'result' variable. Therefore, the output is:\n\n7"
        },
        {
          "id": 20,
          "question": "Which of the following is used to handle exceptions in Java ?",
          "optA": "try-catch",
          "optB": "if-else",
          "optC": "for loop",
          "optD": "switch statement",
          "answer": "try-catch",
          "reason": "The 'try-catch' statement in Java is used to handle exceptions. It allows you to catch and handle specific exceptions that may occur during the execution of a block of code. The 'try' block contains the code that may throw an exception, and the 'catch' block catches and handles the exception."
        },
        {
          "id": 21,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int x = 0;\n        while (x < 5) {\n            System.out.print(x + \" \");\n            x++;\n        }\n    }\n}",
          "optA": "0 1 2 3 4",
          "optB": "1 2 3 4 5",
          "optC": "0 1 2 3 4 5",
          "optD": "1 2 3 4",
          "answer": "0 1 2 3 4",
          "reason": "The given code uses a 'while' loop to iterate as long as the condition 'x < 5' is true. The variable 'x' starts from 0 and increments by 1 in each iteration. Therefore, the loop will execute five times, printing the values of 'x' from 0 to 4. The output is:\n\n0 1 2 3 4"
        },
        {
          "id": 22,
          "question": "Which of the following is used to convert a primitive data type to a string in Java ?",
          "optA": "toString()",
          "optB": "valueOf()",
          "optC": "parse()",
          "optD": "convert()",
          "answer": "valueOf()",
          "reason": "The 'valueOf()' method in Java is used to convert a primitive data type to a string. It is available for all primitive data types and can be called directly on the data type, such as 'Integer.valueOf()', 'Double.valueOf()', and so on."
        },
        {
          "id": 23,
          "question": "What is the purpose of the 'finally' block in Java exception handling ?",
          "optA": "To handle exceptions",
          "optB": "To specify the code to be executed if an exception occurs",
          "optC": "To clean up resources",
          "optD": "To control the flow of execution",
          "answer": "To clean up resources",
          "reason": "The 'finally' block in Java exception handling is used to specify code that should be executed regardless of whether an exception occurs or not. It is commonly used to release resources, such as closing a file or releasing a database connection, to ensure proper cleanup."
        },
        {
          "id": 24,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3};\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n    }\n}",
          "optA": "1 2 3",
          "optB": "1, 2, 3",
          "optC": "1\n2\n3",
          "optD": "Compilation error",
          "answer": "1 2 3",
          "reason": "The given code uses a 'for-each' loop to iterate over the elements of the 'numbers' array. In each iteration, the current element is assigned to the 'num' variable, and it is printed followed by a space. Therefore, the output is:\n\n1 2 3"
        },
        {
          "id": 25,
          "question": "Which of the following is used to convert a string to an integer in Java ?",
          "optA": "toString()",
          "optB": "valueOf()",
          "optC": "parse()",
          "optD": "convert()",
          "answer": "parse()",
          "reason": "The 'parse()' method in Java is used to convert a string to an integer. It is available for numeric data types, such as 'Integer.parseInt()', 'Double.parseDouble()', and so on. It parses the string representation of a number and returns the corresponding numeric value."
        },
        {
          "id": 26,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = x++;\n        System.out.println(x + \" \" + y);\n    }\n}",
          "optA": "5 5",
          "optB": "5 6",
          "optC": "6 5",
          "optD": "6 6",
          "answer": "6 5",
          "reason": "The '++' operator in Java is used to increment a variable by 1. In the given code, 'x++' is a post-increment operation, which means that the value of 'x' is first assigned to 'y' and then incremented. Therefore, 'y' will have the original value of 'x' (5), and 'x' will be incremented to 6. The output is:\n\n6 5"
        },
        {
          "id": 27,
          "question": "Which of the following is used to perform a bitwise AND operation in Java ?",
          "optA": "&",
          "optB": "&&",
          "optC": "|",
          "optD": "||",
          "answer": "&",
          "reason": "The '&' operator in Java is used to perform a bitwise AND operation. It compares the corresponding bits of two operands and produces a result in which each bit is set to 1 if both corresponding bits are 1; otherwise, the bit is set to 0."
        },
        {
          "id": 28,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        int x = 10;\n        int y = 20;\n        boolean result = (x != y);\n        System.out.println(result);\n    }\n}",
          "optA": "true",
          "optB": "false",
          "optC": "10",
          "optD": "Compilation error",
          "answer": "true",
          "reason": "The '!=' operator in Java is used to check if two values are not equal. In the given code, the values of 'x' and 'y' are different (10 and 20), so the condition 'x != y' is true. Therefore, the value of the 'result' variable is true, and it is printed as the output."
        },
        {
          "id": 29,
          "question": "Which of the following is true about the 'this' keyword in Java ?",
          "optA": "It refers to the current object",
          "optB": "It refers to the superclass object",
          "optC": "It refers to the subclass object",
          "optD": "It refers to a static variable",
          "answer": "It refers to the current object",
          "reason": "The 'this' keyword in Java is used to refer to the current object. It can be used to access instance variables and invoke methods of the current object. It is often used to disambiguate between instance variables and parameters with the same name."
        },
        {
          "id": 30,
          "question": "What is the output of the following Java code ?\n\npublic class Main {\n    public static void main(String[] args) {\n        String str = \"Hello, World!\";\n        System.out.println(str.length());\n    }\n}",
          "optA": "12",
          "optB": "13",
          "optC": "14",
          "optD": "Compilation error",
          "answer": "13",
          "reason": "The 'length()' method in Java is used to get the length (number of characters) of a string. In the given code, the string 'str' contains 13 characters, including spaces and punctuation. Therefore, the output is:\n\n13"
        }
      ]
    },
    {
      "id": 14,
      "title": "Java - II",
      "logo": "java.png",
      "description": "Java is a versatile programming language used for developing a wide range of applications. It offers strong support for object-oriented programming and is known for its robustness and scalability. Java is widely employed by companies across industries.",
      "lastUpdated": "8th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is method overloading in Java ?",
          "optA": "Defining multiple methods with the same name but different parameters",
          "optB": "Defining multiple methods with the same name and same parameters",
          "optC": "Defining multiple methods with different return types",
          "optD": "Defining multiple methods with different access modifiers",
          "answer": "Defining multiple methods with the same name but different parameters",
          "reason": "Method overloading in Java refers to defining multiple methods with the same name but different parameters. This allows methods to be invoked with different arguments, providing flexibility and code reuse. The compiler determines the appropriate method to invoke based on the number, types, and order of the arguments."
        },
        {
          "id": 2,
          "question": "What is the purpose of the 'public' access modifier in Java?",
          "optA": "To define a constant variable",
          "optB": "To perform arithmetic operations on floating-point numbers",
          "optC": "To specify that a method or variable can be accessed from any class",
          "optD": "To restrict access to a variable or method",
          "answer": "To specify that a method or variable can be accessed from any class",
          "reason": "The 'public' access modifier in Java is used to specify that a method or variable can be accessed from any class. It provides the highest level of accessibility, allowing the method or variable to be accessed from any other class or package."
        },
        {
          "id": 3,
          "question": "What is a static method in Java ?",
          "optA": "A method that can be accessed without creating an instance of the class",
          "optB": "A method that can only be accessed by other static methods",
          "optC": "A method that is automatically invoked when an object is created",
          "optD": "A method that is used to access private class members",
          "answer": "A method that can be accessed without creating an instance of the class",
          "reason": "A static method in Java is a method that can be accessed without creating an instance of the class. It belongs to the class itself rather than an instance of the class. Static methods are commonly used for utility functions or operations that do not depend on specific object state."
        },
        {
          "id": 4,
          "question": "What is method overriding in Java ?",
          "optA": "Defining multiple methods with the same name but different parameters",
          "optB": "Defining multiple methods with the same name and same parameters",
          "optC": "Defining multiple methods with different return types",
          "optD": "Defining a method in a subclass that is already defined in its superclass",
          "answer": "Defining a method in a subclass that is already defined in its superclass",
          "reason": "Method overriding in Java refers to defining a method in a subclass that is already defined in its superclass. The method in the subclass provides a specific implementation for the method defined in the superclass. This allows for polymorphic behavior, where the appropriate method is invoked based on the actual object type."
        },

        {
          "id": 5,
          "question": "What is the 'final' keyword used for in Java ?",
          "optA": "To define a constant variable",
          "optB": "To specify the starting point of program execution",
          "optC": "To restrict access to a variable or method",
          "optD": "To indicate the end of a loop",
          "answer": "To define a constant variable",
          "reason": "The 'final' keyword in Java is used to define a constant variable. Once a variable is declared as 'final', its value cannot be changed. It is commonly used to define constants that should not be modified during program execution."
        },
        {
          "id": 6,
          "question": "What is the purpose of the 'try-catch' block in Java ?",
          "optA": "To define a constant variable",
          "optB": "To perform arithmetic operations on floating-point numbers",
          "optC": "To handle and recover from exceptions",
          "optD": "To restrict access to a variable or method",
          "answer": "To handle and recover from exceptions",
          "reason": "The 'try-catch' block in Java is used to handle and recover from exceptions. Code that may potentially throw an exception is placed within the 'try' block, and if an exception occurs, it is caught and handled by the corresponding 'catch' block. This allows for graceful error handling and prevents program termination."
        },
        {
          "id": 7,
          "question": "What is the purpose of the 'super' keyword in Java ?",
          "optA": "To define a constant variable",
          "optB": "To perform arithmetic operations on floating-point numbers",
          "optC": "To restrict access to a variable or method",
          "optD": "To refer to the superclass or parent class",
          "answer": "To refer to the superclass or parent class",
          "reason": "The 'super' keyword in Java is used to refer to the superclass or parent class. It is commonly used to access superclass members, invoke superclass constructors, or override superclass methods. It allows for code reuse and provides a way to access and modify inherited members."
        },
        {
          "id": 8,
          "question": "What is the purpose of the 'private' access modifier in Java ?",
          "optA": "To define a constant variable",
          "optB": "To perform arithmetic operations on floating-point numbers",
          "optC": "To specify that a method or variable can be accessed only within the same class",
          "optD": "To restrict access to a variable or method",
          "answer": "To specify that a method or variable can be accessed only within the same class",
          "reason": "The 'private' access modifier in Java is used to specify that a method or variable can be accessed only within the same class. It provides the highest level of encapsulation, restricting access to the method or variable to only the class in which it is declared."
        },
        {
          "id": 9,
          "question": "What is the correct way to define a constant variable in Java ?",
          "optA": "final int x = 5;",
          "optB": "const int x = 5;",
          "optC": "static final int x = 5;",
          "optD": "final static int x = 5;",
          "answer": "final int x = 5;",
          "reason": "In Java, constants are typically defined using the 'final' keyword. The correct syntax for defining a constant variable is 'final int x = 5;', where 'x' is the variable name and '5' is the constant value."
        },
        {
          "id": 10,
          "question": "What is a core feature of Java ?",
          "optA": "Portability",
          "optB": "Speed",
          "optC": "Low-level programming",
          "optD": "Memory management",
          "answer": "Portability",
          "reason": "Java is known for its portability, which means that Java programs can run on any platform that has a Java Virtual Machine (JVM) installed."
        },
        {
          "id": 11,
          "question": "Which keyword is used to create an object in Java ?",
          "optA": "create",
          "optB": "new",
          "optC": "instance",
          "optD": "object",
          "answer": "new",
          "reason": "The 'new' keyword is used to create an object in Java. It is followed by the constructor of the class that is being instantiated. For example, 'ClassName objectName = new ClassName();' creates a new object of type 'ClassName'."
        },
        {
          "id": 12,
          "question": "What is the purpose of the 'this' keyword in Java ?",
          "optA": "To refer to the current object",
          "optB": "To create an instance of a class",
          "optC": "To define a constant variable",
          "optD": "To restrict access to a variable or method",
          "answer": "To refer to the current object",
          "reason": "The 'this' keyword in Java is used to refer to the current object. It can be used to access instance variables and methods within the class. It is often used to disambiguate between instance variables and parameters with the same name."
        },
        {
          "id": 13,
          "question": "What is the purpose of the 'abstract' keyword in Java ?",
          "optA": "To restrict access to a variable or method",
          "optB": "To define a constant variable",
          "optC": "To create a class-level variable or method",
          "optD": "To define a class that cannot be instantiated directly",
          "answer": "To define a class that cannot be instantiated directly",
          "reason": "The 'abstract' keyword in Java is used to define a class that cannot be instantiated directly. It serves as a blueprint for creating derived classes and must be extended by a subclass to be used. Abstract classes can contain abstract methods that must be implemented by the subclasses."
        },
        {
          "id": 14,
          "question": "What is the purpose of the 'instanceof' operator in Java ?",
          "optA": "To restrict access to a variable or method",
          "optB": "To create a class-level variable or method",
          "optC": "To define a constant variable",
          "optD": "To check the type of an object",
          "answer": "To check the type of an object",
          "reason": "The 'instanceof' operator in Java is used to check the type of an object. It returns 'true' if the object is an instance of the specified type or a subclass of the specified type, and 'false' otherwise. It is commonly used in conditional statements and type checking."
        },
        {
          "id": 15,
          "question": "Which keyword is used to define a method in Java ?",
          "optA": "function",
          "optB": "def",
          "optC": "method",
          "optD": "void",
          "answer": "void",
          "reason": "The 'void' keyword is used to define a method in Java. It specifies that the method does not return any value. The method definition consists of the return type, followed by the method name, parameters (if any), and the method body enclosed in curly braces."
        },
        {
          "id": 16,
          "question": "What is the purpose of the 'return' statement in a method ?",
          "optA": "To terminate the execution of the method",
          "optB": "To specify the return type of the method",
          "optC": "To define the parameters of the method",
          "optD": "To declare a local variable",
          "answer": "To terminate the execution of the method",
          "reason": "The 'return' statement is used to terminate the execution of a method and return a value (if the method has a return type). It can also be used to return control to the caller before the end of the method is reached. Once the 'return' statement is encountered, the method execution is immediately stopped."
        },
        {
          "id": 17,
          "question": "What is the syntax for creating an object of a class in Java ?",
          "optA": "new Object = MyClass();",
          "optB": "MyClass myObject = new MyClass();",
          "optC": "MyClass = new Object();",
          "optD": "MyClass myObject = MyClass();",
          "answer": "MyClass myObject = new MyClass();",
          "reason": "To create an object of a class in Java, you use the 'new' keyword followed by the class name and parentheses. This is followed by the assignment operator '=' and the keyword 'new' again, along with the class name and parentheses. Finally, you end the statement with a semicolon. The correct syntax is 'MyClass myObject = new MyClass();'."
        },
        {
          "id": 18,
          "question": "What is the default value of an uninitialized variable of type int in Java ?",
          "optA": "0",
          "optB": "1",
          "optC": "null",
          "optD": "false",
          "answer": "0",
          "reason": "The default value of an uninitialized variable of type int in Java is 0. When a variable is declared but not explicitly initialized, it is assigned its default value based on its data type. For integer types like int, the default value is 0."
        },
        {
          "id": 19,
          "question": "Which of the following is true about Java exceptions ?",
          "optA": "Exceptions are used for normal program flow",
          "optB": "All exceptions in Java are checked exceptions",
          "optC": "An exception must always be caught and handled by the programmer",
          "optD": "Exceptions can be used to handle unexpected errors and exceptional conditions",
          "answer": "Exceptions can be used to handle unexpected errors and exceptional conditions",
          "reason": "In Java, exceptions are used to handle unexpected errors and exceptional conditions that can occur during the execution of a program. Exceptions allow for the separation of normal program flow from error handling. While checked exceptions must be declared and handled, there are also unchecked exceptions that do not require explicit handling."
        },
        {
          "id": 20,
          "question": "Which of the following is not a valid access modifier in Java ?",
          "optA": "public",
          "optB": "private",
          "optC": "protected",
          "optD": "internal",
          "answer": "internal",
          "reason": "The 'internal' keyword is not a valid access modifier in Java. The correct access modifiers in Java are 'public', 'private', and 'protected'. The 'internal' keyword is specific to other programming languages like C# and is not recognized in Java."
        },
        {
          "id": 21,
          "question": "What is a Java package ?",
          "optA": "A collection of classes and interfaces",
          "optB": "A software development kit",
          "optC": "A version control system",
          "optD": "A database management system",
          "answer": "A collection of classes and interfaces",
          "reason": "A Java package is a way to organize classes and interfaces into a hierarchical structure. It provides a namespace for the classes, preventing naming conflicts. Packages help in modularizing code, improving code reusability, and facilitating the management of large codebases."
        },
        {
          "id": 22,
          "question": "What is a Java constructor ?",
          "optA": "A method that is automatically called when an object is created",
          "optB": "A method that is used to deallocate resources",
          "optC": "A method that is used to handle exceptions",
          "optD": "A method that is used to define constants",
          "answer": "A method that is automatically called when an object is created",
          "reason": "A Java constructor is a special method that is automatically called when an object is created. It is used to initialize the object and set its initial state. Constructors have the same name as the class and do not have a return type. They can take parameters to initialize the object with specific values."
        },
        {
          "id": 23,
          "question": "What is method chaining in Java ?",
          "optA": "Calling multiple methods on an object in a single line by returning the object itself from each method",
          "optB": "Calling static methods on a class",
          "optC": "Calling methods on a superclass",
          "optD": "Calling methods with the same name but different parameters",
          "answer": "Calling multiple methods on an object in a single line by returning the object itself from each method",
          "reason": "Method chaining in Java refers to calling multiple methods on an object in a single line by returning the object itself from each method. This is achieved by having each method return the current object ('this') after performing its operations. Method chaining can result in more concise and readable code."
        },
        {
          "id": 24,
          "question": "Which of the following is true about interfaces in Java?",
          "optA": "Interfaces can be instantiated using the 'new' keyword",
          "optB": "A class can implement multiple interfaces",
          "optC": "Interfaces can have constructors",
          "optD": "An interface can extend multiple interfaces",
          "answer": "A class can implement multiple interfaces",
          "reason": "In Java, a class can implement multiple interfaces. This allows a class to inherit behavior from multiple sources by implementing the methods defined in the interfaces it implements. However, interfaces themselves cannot be instantiated using the 'new' keyword, and they cannot have constructors. Interfaces can extend other interfaces, but a class can implement multiple interfaces regardless of whether they are related through inheritance."
        },
        {
          "id": 25,
          "question": "What is a Java interface ?",
          "optA": "A collection of classes and interfaces",
          "optB": "A software development methodology",
          "optC": "A version control system",
          "optD": "A blueprint of a class that defines a set of methods that implementing classes must implement",
          "answer": "A blueprint of a class that defines a set of methods that implementing classes must implement",
          "reason": "A Java interface is a blueprint of a class that defines a set of methods that implementing classes must implement. An interface can also include constant variables. By implementing an interface, a class guarantees that it will provide the defined methods. Interfaces support the concept of multiple inheritance in Java."
        },
        {
          "id": 26,
          "question": "What is the difference between a class and an interface in Java ?",
          "optA": "A class can have both method definitions and method implementations, while an interface can only have method definitions.",
          "optB": "A class can have multiple superclasses, while an interface can only extend one interface.",
          "optC": "A class can be instantiated to create objects, while an interface cannot be instantiated.",
          "optD": "A class can implement multiple interfaces, while an interface can only extend one interface.",
          "answer": "A class can be instantiated to create objects, while an interface cannot be instantiated.",
          "reason": "In Java, a class is a blueprint for creating objects. It can have both method definitions and method implementations. A class can be instantiated using the 'new' keyword to create objects. Whereas, an interface is a blueprint of a class that defines a set of methods that implementing classes must implement. An interface can only have method definitions, and it cannot be instantiated. A class can implement multiple interfaces, but it can only extend one superclass."
        },
        {
          "id": 27,
          "question": "What is the Java Virtual Machine (JVM)?",
          "optA": "A compiler that translates Java source code into bytecode",
          "optB": "A runtime environment that executes Java bytecode",
          "optC": "A development tool for debugging Java programs",
          "optD": "A database management system for Java applications",
          "answer": "A runtime environment that executes Java bytecode",
          "reason": "The Java Virtual Machine (JVM) is a runtime environment that executes Java bytecode. It provides the necessary infrastructure to run Java programs on different platforms without requiring recompilation. The JVM handles memory management, bytecode interpretation, and other runtime tasks."
        },
        {
          "id": 28,
          "question": "What is the difference between the Java Virtual Machine (JVM) and the Java Development Kit (JDK)?",
          "optA": "The JVM is used to compile Java source code, while the JDK is used to execute Java bytecode.",
          "optB": "The JVM is a runtime environment that executes Java bytecode, while the JDK is a software development kit that includes the tools needed to develop and run Java applications.",
          "optC": "The JVM is a development tool for debugging Java programs, while the JDK is a runtime environment that executes Java bytecode.",
          "optD": "The JVM is a database management system for Java applications, while the JDK is a software development methodology.",
          "answer": "The JVM is a runtime environment that executes Java bytecode, while the JDK is a software development kit that includes the tools needed to develop and run Java applications.",
          "reason": "The Java Virtual Machine (JVM) is a runtime environment that executes Java bytecode. It provides the necessary infrastructure to run Java programs on different platforms without requiring recompilation. Whereas, the Java Development Kit (JDK) is a software development kit that includes the tools needed to develop, compile, and run Java applications. The JDK includes the JVM, as well as compilers, debuggers, and other development tools."
        },
        {
          "id": 29,
          "question": "What is the purpose of the 'if' statement in Java?",
          "optA": "To declare a loop",
          "optB": "To perform type casting",
          "optC": "To control the flow of execution based on a condition",
          "optD": "To define a method",
          "answer": "To control the flow of execution based on a condition",
          "reason": "The 'if' statement in Java is used to control the flow of execution based on a condition. It allows a block of code to be executed only if a certain condition is true. If the condition is false, the code block is skipped."
        },
        {
          "id": 30,
          "question": "What is a variable in Java?",
          "optA": "A reserved word in Java",
          "optB": "A named memory location used to store data",
          "optC": "A data type in Java",
          "optD": "A class in Java",
          "answer": "A named memory location used to store data",
          "reason": "In Java, a variable is a named memory location used to store data. It is used to hold values that can be accessed and manipulated in a program. Variables are declared with a specific data type and can be assigned different values during the execution of the program."
        }
      ]
    },
    {
      "id": 15,
      "title": "Angular - I",
      "logo": "angular.png",
      "description": "Angular is a powerful web application framework for building dynamic and scalable single-page applications. It offers robust features and enjoys wide adoption among developers.",
      "lastUpdated": "7th June 2023",
      "body": []
    }
  ],
  "dsa": [
    {
      "id": 1,
      "title": "Easy",
      "description": "Best suited for beginners.",

      "body": [
        {
          "id": 1,
          "name": "HIGHER PRIME",
          "question": "Write a function that takes a natural number 'n' as an arguement and returns the number itself if it is a prime number. If not, return the next higher prime number.",

          "input1": "n = 7",
          "output1": "7",

          "input2": "n = 14",
          "output2": "17",

          "detailedQuestion": "",
          "answer": "function higherPrime(n) {\n  count = 0;\n  for (i = 1; i <= n; i++) {\n    if (n % i == 0) {\n      count++;\n    }\n  }\n  if (count == 2) {\n    return n;\n  } else {\n    return higherPrime(n + 1);\n  }\n}\n\nconsole.log(higherPrime(7)); // 7\nconsole.log(higherPrime(14)); // 17"
        },
        {
          "id": 2,
          "name": "LONGEST STRING",
          "question": "Write a function that takes an array as arguement and returns the longest string amongst the elements.",

          "input1": "arr = ['bit', 'coin']",
          "output1": "'coin'",

          "input2": "arr = ['jon', 'snow']",
          "output2": "'snow'",

          "detailedQuestion": "",
          "answer": "function longStr(arr) {\n  let result = '';\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i].length > result.length) {\n      result = arr[i];\n    }\n  }\n  return console.log(result);\n}\n\nlongStr(['bit', 'coin']); // coin\nlongStr(['jon', 'snow']); // snow"
        },
        {
          "id": 3,
          "name": "POWER OF 2",
          "question": "Write a function that takes a natural number 'n' as an arguement. Determine if the number is a power of 2 or not. Return true/false accordingly.",

          "input1": "n = 16",
          "output1": "true",

          "input2": "n = 10",
          "output2": "false",
          "answer": "function powerOf2(n) {\n  if (n % 2 == 0) {\n    for (i = 1; i <= n; i++) {\n      if (n == 2 ** i) {\n        return true;\n      }\n    }\n    return false;\n  } else return false;\n}\n\nconsole.log(powerOf2(16)); // true\nconsole.log(powerOf2(10)); // false"
        },
        {
          "id": 4,
          "name": "LENGTH OF LAST WORD",
          "question": "Given a string 's' consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.",

          "input1": "s = 'Hey JavaScript  '",
          "output1": "10",

          "input2": "s = 'Ask padhAI' ",
          "output2": "6",
          "answer": "function lengthOfLast(s) {\n\n  // Remove leading & trailing spaces\n  let trimStr = s.trim();\n\n  // Split string into an array\n  let arr = trimStr.split(' ');\n  // Get the last word\n  let result = arr[arr.length - 1];\n\n  return console.log(result.length);\n}\n\nlengthOfLast('Hey JavaScript  '); // 10\nlengthOfLast('Ask padhAI'); // 6"
        },
        {
          "id": 5,
          "name": "STACK REVERSE",
          "question": "Write a function to reverse a string using stack. The function will take a string as an arguement and returns the reversed string.\nDo not use any in-built methods like .reverse(), .split(), .join()",

          "input1": "str = 'pikachu'",
          "output1": "'uhcakip'",

          "input2": "arr = 'ash'",
          "output2": "'hsa'",

          "detailedQuestion": "",
          "answer": "function revStr(str) {\n  let stack = [];\n  let result = '';\n\n  // turn string into stack\n  for (i = 0; i < str.length; i++) {\n    stack[i] = str[i];\n  }\n\n  let length = stack.length;\n\n  for (i = length - 1; i >= 0; i--) {\n    // add every i'th element to result\n    result = result + stack[i];\n\n    // pop last element\n    length = i;\n  }\n\n  return console.log(result);\n}\n\nrevStr('pikachu'); // uhcakip\nrevStr('ash'); // hsa"
        },
        {
          "id": 6,
          "name": "REMOVE DUPLICATES",
          "question": "Write a function that takes 2 arrays as arguements. Return a merged array with all the duplicate elements removed",

          "input1": "arr1 = [3, 1, 4] \u200B \u200B arr2 = [2, 7, 3]",
          "output1": "[ 1, 2, 3, 4, 7 ]",

          "input2": "arr1 = [9, 22, 2] \u200B \u200B arr2 = [22, 6, 9]",
          "output2": "[ 2, 6, 9, 22 ]",

          "detailedQuestion": "",
          "answer": "function rmvDupes(arr1, arr2) \n  let merge = [...arr1, ...arr2];\n  merge.sort((a, b) => a - b);\n\n  let result = [];\n  for (i = 0; i < merge.length; i++) \n    if (merge[i] !== merge[i + 1]) \n      result.push(merge[i]);\n  return console.log(result);\n\nrmvDupes([3, 1, 4], [2, 7, 3]);\nrmvDupes([9, 22, 2], [22, 6, 9]);"
        },
        {
          "id": 7,
          "name": "THE LCM",
          "question": "Write a function that takes 2 numbers as arguements. Return the LCM ( Lowest Common Multiple ) of these numbers.",

          "input1": "n1 = 3 \u200B \u200B n2 = 4",
          "output1": "12",

          "input2": "n1 = 17 \u200B \u200B n2 = 8",
          "output2": "136",

          "detailedQuestion": "",
          "answer": "function theLcm(n1, n2) \n  for (i = 1; i <= n2; i++) \n    let result = n1 * i;\n    if (result % n2 == 0) \n      return console.log(result);\n\ntheLcm(3, 4); // 12\ntheLcm(17, 8) // 136;"
        },
        {
          "id": 8,
          "name": "COUNT CONSONANTS",
          "question": "Write a function that takes a string as an arguement and returns the number of consonants in it.",

          "input1": "str = 'padhAI'",
          "output1": "3",

          "input2": "str = 'padhakoo'",
          "output2": "4",

          "answer": "function consonant(str) {\n  let count = 0;\n  str = str.toLowerCase();\n  for (i = 0; i < str.length; i++) {\n    if (str[i] == 'a') {\n      count++;\n    }\n    if (str[i] == 'e') {\n      count++;\n    }\n    if (str[i] == 'i') {\n      count++;\n    }\n    if (str[i] == 'o') {\n      count++;\n    }\n    if (str[i] == 'u') {\n      count++;\n    }\n  }\n  let result = str.length - count;\n  return console.log(result);\n}\n\nconsonant('padhakoo'); // 4\nconsonant('padhAI'); // 3"
        },
        {
          "id": 9,
          "name": "TWO SUM",
          "question": "Write a function that takes an array and an integer as parameters. Find a pair from the array elements such that their sum equals to the given integer. Return the indices of those array elements.",

          "input1": "arr = [2, 7, 11, 15] \u200B \u200B n = 9",
          "output1": "[ 0, 1 ]",

          "input2": "arr = [25, 19, 8, 31] \u200B \u200B n = 27",
          "output2": "[ 1, 2 ]",

          "answer": "function twoSum(arr, n) {\n  let result = [];\n\n  for (i = 0; i < arr.length; i++) {\n    for (j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == n) {\n        result.push(i, j);\n      }\n    }\n  }\n  return console.log(result);\n};\n\ntwoSum([2, 7, 11, 15], 9); // [ 0, 1 ]\ntwoSum([25, 19, 8, 31], 27); //  [1, 2 ]"
        },
        {
          "id": 10,
          "name": "INSERT STRING",
          "question": "Write a function that takes 2 strings: 'str1' and 'str2' as arguements. Starting from the end of str1, insert str2 in str1 after every 3rd character of str1. Return the resultant string.",

          "input1": "str1 = '1234567' \u200B \u200B str2 = '.' ",
          "output1": "1.234.567",

          "input2": "str1 = 'avengers' \u200B \u200B str2 = '*' ",
          "output2": "av*eng*ers",

          "detailedQuestion": "",
          "answer": "function insertStr(str1, str2) \n  let arr = [...str1];\n  arr.reverse();\n\n  let newArr = [];\n  newArr.push(arr[0]);\n\n  for (i = 1; i < arr.length; i++) \n    if (i % 3 != 0) \n      newArr.push(arr[i]);\n    else \n      newArr.push(str2);\n      newArr.push(arr[i]);\n  return newArr.reverse().join('');\n\nconsole.log(insertStr('1234567', '.'));\nconsole.log(insertStr('avengers', '*'));"
        },
        {
          "id": 11,
          "name": "ROMAN TO INTEGER",
          "question": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9. \nX can be placed before L (50) and C (100) to make 40 and 90. \nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.",

          "input1": "n = IX",
          "output1": "9",

          "input2": "n = MCMXCIV",
          "output2": "1994",

          "answer": "function romanToInteger(n) {\n  const romanSymbols = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n    IV: 4,\n    IX: 9,\n    XL: 40,\n    XC: 90,\n    CD: 400,\n    CM: 900,\n  };\n\n  let result = 0;\n\n  n.replace(/IV|IX|XL|XC|CD|CM|I|V|X|L|C|D|M/g,\n    (match) => { result += romanSymbols[match];\n    }\n  );\n\n  return console.log(result);\n}\n\nromanToInteger('III'); // 3\nromanToInteger('IX'); // 9\nromanToInteger('LVIII'); // 58\nromanToInteger('MCMXCIV'); // 1994"
        },
        {
          "id": 12,
          "name": "LONGEST COMMON PREFIX",
          "question": "Given an array of strings, find the Longest Common Prefix amongst the strings.",

          "input1": "arr = ['padhakoo', 'padhAI', 'paradox']",
          "output1": "pa",

          "input2": "arr = ['java', 'javascript', 'javelin']",
          "output2": "jav",
          "answer": "function longestCommonPrefix(arr) {\n  // Return nothing if arr is empty\n  if (arr.length == 0) return '';\n\n  // Loop through the letters of the first string\n  for (let i = 0; i <= arr[0].length; i++) {\n    \n    // Loop through the other strings starting from 2nd string\n    for (let j = 1; j < arr.length; j++) {\n        \n      // Check if this character is also present in the same position of each string\n      if (arr[0][i] !== arr[j][i]) {\n        \n        // If not, return the string up to and including the previous character\n        return arr[0].slice(0, i);\n      }\n    }\n  }\n\n  return arr[0];\n}\n\nconsole.log(longestCommonPrefix(['padhakoo', 'padhAI', 'paradox']));\nconsole.log(longestCommonPrefix(['java', 'javascript', 'javelin']));"
        },
        {
          "id": 13,
          "name": "MAX PRODUCT",
          "question": "Given an array of strings. Return the maximum value of 'length(word[i]) * length(word[j])' where the two words do not share common letters. If no such two words exist, return '0'.",

          "input1": "arr = ['abcw', 'foo', 'bar', 'xytf', 'abcdef']",
          "output1": "16",

          "input2": "arr = ['az', 'bc', 'aca', 'abaa']",
          "output2": "0",

          "answer": ""
        },
        {
          "id": 14,
          "name": "",
          "question": "",

          "input1": "",
          "output1": "",

          "input2": "",
          "output2": "",

          "answer": ""
        },
        {
          "id": 15,
          "name": "",
          "question": "",

          "input1": "",
          "output1": "",

          "input2": "",
          "output2": "",

          "answer": ""
        }
      ]
    }
  ],
  "interview": [
    {
      "id": 1,
      "title": "JavaScript",
      "logo": "javascript.png",
      "description": "JavaScript is a versatile language for building interactive web applications. It runs in the browser and enables real-time updates and user interactivity.",
      "lastUpdated": "5th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What are the different kind of data-types available in JavaScript ?",
          "answer": "Here are the different data types in JavaScript classified based on whether they are primitive or non-primitive:\nPrimitive Data Types:\n-Number\n-String\n-Boolean\n-Null\n-Undefined\n-Symbol\n\nNon-Primitive Data Types:\n-Object\n-Array\n-Function\n-Date\n-RegExp\n\nThe primitive data types are atomic and immutable, meaning they are directly assigned and stored by value. On the other hand, non-primitive data types are mutable and are stored by reference."
        },
        {
          "id": 2,
          "question": "What is the difference between 'store by value' and 'store by reference' ?",
          "answer": "Store by value:\nPrimitive data types such as numbers, strings, booleans, null, undefined, and symbols are stored by value. When a variable of a primitive type is assigned to another variable or passed as an argument to a function, a copy of the value is created and stored in the new variable. Any changes made to one variable do not affect the other variable because they hold independent copies of the value.\n\nExample:\nlet a = 5;\nlet b = a;\nb = 10;\nconsole.log(a); // Output: 5\nconsole.log(b); // Output: 10\n\nStore by reference:\nObjects, arrays, and functions are stored by reference.When an object is assigned to a variable or passed as an argument, the variable holds a reference or a pointer to the memory location where the object is stored. So, if we assign the same object to multiple variables or pass it to functions, all those variables or functions will refer to the same object in memory. Therefore, modifying the object through one variable will affect all the references to that object.\n\nExample:\nlet arr1 = [1, 2, 3];\nlet arr2 = arr1;\narr2.push(4);\nconsole.log(arr1); // Output: [1, 2, 3, 4]\nconsole.log(arr2); // Output: [1, 2, 3, 4]\n\nIn summary, storing by value creates independent copies, while storing by reference creates references to the same data in memory, leading to shared changes."
        },
        {
          "id": 3,
          "question": "What are closures in JavaScript ?",
          "answer": "A closure in JavaScript is a combination of a function and the lexical environment within which that function was declared. It allows a function to access variables from its outer scope even after the outer function has finished executing. In other words, a closure preserves the scope chain of the enclosing function at the time of its creation.\n\nExample:\n\nfunction outerFunction() {\n  const outerVariable = 'I am from the outer function';\n\n  function innerFunction() {\n    console.log(outerVariable); // Accessing outerVariable from the outer scope\n  }\n\n  return innerFunction;\n}\n\nconst closureExample = outerFunction();\nclosureExample(); // Output: 'I am from the outer function'\n\nIn this example, the outerFunction defines a variable outerVariable and a nested function innerFunction. The innerFunction has access to the outerVariable even after the outerFunction has finished executing. When outerFunction is called and its returned innerFunction is assigned to closureExample, it forms a closure. The closureExample can still access and use the outerVariable defined in its enclosing scope.\n\nClosures are powerful in JavaScript as they enable data encapsulation, private variables, and the concept of function factories."
        },
        {
          "id": 4,
          "question": "What is implicit type conversion in JavaScript ?",
          "answer": "Implicit type conversion in JavaScript, also known as type coercion, refers to the automatic conversion of one data type to another by the JavaScript engine. It occurs when an operator or function expects operands of a certain type, but receives operands of a different type. JavaScript performs implicit type conversion to make the operation possible.\n\nExample:\n\nlet num = 10;\nlet str = '5';\n\nlet result = num + str;\n\nconsole.log(result); // Output: '105'\n\nIn this example, we have a numeric variable num with a value of 10, and a string variable str with a value of '5'. When we use the + operator to concatenate num and str, JavaScript performs implicit type conversion. It converts the numeric value of num to a string and concatenates it with str. The result is the string '105', obtained by concatenating the converted num with str.\n\nImplicit type conversion can occur in various situations, such as when performing arithmetic operations between different types, comparing values of different types, or using logical operators on non-boolean values. JavaScript automatically converts values to a common type to perform the operation."
        },
        {
          "id": 5,
          "question": "What is the difference between \"null\" and \"undefined\" in JavaScript ?",
          "answer": "In JavaScript, both \"null\" and \"undefined\" represent the absence of a value, but they are used in different contexts.\n\nThe \"null\" value is an assignment value that indicates the intentional absence of any object value. It is a primitive value that can be assigned to a variable to explicitly indicate that it has no value or is empty. For example:\n\n```javascript\nlet myVariable = null;\nconsole.log(myVariable);  // Output: null\n```\n\nOn the other hand, \"undefined\" is a built-in value in JavaScript that indicates the absence of a value or uninitialized variable. It is automatically assigned to variables that have been declared but not yet assigned a value or to function parameters that have not been provided with an argument. For example:\n\n```javascript\nlet myVariable;\nconsole.log(myVariable);  // Output: undefined\n\nfunction myFunction(parameter) {\n  console.log(parameter);  // Output: undefined\n}\n\nmyFunction();\n```\n\nTo summarize, \"null\" is an intentional absence of value, while \"undefined\" typically indicates an unintentional absence or lack of initialization."
        },
        {
          "id": 6,
          "question": "Explain briefly the core difference between \"let\", \"const\", and \"var\" in JavaScript.",
          "answer": "In JavaScript, \"let\", \"const\", and \"var\" are used to declare variables, but they have some differences in terms of scope and reassignment.\n\n1. \"var\": Variables declared with \"var\" have function scope or global scope. They can be redeclared and reassigned within their scope. \"var\" variables are hoisted to the top of their scope during the execution phase. For example:\n\n```javascript\nfunction example() {\n  var x = 10;\n  if (true) {\n    var x = 20;\n    console.log(x); // Output: 20\n  }\n  console.log(x); // Output: 20\n}\n```\n\n2. \"let\": Variables declared with \"let\" have block scope. They can be reassigned within their scope but cannot be redeclared in the same scope. \"let\" variables are not hoisted. For example:\n\n```javascript\nfunction example() {\n  let x = 10;\n  if (true) {\n    let x = 20;\n    console.log(x); // Output: 20\n  }\n  console.log(x); // Output: 10\n}\n```\n\n3. \"const\": Variables declared with \"const\" also have block scope like \"let\". However, they are used for values that are meant to remain constant and cannot be reassigned. \"const\" variables must be assigned a value at the time of declaration and cannot be redeclared or reassigned. For example:\n\n```javascript\nfunction example() {\n  const x = 10;\n  if (true) {\n    const x = 20;\n    console.log(x); // Output: 20\n  }\n  console.log(x); // Output: 10\n}\n```\n\nIt is generally recommended to use \"let\" and \"const\" over \"var\" as they provide better scoping rules and help in preventing unintended bugs and issues related to variable reassignment."
        },
        {
          "id": 7,
          "question": "What is hoisting in JavaScript and how does it work ?",
          "answer": "Hoisting is a JavaScript behavior where variable and function declarations are moved to the top of their respective scopes during the compilation phase. This allows variables and functions to be used before they are actually declared in the code.\n\nHere's an example to illustrate hoisting:\n```javascript\nconsole.log(x); // Output: undefined\nvar x = 10;\nconsole.log(x); // Output: 10\n``` \n\nIn the example above, even though the variable `x` is logged before its declaration, it doesn't result in an error. This is because the variable declaration `var x` gets hoisted to the top of its scope. However, only the declaration is hoisted, not the initialization. So, the first `console.log(x)` prints `undefined` because `x` is declared but not yet assigned a value. The second `console.log(x)` prints `10` after the variable `x` is assigned the value `10`."
        },
        {
          "id": 8,
          "question": "What is the difference between synchronous and asynchronous programming in JavaScript ?",
          "answer": "Synchronous programming executes tasks in a sequential manner, where each task must complete before moving on to the next one.\nAsynchronous programming, on the other hand, allows tasks to be executed independently and out of order, without blocking the execution of other tasks. Asynchronous programming is commonly used for tasks like fetching data from a server or handling user input."
        },
        {
          "id": 9,
          "question": "What is the purpose of the \"this\" keyword in JavaScript? Explain with an example.",
          "answer": "The \"this\" keyword in JavaScript is used to refer to the object that the function is being executed within. It allows access to the properties and methods of the current object. The value of \"this\" is determined by how the function is called.\n\nHere's an example to illustrate the use of the \"this\" keyword:\n\n```javascript\nvar person = {\n  name: 'John',\n  greet: function() {\n    console.log('Hello, ' + this.name + '!');\n  }\n};\n\nperson.greet(); // Output: Hello, John!\n``` \n\nIn the example above, the object `person` has a property `name` and a method `greet`. Inside the `greet` method, `this.name` accesses the `name` property of the current object (`person`). When `person.greet()` is called, it prints 'Hello, John!' because `this` refers to the `person` object."
        },
        {
          "id": 10,
          "question": "Explain the concept of event delegation in JavaScript.",
          "answer": "Event delegation is a technique in which a single event listener is attached to a parent element, instead of attaching multiple event listeners to individual child elements. The parent element then handles events on behalf of its child elements.\nThis approach improves performance and allows dynamically added or removed child elements to automatically be included in the event handling."
        },
        {
          "id": 11,
          "question": "What is the purpose of the \"use strict\" directive in JavaScript ?",
          "answer": "The \"use strict\" directive is used to enable strict mode in JavaScript. It enforces stricter rules for code execution, helps avoid common mistakes, and improves code quality. When \"use strict\" is added at the beginning of a script or a function, certain actions are no longer allowed, and certain behaviors are changed."
        },
        {
          "id": 12,
          "question": "Explain the concept of event bubbling and event capturing in JavaScript.",
          "answer": "Event bubbling and event capturing are two different mechanisms to handle events in the DOM. \nEvent bubbling is the default behavior where an event is first triggered on the innermost element and then propagates up the DOM hierarchy through its ancestors.\nEvent capturing, on the other hand, allows capturing the event during the capturing phase, where the event is triggered on the outermost element first and then propagates down the DOM hierarchy towards the target element.\nBoth mechanisms provide flexibility in handling events and can be used based on the desired behavior."
        },
        {
          "id": 13,
          "question": "What is the purpose of the \"bind()\" method in JavaScript ?",
          "answer": "The \"bind()\" method is used to create a new function with a specific \"this\" value and, optionally, pre-filled arguments. It allows explicitly setting the value of \"this\" within a function, regardless of how the function is called. \"bind()\" returns a new function that, when executed, has its \"this\" value fixed to the provided value."
        },
        {
          "id": 14,
          "question": "How does JavaScript handle asynchronous operations ?\nExplain the concepts of callbacks, promises, and async/await.",
          "answer": "JavaScript uses various techniques to handle asynchronous operations.\nCallbacks are a traditional approach where a function is passed as an argument to another function to be executed once the asynchronous operation is complete.\nPromises provide a more structured way to handle asynchronous code and allow chaining multiple operations.\nAsync/await is a syntax introduced in ECMAScript 2017 (ES8) that simplifies working with promises by using async functions and the \"await\" keyword to wait for the resolution of a promise."
        },
        {
          "id": 15,
          "question": "What is the event loop in JavaScript and how does it work ?",
          "answer": "The event loop is a mechanism in JavaScript that handles the execution of asynchronous code. It ensures that tasks are executed in a non-blocking manner.\nThe event loop continuously checks for tasks in the event queue and executes them one by one. It allows JavaScript to handle operations like timers, I/O operations, and callbacks efficiently."
        },
        {
          "id": 16,
          "question": "What is the difference between \"==\" and \"===\" in JavaScript ?",
          "answer": "The \"==\" operator compares the values of the operands after performing type coercion, while the \"===\" operator compares both the values and types of the operands without type coercion. Here is an example:\n\n1. \"==\" (Equality Operator):\nconsole.log(5 == '5'); // Output: true\n\n2. \"===\" (Strict Equality Operator):\nconsole.log(5 === '5'); // Output: false\n\nUsing the strict equality operator \"===\" is generally recommended in JavaScript because it avoids unexpected behavior caused by type coercion."
        },
        {
          "id": 17,
          "question": "What is the purpose of the \"localStorage\" and \"sessionStorage\" objects in JavaScript ?",
          "answer": "\"localStorage\" and \"sessionStorage\" are web storage mechanisms provided by browsers to store data on the client-side. They are part of the Web Storage API. \"localStorage\" stores data with no expiration date, while \"sessionStorage\" stores data for a single session and is cleared when the session ends. They are useful for persisting data between page reloads or for sharing data within a specific session."
        },
        {
          "id": 18,
          "question": "How does JavaScript handle memory management ?",
          "answer": "JavaScript uses automatic memory management through a technique called garbage collection. When an object is no longer referenced or accessible, the garbage collector identifies it as eligible for memory deallocation. The garbage collector then frees up the memory occupied by the object, making it available for future use."
        },
        {
          "id": 19,
          "question": "Explain the concept of prototypal inheritance in JavaScript.",
          "answer": "Prototypal inheritance is a mechanism in JavaScript where objects can inherit properties and methods from other objects. Each object has an internal link to another object called its prototype. If a property or method is not found on an object, JavaScript looks up the prototype chain until it finds the property or method in one of the prototypes."
        },
        {
          "id": 20,
          "question": "How does JavaScript handle exceptions and what are the key components of error handling in JavaScript ?",
          "answer": "JavaScript uses a try-catch-finally statement to handle exceptions. Code that might throw an exception is placed inside the \"try\" block, and if an exception occurs, it is caught in the \"catch\" block. The \"finally\" block is optional and is executed regardless of whether an exception occurred or not. Additionally, error objects in JavaScript have properties like name and message to provide information about the error."
        }
      ]
    },
    {
      "id": 2,
      "title": "React JS",
      "logo": "react.png",
      "description": "React is a JavaScript library for building user interfaces. It's widely used in web development, particularly for creating reusable components and optimizing rendering performance. Companies like Facebook, Instagram, Airbnb, and Netflix rely on React for their applications.",
      "lastUpdated": "7th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is React and why is it popular in web development ?",
          "answer": "React is a JavaScript library for building user interfaces. It is popular due to its component-based architecture, virtual DOM, and reusability, which enable developers to create fast, efficient, and interactive web applications."
        },
        {
          "id": 2,
          "question": "Explain the concept of JSX in React.",
          "answer": "JSX (JavaScript XML) is an extension to JavaScript syntax used in React to describe the structure and appearance of UI components. It allows developers to write HTML-like code within JavaScript, making it easier to compose and render components."
        },
        {
          "id": 3,
          "question": "What is the difference between functional components and class components in React ?",
          "answer": "Functional components are JavaScript functions that accept props as input and return JSX elements as output.\nClass components are ES6 classes that extend the React.Component class and define a render method.\nBoth can be used to create components, but functional components are simpler and recommended for most scenarios."
        },
        {
          "id": 4,
          "question": "How does React handle state management ?",
          "answer": "React uses state to manage component data that can change over time. State is managed within a component using the useState hook (in functional components) or the this.state object (in class components). Updating state triggers a re-render of the component and its child components."
        },
        {
          "id": 5,
          "question": "What are props in React and how are they used ?",
          "answer": "Props (properties) are used to pass data from a parent component to its child components. Props are read-only and help to keep the data flow in a single direction. They are defined as attributes in JSX when rendering components."
        },
        {
          "id": 6,
          "question": "Explain the concept of component lifecycle in React.",
          "answer": "The component lifecycle refers to the stages a React component goes through from creation to removal. It includes methods like componentDidMount, componentDidUpdate, and componentWillUnmount, which allow developers to hook into specific moments in a component's lifecycle to perform actions."
        },
        {
          "id": 7,
          "question": "What is the purpose of keys in React and why are they important ?",
          "answer": "Keys are used in React to uniquely identify and track components in lists or arrays. They help React efficiently update and reorder components, improving rendering performance and avoiding potential errors."
        },
        {
          "id": 8,
          "question": "How do you handle forms in React ?",
          "answer": "In React, form handling typically involves capturing and managing user input using controlled components. Controlled components bind the form elements' values to component state and handle changes through event handlers. This allows React to have full control over the form state."
        },
        {
          "id": 9,
          "question": "What are React hooks and how do they simplify development ?",
          "answer": "React hooks are functions introduced in React 16.8 that allow developers to use state and other React features in functional components. Hooks, such as useState and useEffect, enable easier code reuse, state management, and side-effect handling without the need for class components."
        },
        {
          "id": 10,
          "question": "What is conditional rendering in React and how is it achieved ?",
          "answer": "Conditional rendering in React involves displaying different content based on certain conditions. It can be achieved by using conditional statements like if-else or the ternary operator, or by leveraging logical operators like && and || within JSX."
        },
        {
          "id": 11,
          "question": "Explain the concept of React Router and its role in single-page applications.",
          "answer": "React Router is a popular library used for routing in React applications. It allows developers to create multiple pages or views within a single-page application (SPA). React Router manages the URL and renders the appropriate components based on the defined routes."
        },
        {
          "id": 12,
          "question": "How can you handle events in React ?",
          "answer": "In React, events are handled by passing event handlers as props to the corresponding elements. Event handlers are functions that are executed when a specific event occurs, such as a button click or input change. React provides synthetic events that work consistently across different browsers."
        },
        {
          "id": 13,
          "question": "What is the significance of the virtual DOM in React ?",
          "answer": "The virtual DOM is a lightweight copy of the actual DOM maintained by React. It allows React to perform efficient updates by comparing the virtual DOM with the real DOM and applying only the necessary changes. This results in faster rendering and improved performance."
        },
        {
          "id": 14,
          "question": "How can you optimize performance in React applications ?",
          "answer": "Performance optimization in React can be achieved by techniques like minimizing re-renders, using shouldComponentUpdate or React.memo, implementing lazy loading, code splitting, and using tools like React Profiler or Performance DevTools to identify and address performance bottlenecks."
        },
        {
          "id": 15,
          "question": "What is React context and how is it used ?",
          "answer": "React context is a feature that allows data to be passed through the component tree without explicitly passing props at each level. It provides a way to share data between components that are not directly connected in the component hierarchy. Context consists of a Provider and Consumer, enabling data sharing and updates."
        },
        {
          "id": 16,
          "question": "What are React components and how are they reusable ?",
          "answer": "React components are reusable building blocks that encapsulate a piece of UI and its behavior. Components can be composed and reused in different parts of an application. Reusability is achieved by passing different props to the same component or by using composition techniques."
        },
        {
          "id": 17,
          "question": "What are React hooks and how do they simplify development ?",
          "answer": "React hooks are functions introduced in React 16.8 that allow developers to use state and other React features in functional components. Hooks, such as useState and useEffect, enable easier code reuse, state management, and side-effect handling without the need for class components."
        },
        {
          "id": 18,
          "question": "How can you handle events in React ?",
          "answer": "In React, events are handled by passing event handlers as props to the corresponding elements. Event handlers are functions that are executed when a specific event occurs, such as a button click or input change. React provides synthetic events that work consistently across different browsers."
        },
        {
          "id": 19,
          "question": "What is the purpose of React DevTools and how can they be used ?",
          "answer": "React DevTools is a browser extension and development tool that provides an additional set of tools specifically for React. It allows developers to inspect and debug React components, view component hierarchies, monitor component props and state, and track component updates and performance."
        },
        {
          "id": 20,
          "question": "What are React fragments and why are they useful ?",
          "answer": "React fragments are a feature introduced in React 16.2 that allow multiple components to be rendered without adding extra nodes to the DOM. Fragments provide a way to group elements together without introducing additional parent elements. They are useful for improving component structure and performance."
        }
      ]
    },
    {
      "id": 3,
      "title": "Python",
      "logo": "python.png",
      "description": "Python is a popular and versatile programming language known for its simplicity and readability. It's widely used in web development, data analysis, AI, and automation. Python is favored for its clean syntax and extensive library ecosystem. It's employed by companies like Google, Dropbox, Instagram, and NASA",
      "lastUpdated": "11th June 2023",
      "body": [
        {
          "id": "1",
          "question": "What is Python ?",
          "answer": "Python is a high-level programming language known for its simplicity and readability. It provides a wide range of built-in libraries and frameworks, making it suitable for various applications."
        },
        {
          "id": "2",
          "question": "What are the key features of Python ?",
          "answer": "Some key features of Python include its easy-to-read syntax, dynamic typing, automatic memory management, extensive standard library, and support for multiple programming paradigms (such as procedural, object-oriented, and functional programming)."
        },
        {
          "id": "3",
          "question": "Explain the difference between Python 2 and Python 3.",
          "answer": "Python 2 and Python 3 are two major versions of the Python programming language. Python 3 introduced several backward-incompatible changes to improve the language's design, remove redundancy, and enhance its functionality. Some key differences include print function syntax, Unicode support, division operator behavior, and the handling of byte strings."
        },
        {
          "id": "4",
          "question": "What are the different data types available in Python ?",
          "answer": "Python supports various built-in data types, including integers, floats, strings, booleans, lists, tuples, dictionaries, sets, and frozensets. Additionally, Python allows users to define their own custom data types using classes."
        },
        {
          "id": "5",
          "question": "How do you comment in Python ?",
          "answer": "In Python, you can use the '#' symbol to write single-line comments. Anything after the '#' symbol on the same line is considered a comment. For multi-line comments, you can enclose the comment in triple quotes (''' comment ''') or use multiple '#' symbols at the beginning of each line."
        },
        {
          "id": "6",
          "question": "What is the difference between a list and a tuple in Python ?",
          "answer": "Lists and tuples are both sequence data types in Python, but the main difference is that lists are mutable, while tuples are immutable. This means that you can add, remove, or modify elements in a list, but you cannot modify a tuple after it is created."
        },
        {
          "id": "7",
          "question": "Explain the concept of a dictionary in Python.",
          "answer": "A dictionary in Python is an unordered collection of key-value pairs. Each key in the dictionary is unique and associated with a corresponding value. Dictionaries are mutable, allowing you to add, remove, or modify key-value pairs. They are commonly used to store and retrieve data based on a specific key."
        },
        {
          "id": "8",
          "question": "What is the difference between range() and xrange() in Python ?",
          "answer": "In Python 2, range() and xrange() are both functions used to generate a sequence of numbers. The main difference is that the range() function returns a list containing all the numbers in the specified range, while the xrange() function returns an iterator. The xrange() function is more memory-efficient as it generates values on the fly without creating a list in memory."
        },
        {
          "id": "9",
          "question": "How can you handle JSON data in Python ?",
          "answer": "Python provides the json module for handling JSON data. The json module allows you to serialize Python objects into JSON strings using the json.dumps() function, and deserialize JSON strings into Python objects using the json.loads() function. It provides methods for encoding and decoding JSON data, working with JSON files, and manipulating JSON structures."
        },
        {
          "id": "10",
          "question": "Explain the concept of list comprehension in Python.",
          "answer": "List comprehension is a concise way to create lists in Python. It allows you to generate a new list by iterating over an existing iterable and applying an expression or condition. The resulting list comprehension is created in a single line of code and is often more readable and efficient than traditional for loops."
        },
        {
          "id": "11",
          "question": "What is the purpose of the 'if __name__ == '__main__':' statement in Python ?",
          "answer": "The 'if __name__ == '__main__':' statement is used to check if the current script is being run as the main module or being imported as a module in another script. It allows you to write code that will only be executed when the script is run directly, but not when it is imported by another module. This is commonly used to define executable code or run tests in a Python script."
        },
        {
          "id": "12",
          "question": "What is the purpose of the 'self' parameter in Python class methods ?",
          "answer": "In Python, the 'self' parameter is used as a reference to the current instance of a class. It is a convention to name the first parameter of instance methods as 'self'. The 'self' parameter allows you to access and modify the instance's attributes and invoke other methods within the class."
        },
        {
          "id": "13",
          "question": "Explain the concept of inheritance in Python.",
          "answer": "Inheritance is a fundamental concept in object-oriented programming, and Python supports single inheritance and multiple inheritance. It allows a class to inherit attributes and methods from another class, known as the superclass or parent class. The inherited attributes and methods can be used directly by the subclass or can be overridden to provide specialized behavior."
        },
        {
          "id": "14",
          "question": "How can you handle exceptions in Python ?",
          "answer": "In Python, exceptions are handled using try-except blocks. Code that might raise an exception is placed inside the 'try' block, and if an exception occurs, it is caught and handled in the 'except' block. Multiple 'except' blocks can be used to handle different types of exceptions. The 'finally' block, if present, is executed regardless of whether an exception occurred or not."
        },
        {
          "id": "15",
          "question": "What is the purpose of the 'with' statement in Python ?",
          "answer": "The 'with' statement is used to provide a context for using resources that need to be explicitly opened and closed, such as files or database connections. It ensures that the resources are properly released, even if an exception occurs. The 'with' statement automatically calls the '__enter__' method of the resource object when entering the block and calls the '__exit__' method when leaving the block."
        },
        {
          "id": "16",
          "question": "Explain the concept of generators in Python.",
          "answer": "Generators are a type of iterable in Python that allow the creation of iterators. They are defined using a special syntax with the 'yield' keyword. Generators generate values on-the-fly and only store the current state of the sequence, resulting in memory-efficient and lazy evaluation. They are useful for dealing with large datasets or infinite sequences."
        },
        {
          "id": "17",
          "question": "What is the purpose of the 'super()' function in Python ?",
          "answer": "The 'super()' function is used to call a method in a superclass from a subclass. It allows the subclass to invoke the superclass's method and perform additional actions or override the method's behavior. The 'super()' function is typically used in the '__init__' method of the subclass to initialize the superclass's attributes."
        },
        {
          "id": "18",
          "question": "What are decorators in Python ?",
          "answer": "Decorators are a powerful feature in Python that allow the modification or extension of the behavior of a function or class without directly modifying its source code. Decorators are implemented as functions themselves and are used to wrap the original function or class, adding additional functionality before or after its execution."
        },
        {
          "id": "19",
          "question": "Explain the concept of multi-threading in Python.",
          "answer": "Multi-threading is a technique in Python that allows multiple threads of execution to run concurrently within a single program. Threads are lightweight and can perform tasks simultaneously, increasing the overall efficiency of the program. Python provides the 'threading' module to create and manage threads, allowing developers to implement parallelism in their applications."
        },
        {
          "id": "20",
          "question": "What is the purpose of the 'virtual environment' in Python ?",
          "answer": "A virtual environment in Python is an isolated environment that contains its own Python interpreter and libraries. It allows developers to work on multiple projects with different dependencies without conflicts. Virtual environments help maintain project-specific dependencies and ensure consistency across different environments or deployments."
        }
      ]
    },
    {
      "id": 4,
      "title": "SQL",
      "logo": "sql.png",
      "description": "SQL is a programming language for managing relational databases. It handles data storage, retrieval, and manipulation efficiently.",
      "lastUpdated": "12th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is SQL ?",
          "answer": "SQL stands for Structured Query Language. It is a programming language used for managing and manipulating relational databases."
        },
        {
          "id": 2,
          "question": "What is a database ?",
          "answer": "A database is a structured collection of data that is organized and managed for efficient retrieval and manipulation."
        },
        {
          "id": 3,
          "question": "What is a primary key in SQL ?",
          "answer": "A primary key is a unique identifier for each record in a table. It ensures that each row can be uniquely identified and provides a way to enforce data integrity."
        },
        {
          "id": 4,
          "question": "What is a foreign key in SQL ?",
          "answer": "A foreign key is a column or a set of columns in a table that refers to the primary key of another table. It establishes a relationship between the two tables."
        },
        {
          "id": 5,
          "question": "What is the difference between SQL and NoSQL databases ?",
          "answer": "SQL databases are relational databases that store data in structured tables, while NoSQL databases are non-relational and store data in a flexible format like key-value pairs or JSON documents."
        },
        {
          "id": 6,
          "question": "What is the difference between the WHERE and HAVING clauses in SQL ?",
          "answer": "The WHERE clause is used to filter rows based on a condition before grouping them, while the HAVING clause is used to filter groups based on a condition after the grouping is done."
        },
        {
          "id": 7,
          "question": "What is the difference between INNER JOIN and OUTER JOIN in SQL ?",
          "answer": "INNER JOIN returns only the matching rows between two tables, while OUTER JOIN returns all rows from one table and the matching rows from the other table."
        },
        {
          "id": 8,
          "question": "Explain the ACID properties in SQL.",
          "answer": "ACID stands for Atomicity, Consistency, Isolation, and Durability. These properties ensure that database transactions are reliable, consistent, and maintain data integrity."
        },
        {
          "id": 9,
          "question": "What is normalization in SQL ?",
          "answer": "Normalization is the process of organizing data in a database to eliminate redundancy and dependency issues. It involves splitting data into multiple tables and defining relationships between them."
        },
        {
          "id": 10,
          "question": "What is a subquery in SQL ?",
          "answer": "A subquery is a query nested within another query. It is used to retrieve data from one or more tables based on the result of another query."
        },
        {
          "id": 11,
          "question": "What is the difference between UNION and UNION ALL in SQL ?",
          "answer": "UNION combines the result sets of two or more SELECT statements and removes duplicates, while UNION ALL combines the result sets without removing duplicates."
        },
        {
          "id": 12,
          "question": "What is a stored procedure in SQL ?",
          "answer": "A stored procedure is a set of SQL statements that are stored in the database and can be executed multiple times. It helps improve performance, code reusability, and security."
        },
        {
          "id": 13,
          "question": "What is the difference between a view and a table in SQL ?",
          "answer": "A table stores data physically in the database, while a view is a virtual table that is derived from one or more tables or views. Views provide a way to simplify complex queries and restrict access to data."
        },
        {
          "id": 14,
          "question": "Explain the GROUP BY clause in SQL.",
          "answer": "The GROUP BY clause is used to group rows based on one or more columns. It is often used with aggregate functions like COUNT, SUM, AVG, etc., to perform calculations on grouped data."
        },
        {
          "id": 15,
          "question": "What is the purpose of the ORDER BY clause in SQL ?",
          "answer": "The ORDER BY clause is used to sort the result set based on one or more columns in ascending or descending order. It helps in presenting data in a specific order."
        },
        {
          "id": 16,
          "question": "What is the difference between a unique key and a primary key in SQL ?",
          "answer": "A primary key is a special type of unique key that uniquely identifies each record in a table and is automatically created when defining a table. A unique key ensures that a column or a set of columns has unique values but does not automatically define the record's identity."
        },
        {
          "id": 17,
          "question": "What is the purpose of the INDEX in SQL ?",
          "answer": "An INDEX is a database structure that improves the speed of data retrieval operations. It allows the database engine to quickly locate specific rows based on the values in the indexed columns."
        },
        {
          "id": 18,
          "question": "What is the difference between DDL and DML in SQL ?",
          "answer": "DDL (Data Definition Language) is used to define and modify the structure of database objects, such as tables, indexes, and views. DML (Data Manipulation Language) is used to manage and manipulate the data within those objects, such as inserting, updating, and deleting records."
        },
        {
          "id": 19,
          "question": "What is a self-join in SQL ?",
          "answer": "A self-join is a join operation where a table is joined with itself. It is useful when a table has a hierarchical or recursive structure, and you need to retrieve related data from the same table."
        },
        {
          "id": 20,
          "question": "What are triggers in SQL ?",
          "answer": "Triggers are special types of stored procedures that are automatically executed in response to specific events, such as INSERT, UPDATE, or DELETE operations on a table. They are used to enforce business rules, maintain data integrity, or perform additional actions based on the event."
        }
      ]
    },
    {
      "id": 5,
      "title": "Java",
      "logo": "java.png",
      "description": "Java is a versatile programming language used for developing a wide range of applications. It offers strong support for object-oriented programming and is known for its robustness and scalability. Java is widely employed by companies across industries.",
      "lastUpdated": "12th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Java ?",
          "answer": "Java is a high-level, object-oriented programming language developed by Sun Microsystems. It is designed to be platform-independent and runs on a wide range of devices, including computers, mobile phones, and embedded systems."
        },
        {
          "id": 2,
          "question": "What is the difference between JDK, JRE, and JVM ?",
          "answer": "JDK (Java Development Kit) is a software development kit that includes the necessary tools, libraries, and documentation to develop Java applications. JRE (Java Runtime Environment) is a runtime environment that provides the necessary libraries and files for executing Java applications. JVM (Java Virtual Machine) is an abstract machine that provides the runtime environment for executing Java bytecode."
        },
        {
          "id": 3,
          "question": "What are the features of Java ?",
          "answer": "Java has several features, including object-oriented programming, platform independence, automatic memory management (garbage collection), strong type checking, exception handling, and multithreading support."
        },
        {
          "id": 4,
          "question": "What is the difference between abstract classes and interfaces in Java ?",
          "answer": "Abstract classes can have both abstract and non-abstract methods, while interfaces can only have abstract methods. A class can implement multiple interfaces, but it can only extend a single abstract class."
        },
        {
          "id": 5,
          "question": "What is the difference between a class and an object in Java ?",
          "answer": "A class is a blueprint or template that defines the properties and behaviors of objects. An object is an instance of a class, created using the 'new' keyword. Multiple objects can be created from a single class."
        },
        {
          "id": 6,
          "question": "What is the use of the 'static' keyword in Java ?",
          "answer": "The 'static' keyword is used to define class-level members that are shared among all instances of a class. Static variables and methods can be accessed without creating an instance of the class."
        },
        {
          "id": 7,
          "question": "What is the difference between '==' and '.equals()' in Java ?",
          "answer": "'==' is used to compare the reference equality of two objects, while '.equals()' is used to compare the content equality of two objects. '.equals()' method needs to be overridden in custom classes to provide meaningful comparison."
        },
        {
          "id": 8,
          "question": "What is the purpose of the 'final' keyword in Java ?",
          "answer": "The 'final' keyword can be applied to variables, methods, and classes. A final variable cannot be changed once assigned, a final method cannot be overridden in subclasses, and a final class cannot be inherited."
        },
        {
          "id": 9,
          "question": "What is the difference between checked and unchecked exceptions in Java ?",
          "answer": "Checked exceptions are checked at compile-time and need to be handled using try-catch blocks or declared in the method signature using the 'throws' keyword. Unchecked exceptions are not checked at compile-time and do not require explicit handling."
        },
        {
          "id": 10,
          "question": "What are the access modifiers in Java ?",
          "answer": "Java has four access modifiers: public, protected, default (package-private), and private. These modifiers control the visibility and accessibility of classes, methods, and variables."
        },
        {
          "id": 11,
          "question": "What is the difference between the 'final', 'finally', and 'finalize' keywords in Java ?",
          "answer": "'final' is used to declare a constant value, 'finally' is a block that is always executed after the try and catch blocks, and 'finalize' is a method called by the garbage collector before reclaiming an object's memory."
        },
        {
          "id": 12,
          "question": "What is the Java Virtual Machine (JVM) ?",
          "answer": "The Java Virtual Machine (JVM) is an abstract machine that provides the runtime environment for executing Java bytecode. It provides memory management, garbage collection, and other essential runtime services."
        },
        {
          "id": 13,
          "question": "What is the difference between method overloading and method overriding ?",
          "answer": "Method overloading is defining multiple methods with the same name but different parameters in the same class. Method overriding is providing a different implementation of a method in a subclass, which is already defined in its superclass."
        },
        {
          "id": 14,
          "question": "What are constructors in Java ?",
          "answer": "Constructors are special methods that are used to initialize objects. They have the same name as the class and do not have a return type. Constructors can be used to set initial values for object properties."
        },
        {
          "id": 15,
          "question": "What is the 'this' keyword in Java ?",
          "answer": "The 'this' keyword refers to the current instance of a class. It is used to access instance variables and methods within the class, differentiate between instance variables and local variables, and invoke one constructor from another using constructor chaining."
        },
        {
          "id": 16,
          "question": "What is method overloading in Java ?",
          "answer": "Method overloading is the ability to define multiple methods with the same name but different parameters in the same class. The compiler selects the appropriate method to execute based on the arguments provided during method invocation."
        },
        {
          "id": 17,
          "question": "What is the purpose of the 'super' keyword in Java ?",
          "answer": "The 'super' keyword is used to refer to the superclass of a subclass. It can be used to call the superclass constructor, access superclass methods or variables, and differentiate between overridden and superclass methods with the same name."
        },
        {
          "id": 18,
          "question": "What is method overriding in Java ?",
          "answer": "Method overriding is the ability to provide a different implementation of a method in a subclass, which is already defined in its superclass. The method in the subclass must have the same name, return type, and parameters as the method in the superclass."
        },
        {
          "id": 19,
          "question": "What is the purpose of the 'package' statement in Java ?",
          "answer": "The 'package' statement is used to define a package, which is a way to organize related classes and interfaces into a single namespace. It helps in avoiding naming conflicts and provides better code organization and modularity."
        },
        {
          "id": 20,
          "question": "What are Java annotations ?",
          "answer": "Java annotations are metadata tags that provide additional information about code elements such as classes, methods, and variables. They can be used for various purposes like providing compiler instructions, runtime information, or generating documentation."
        }
      ]
    },
    {
      "id": 6,
      "title": "CSS",
      "logo": "css.png",
      "description": "CSS is a vital technology for web styling. It controls the appearance and layout of HTML elements. Widely used in web development, CSS enables visually appealing designs and responsive layouts, with options for colors, fonts, spacing, and animations.",
      "lastUpdated": "13th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is CSS ?",
          "answer": "CSS (Cascading Style Sheets) is a style sheet language used for describing the look and formatting of a document written in HTML."
        },
        {
          "id": 2,
          "question": "What are the different ways to include CSS in a web page ?",
          "answer": "CSS can be included in a web page using three different methods: inline styles, internal stylesheets, and external stylesheets."
        },
        {
          "id": 3,
          "question": "What is the box model in CSS ?",
          "answer": "The box model is a core concept in CSS that describes the layout of elements on a web page. It consists of the content area, padding, border, and margin of an element."
        },
        {
          "id": 4,
          "question": "What is a CSS selector ?",
          "answer": "A CSS selector is a pattern used to select and style elements on a web page. Selectors can target elements based on their tag name, class, ID, attributes, or relationship with other elements."
        },
        {
          "id": 5,
          "question": "What is the difference between classes and IDs in CSS ?",
          "answer": "Classes and IDs are both used to apply styles to elements, but they have some differences. Classes can be used on multiple elements, while IDs should be unique within a document. IDs have higher specificity than classes."
        },
        {
          "id": 6,
          "question": "What is the CSS float property used for ?",
          "answer": "The float property in CSS is used to specify how an element should float in relation to its containing element. Floated elements can be positioned to the left or right of the text or other elements."
        },
        {
          "id": 7,
          "question": "What is the CSS box-sizing property used for ?",
          "answer": "The box-sizing property in CSS is used to control how the width and height of an element are calculated. It can be set to content-box or border-box."
        },
        {
          "id": 8,
          "question": "What are media queries in CSS ?",
          "answer": "Media queries in CSS allow you to apply different styles based on various device characteristics, such as screen width, height, or resolution. They are commonly used for creating responsive web designs."
        },
        {
          "id": 9,
          "question": "What is the CSS display property used for ?",
          "answer": "The display property in CSS is used to control the layout behavior of an element. It specifies how an element should be rendered and affects its box type, such as block, inline, or inline-block."
        },
        {
          "id": 10,
          "question": "What is the CSS specificity and how does it work ?",
          "answer": "CSS specificity determines which styles are applied to an element when conflicting styles are present. It follows a specific order of specificity calculation based on selectors' types, IDs, classes, and inline styles."
        },
        {
          "id": 11,
          "question": "What is the CSS pseudo-class ?",
          "answer": "A CSS pseudo-class is used to select elements that are in a specific state or condition. Examples include :hover, :active, :focus, :nth-child, and :first-child."
        },
        {
          "id": 12,
          "question": "What is the CSS background property used for ?",
          "answer": "The background property in CSS is used to set the background color or image of an element. It can also control background positioning, repeat behavior, and other background-related properties."
        },
        {
          "id": 13,
          "question": "What is the CSS transition property used for ?",
          "answer": "The transition property in CSS is used to create smooth animations between different property values. It allows you to define the duration, timing function, and other properties of the transition."
        },
        {
          "id": 14,
          "question": "What is the CSS flexbox layout ?",
          "answer": "CSS flexbox is a layout module that provides a flexible way to arrange and align elements within a container. It allows you to create responsive and dynamic layouts with ease."
        },
        {
          "id": 15,
          "question": "What is the CSS pseudo-element ?",
          "answer": "A CSS pseudo-element is used to style a specific part of an element. Examples include ::before and ::after, which are used to insert content before and after an element's content, respectively."
        },
        {
          "id": 16,
          "question": "What is the CSS position property used for ?",
          "answer": "The position property in CSS is used to specify how an element is positioned within its parent container. It can be set to static, relative, absolute, fixed, or sticky."
        },
        {
          "id": 17,
          "question": "What is the CSS grid layout ?",
          "answer": "CSS grid is a layout module that allows you to create complex grid-based layouts with rows and columns. It provides a two-dimensional grid system for arranging elements."
        },
        {
          "id": 18,
          "question": "What is the CSS pseudo-selector ?",
          "answer": "A CSS pseudo-selector is used to select specific elements based on their state or position in the document tree. Examples include :first-child, :last-child, :nth-child, and :hover."
        },
        {
          "id": 19,
          "question": "What is the CSS transform property used for ?",
          "answer": "The transform property in CSS is used to apply 2D or 3D transformations to an element. It can be used to rotate, scale, skew, or translate an element in different directions."
        },
        {
          "id": 20,
          "question": "What is the CSS @media rule used for ?",
          "answer": "The @media rule in CSS is used to apply different styles based on specific media types or conditions. It allows you to create styles specific to different devices, such as screens, printers, or handheld devices."
        }
      ]
    },
    {
      "id": 7,
      "title": "HTML",
      "logo": "html.png",
      "description": "HTML is the standard markup language for creating web pages. It structures content and enables interactive and accessible websites across devices and browsers.",
      "lastUpdated": "14th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is HTML ?",
          "answer": "HTML (Hypertext Markup Language) is the standard markup language for creating web pages and web applications."
        },
        {
          "id": 2,
          "question": "What are the basic structure and tags of an HTML document ?",
          "answer": "An HTML document has a basic structure consisting of the doctype declaration, html element, head element, and body element. Commonly used tags include <h1> to <h6> for headings, <p> for paragraphs, <a> for links, and <img> for images."
        },
        {
          "id": 3,
          "question": "What is the purpose of the <head> tag in HTML ?",
          "answer": "The <head> tag in HTML is used to define the document's metadata, including the title, character encoding, linked stylesheets, and JavaScript files."
        },
        {
          "id": 4,
          "question": "What is the <div> tag used for in HTML ?",
          "answer": "The <div> tag in HTML is a container element that is used to group other HTML elements together and apply styles or scripts to them as a group."
        },
        {
          "id": 5,
          "question": "What is the difference between inline and block-level elements in HTML ?",
          "answer": "Inline elements are displayed inline with the surrounding content and do not start on a new line. Block-level elements, on the other hand, start on a new line and take up the full width available."
        },
        {
          "id": 6,
          "question": "What are semantic HTML elements ?",
          "answer": "Semantic HTML elements are tags that provide meaning to the structure and content of web pages. Examples include <header>, <nav>, <article>, <section>, <aside>, and <footer>."
        },
        {
          "id": 7,
          "question": "What is the difference between the <span> and <div> tags in HTML ?",
          "answer": "The <span> tag is an inline element used to apply styles or scripts to a specific section of text or content within a line, while the <div> tag is a block-level element used to group other elements together."
        },
        {
          "id": 8,
          "question": "What is the <a> tag used for in HTML ?",
          "answer": "The <a> tag in HTML is used to create links to other web pages, files, or locations within the same page. It is commonly used for navigation or to provide references to related content."
        },
        {
          "id": 9,
          "question": "What is the purpose of the alt attribute in the <img> tag ?",
          "answer": "The alt attribute in the <img> tag is used to provide alternative text for an image, which is displayed if the image cannot be loaded or for accessibility purposes."
        },
        {
          "id": 10,
          "question": "What is the difference between the <ol> and <ul> tags in HTML ?",
          "answer": "The <ol> tag is used to create ordered lists with numbered items, while the <ul> tag is used to create unordered lists with bullet-pointed items."
        },
        {
          "id": 11,
          "question": "What is the role of the <table> tag in HTML ?",
          "answer": "The <table> tag in HTML is used to create structured tabular data. It consists of one or more <tr> (table row) elements containing <th> (table header) or <td> (table data) cells."
        },
        {
          "id": 12,
          "question": "What is the purpose of the <form> tag in HTML ?",
          "answer": "The <form> tag in HTML is used to create interactive forms that allow users to input and submit data. It can contain various input elements like text fields, checkboxes, radio buttons, and submit buttons."
        },
        {
          "id": 13,
          "question": "What is the role of the <head> tag in HTML ?",
          "answer": "The <head> tag in HTML is used to define the document's metadata, including the title, character encoding, linked stylesheets, and JavaScript files."
        },
        {
          "id": 14,
          "question": "What is the <textarea> tag used for in HTML ?",
          "answer": "The <textarea> tag in HTML is used to create a multiline input field where users can enter and edit text. It is commonly used for comments, messages, or larger blocks of text."
        },
        {
          "id": 15,
          "question": "What is the role of the <iframe> tag in HTML ?",
          "answer": "The <iframe> tag in HTML is used to embed another HTML document or external content within the current document. It is commonly used for displaying videos, maps, or external web pages."
        },
        {
          "id": 16,
          "question": "What are the different types of form input elements in HTML ?",
          "answer": "HTML provides various form input elements, including text fields (<input type='text'>), checkboxes (<input type='checkbox'>), radio buttons (<input type='radio'>), select dropdowns (<select>), and submit buttons (<input type='submit'>)."
        },
        {
          "id": 17,
          "question": "What is the purpose of the alt attribute in the <img> tag ?",
          "answer": "The alt attribute in the <img> tag is used to provide alternative text for an image, which is displayed if the image cannot be loaded or for accessibility purposes."
        },
        {
          "id": 18,
          "question": "What is the role of the <header> tag in HTML ?",
          "answer": "The <header> tag in HTML is used to define the introductory content or a container for the introductory content of a section or page. It often contains headings, logos, and navigation."
        },
        {
          "id": 19,
          "question": "What is the purpose of the target attribute in the <a> tag ?",
          "answer": "The target attribute in the <a> tag is used to specify where the linked content should be opened when the link is clicked. Common values include '_blank' (open in a new tab or window) and '_self' (open in the same tab or window)."
        },
        {
          "id": 20,
          "question": "What is the role of the <footer> tag in HTML ?",
          "answer": "The <footer> tag in HTML is used to define the footer section or a container for the footer content of a section or page. It often contains copyright information, links, and author credits."
        }
      ]
    },
    {
      "id": 8,
      "title": "Django",
      "logo": "htmll.png",
      "description": "Django is a powerful Python web framework known for its rapid development capabilities and comprehensive features. It emphasizes code reusability and scalability, making it popular among developers.",
      "lastUpdated": "15th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Django ?",
          "answer": "Django is a high-level web framework written in Python that follows the Model-View-Controller (MVC) architectural pattern. It provides a set of tools and libraries for building web applications quickly and efficiently."
        },
        {
          "id": 2,
          "question": "What is the difference between Django and Flask ?",
          "answer": "Django is a full-featured web framework that provides a lot of built-in functionalities and follows a batteries-included approach. Flask, on the other hand, is a micro web framework that is minimalistic and provides only the essentials for building web applications."
        },
        {
          "id": 3,
          "question": "What are the advantages of using Django for web development ?",
          "answer": "Some advantages of using Django include its scalability, security features, built-in administrative interface (Django Admin), object-relational mapping (ORM), template engine, and support for various databases."
        },
        {
          "id": 4,
          "question": "What is an ORM ? How does Django's ORM work ?",
          "answer": "ORM stands for Object-Relational Mapping. Django's ORM maps database tables to Python objects and provides an abstraction layer for database operations. It allows developers to interact with the database using Python code instead of writing raw SQL queries."
        },
        {
          "id": 5,
          "question": "What is a Django model ?",
          "answer": "A Django model is a Python class that represents a database table. It defines the structure of the table and includes fields and methods to manipulate the data. Models are used in Django to interact with the database."
        },
        {
          "id": 6,
          "question": "What is a Django view ?",
          "answer": "A Django view is a Python function or class that takes a web request and returns a web response. Views define the logic for handling different URLs and generating dynamic content to be displayed in the browser."
        },
        {
          "id": 7,
          "question": "What is a Django template ?",
          "answer": "A Django template is a text file that defines the structure and layout of a web page. It can contain HTML markup with placeholders for dynamic content. Django's template engine processes the template and replaces the placeholders with actual values."
        },
        {
          "id": 8,
          "question": "What is the Django admin site ?",
          "answer": "The Django admin site is a built-in feature that provides a user-friendly interface for managing and interacting with the data in the database. It automatically generates a CRUD (Create, Read, Update, Delete) interface based on the model definitions."
        },
        {
          "id": 9,
          "question": "What is the purpose of Django migrations ?",
          "answer": "Django migrations are used to manage changes in the database schema over time. They allow you to create, modify, and apply database schema changes without losing existing data. Migrations are created based on the changes in Django models."
        },
        {
          "id": 10,
          "question": "What are Django forms ?",
          "answer": "Django forms are used to handle user input and data validation. They provide a convenient way to define HTML forms, handle form submission, and perform validation on the submitted data."
        },
        {
          "id": 11,
          "question": "What is the Django REST framework ?",
          "answer": "The Django REST framework is a powerful extension to Django that allows you to build RESTful APIs quickly and easily. It provides tools and libraries for handling API requests, serialization, authentication, and more."
        },
        {
          "id": 12,
          "question": "What is Django middleware ?",
          "answer": "Django middleware is a component that sits between the web server and the view. It allows you to process the request and response globally across all views. Middleware can perform tasks like authentication, request processing, and response modification."
        },
        {
          "id": 13,
          "question": "What is the Django URLconf ?",
          "answer": "The Django URLconf is a module that maps URLs to views. It contains a set of patterns and corresponding view functions or classes. The URLconf defines the URL structure of a Django application."
        },
        {
          "id": 14,
          "question": "What are Django signals ?",
          "answer": "Django signals are used to allow decoupled applications to get notified when certain actions occur elsewhere in the application. Signals are used for implementing certain cross-application functionalities and can be used for various purposes."
        },
        {
          "id": 15,
          "question": "What is the Django template language ?",
          "answer": "The Django template language is a domain-specific language (DSL) used to define dynamic content in Django templates. It provides constructs for variables, loops, conditionals, filters, and more."
        },
        {
          "id": 16,
          "question": "What is the Django context ?",
          "answer": "The Django context is a dictionary-like object that stores variables and their values. It provides data to the templates for rendering dynamic content. Context can be passed to templates from views or middleware."
        },
        {
          "id": 17,
          "question": "What are Django apps ?",
          "answer": "Django apps are self-contained modules that encapsulate a specific functionality or a set of related functionalities. Apps can be plugged into Django projects to add specific features or extend the project's capabilities."
        },
        {
          "id": 18,
          "question": "What is the Django testing framework ?",
          "answer": "The Django testing framework is a set of tools and utilities provided by Django for writing and executing tests. It allows developers to write unit tests, integration tests, and functional tests for Django applications."
        },
        {
          "id": 19,
          "question": "What is Django's Object-Relational Mapping (ORM) ?",
          "answer": "Django's Object-Relational Mapping (ORM) is a technique that allows developers to interact with the database using Python objects instead of writing raw SQL queries. The ORM maps database tables to Python classes and provides an abstraction layer for database operations."
        },
        {
          "id": 20,
          "question": "What is Django's authentication system ?",
          "answer": "Django's authentication system provides a secure way to manage user authentication and authorization. It includes features like user registration, login, logout, password reset, and user permissions."
        }
      ]
    },
    {
      "id": 9,
      "title": "MongoDB",
      "logo": "mongo.png",
      "description": "MongoDB is a scalable NoSQL database known for its flexibility and document-oriented approach. It's widely used in modern web applications for its performance and ease of use.",
      "lastUpdated": "15th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is MongoDB ?",
          "answer": "MongoDB is a popular NoSQL database that provides high performance, scalability, and flexibility for storing and retrieving data."
        },
        {
          "id": 2,
          "question": "What are the advantages of using MongoDB ?",
          "answer": "MongoDB offers flexible schema design, automatic sharding for horizontal scaling, built-in replication for high availability, and a rich query language for data retrieval."
        },
        {
          "id": 3,
          "question": "How does MongoDB handle data relationships ?",
          "answer": "In MongoDB, you can represent relationships between data using embedded documents or references. The choice depends on the nature of the data and the query patterns."
        },
        {
          "id": 4,
          "question": "What is the role of indexes in MongoDB ?",
          "answer": "Indexes in MongoDB improve query performance by allowing the database to quickly locate the documents matching certain criteria. They are defined on specific fields or expressions."
        },
        {
          "id": 5,
          "question": "How can you perform CRUD operations in MongoDB ?",
          "answer": "CRUD operations (Create, Read, Update, Delete) in MongoDB are performed using the insert, find, update, and remove methods. These operations interact with the collections and documents."
        },
        {
          "id": 6,
          "question": "What is sharding in MongoDB ?",
          "answer": "Sharding in MongoDB is a technique for horizontal scaling where data is distributed across multiple machines in a cluster. It allows for increased data storage and higher throughput."
        },
        {
          "id": 7,
          "question": "What is the MongoDB Atlas ?",
          "answer": "MongoDB Atlas is a fully managed cloud database service provided by MongoDB. It offers automated backups, scaling, and monitoring, making it easy to deploy and manage MongoDB in the cloud."
        },
        {
          "id": 8,
          "question": "How does MongoDB ensure high availability ?",
          "answer": "MongoDB ensures high availability through replica sets. A replica set is a group of MongoDB servers that maintain the same data set, providing redundancy and automatic failover."
        },
        {
          "id": 9,
          "question": "What is the aggregation framework in MongoDB ?",
          "answer": "The aggregation framework in MongoDB allows you to perform advanced data processing operations, such as grouping, filtering, and computing aggregations, using a pipeline of stages."
        },
        {
          "id": 10,
          "question": "What is the MongoDB Compass ?",
          "answer": "MongoDB Compass is a graphical user interface (GUI) tool provided by MongoDB for visually exploring and interacting with MongoDB data. It offers an intuitive way to query, analyze, and visualize data."
        },
        {
          "id": 11,
          "question": "What is the MongoDB WiredTiger storage engine ?",
          "answer": "WiredTiger is the default storage engine in MongoDB since version 3.2. It provides support for document-level concurrency control, compression, and efficient data storage and retrieval."
        },
        {
          "id": 12,
          "question": "What is the difference between SQL and NoSQL databases, specifically MongoDB ?",
          "answer": "SQL databases use a structured schema and are based on the relational model, while NoSQL databases like MongoDB use a flexible schema and can store data in various formats like documents, key-value pairs, or graphs."
        },
        {
          "id": 13,
          "question": "How does MongoDB handle data consistency ?",
          "answer": "MongoDB provides tunable data consistency. It offers strong consistency guarantees at the document level within a replica set, and eventually consistent reads across multiple replica sets in a sharded cluster."
        },
        {
          "id": 14,
          "question": "What is MongoDB Compass Schema ?",
          "answer": "MongoDB Compass Schema is a feature in MongoDB Compass that allows you to visualize and explore the structure of your MongoDB data. It provides a graphical representation of the database schema."
        },
        {
          "id": 15,
          "question": "What is the role of indexes in MongoDB ?",
          "answer": "Indexes in MongoDB improve query performance by allowing the database to quickly locate the documents matching certain criteria. They are defined on specific fields or expressions."
        },
        {
          "id": 16,
          "question": "What is the MongoDB aggregation pipeline ?",
          "answer": "The MongoDB aggregation pipeline is a framework for data aggregation and transformation. It allows you to process data records and apply multiple stages of operations, such as filtering, grouping, sorting, and projecting."
        },
        {
          "id": 17,
          "question": "What is the role of the oplog in MongoDB ?",
          "answer": "The oplog (operations log) in MongoDB is a capped collection that records all the write operations that modify data in a replica set. It allows secondary nodes to replicate and catch up with the primary node."
        },
        {
          "id": 18,
          "question": "What is the GridFS in MongoDB ?",
          "answer": "GridFS is a specification in MongoDB for storing and retrieving large files, such as images, videos, and audio files. It divides the file into smaller chunks and stores them as separate documents."
        },
        {
          "id": 19,
          "question": "What are MongoDB transactions ?",
          "answer": "MongoDB transactions allow you to perform multiple operations on multiple documents in an atomic and isolated manner. It ensures that either all the operations succeed or none of them take effect."
        },
        {
          "id": 20,
          "question": "What is the role of the MongoDB Connector for BI ?",
          "answer": "The MongoDB Connector for BI is a tool that allows you to connect MongoDB with popular Business Intelligence (BI) and data visualization tools. It enables you to analyze and visualize MongoDB data using familiar BI tools."
        }
      ]
    },
    {
      "id": 10,
      "title": "Node JS",
      "logo": "nodejs.png",
      "description": "Node.js is a JavaScript runtime for server-side applications. It enables scalable and efficient web development with a vast ecosystem of packages.",
      "lastUpdated": "15th June 2023",
      "body": [
        {
          "id": 1,
          "question": "What is Node.js ?",
          "answer": "Node.js is an open-source JavaScript runtime environment that allows developers to run JavaScript code on the server-side. It is built on the V8 JavaScript engine and provides an event-driven, non-blocking I/O model for building scalable and high-performance applications."
        },
        {
          "id": 2,
          "question": "What is npm ?",
          "answer": "npm (Node Package Manager) is the default package manager for Node.js. It provides a vast ecosystem of packages and libraries that can be easily installed, updated, and managed within Node.js projects."
        },
        {
          "id": 3,
          "question": "What is the difference between Node.js and JavaScript ?",
          "answer": "Node.js is a runtime environment that allows JavaScript code to run on the server-side, while JavaScript is a programming language that can be run in web browsers or other environments. Node.js extends JavaScript by adding features and APIs specific to server-side development."
        },
        {
          "id": 4,
          "question": "What is the event-driven architecture in Node.js ?",
          "answer": "The event-driven architecture in Node.js allows developers to write asynchronous code that responds to events. It utilizes callbacks, event emitters, and event loops to handle I/O operations efficiently and avoid blocking the execution of other code."
        },
        {
          "id": 5,
          "question": "What is a callback function in Node.js ?",
          "answer": "A callback function in Node.js is a function that is passed as an argument to another function and is invoked once an asynchronous operation is completed. It allows developers to handle the result of the asynchronous operation or perform additional actions."
        },
        {
          "id": 6,
          "question": "What is the role of the 'require' function in Node.js ?",
          "answer": "The 'require' function in Node.js is used to load and use external modules or libraries in a Node.js application. It allows you to include functionality from other files or packages into your application."
        },
        {
          "id": 7,
          "question": "What is the purpose of the 'exports' object in Node.js ?",
          "answer": "The 'exports' object in Node.js is used to define and expose functionalities from a module. It allows you to specify which parts of the module should be accessible from other modules when the module is required using the 'require' function."
        },
        {
          "id": 8,
          "question": "What is a Promise in Node.js ?",
          "answer": "A Promise in Node.js is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It allows you to write asynchronous code in a more readable and manageable way, using methods like 'then' and 'catch'."
        },
        {
          "id": 9,
          "question": "What is middleware in Express.js ?",
          "answer": "Middleware in Express.js is a function that sits between the server and the route handlers. It can perform tasks such as request parsing, authentication, logging, and error handling. Middleware functions can be used to modularize and enhance the functionality of Express.js applications."
        },
        {
          "id": 10,
          "question": "What is the difference between 'require' and 'import' in Node.js ?",
          "answer": "'require' is the common way to include modules in Node.js, while 'import' is the ES6 syntax used for importing modules in JavaScript. 'import' requires additional configuration and is commonly used with transpilers like Babel when working with modern JavaScript features in Node.js."
        },
        {
          "id": 11,
          "question": "What is Express.js ?",
          "answer": "Express.js is a popular web application framework for Node.js. It provides a simple and flexible set of features for building web applications, including routing, middleware support, template engines, and more."
        },
        {
          "id": 12,
          "question": "What is the purpose of the 'next' function in Express.js middleware ?",
          "answer": "The 'next' function in Express.js middleware is used to pass control to the next middleware function in the chain. It is typically called at the end of a middleware function to indicate that it has completed its processing and to continue to the next middleware or route handler."
        },
        {
          "id": 13,
          "question": "What is the role of the 'module.exports' object in Node.js ?",
          "answer": "The 'module.exports' object in Node.js is used to define the public interface of a module. It allows you to specify which parts of the module should be accessible when the module is required using the 'require' function."
        },
        {
          "id": 14,
          "question": "What is the difference between synchronous and asynchronous code in Node.js ?",
          "answer": "Synchronous code in Node.js blocks the execution until a task is completed, while asynchronous code allows other tasks to continue while waiting for a task to complete. Asynchronous code in Node.js is commonly used for I/O operations to ensure optimal performance and responsiveness."
        },
        {
          "id": 15,
          "question": "What is the role of the 'buffer' class in Node.js ?",
          "answer": "The 'buffer' class in Node.js is used to handle binary data. It provides methods for creating, manipulating, and reading binary data, such as encoding and decoding strings, working with streams, and performing low-level operations on buffers."
        },
        {
          "id": 16,
          "question": "What is the purpose of the 'fs' module in Node.js ?",
          "answer": "The 'fs' module in Node.js provides an API for interacting with the file system. It allows you to read from and write to files, create or delete files and directories, modify file permissions, and perform other file-related operations."
        },
        {
          "id": 17,
          "question": "What is the event loop in Node.js ?",
          "answer": "The event loop in Node.js is a mechanism that allows the execution of multiple asynchronous tasks in a non-blocking manner. It ensures that I/O operations and callbacks are processed efficiently and that the application remains responsive."
        },
        {
          "id": 18,
          "question": "What are streams in Node.js ?",
          "answer": "Streams in Node.js provide an interface for reading from or writing to a continuous flow of data. They can be used to process large amounts of data efficiently, handle data in chunks, and perform operations like piping data between different streams."
        },
        {
          "id": 19,
          "question": "What is clustering in Node.js ?",
          "answer": "Clustering in Node.js is a technique that allows you to utilize multiple processor cores to handle incoming requests. It creates child processes (workers) that share the same server port and distribute the workload, improving the application's performance and scalability."
        },
        {
          "id": 20,
          "question": "What is REPL in Node.js ?",
          "answer": "REPL stands for Read-Eval-Print Loop. It is a built-in feature of Node.js that allows you to interactively execute JavaScript code and see the results immediately. The REPL environment provides a convenient way to experiment, debug, and learn Node.js."
        }
      ]
    }
  ]
}
